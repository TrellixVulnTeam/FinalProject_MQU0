{"ast":null,"code":"import { SecurityContext } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { Attendance } from '../models/Attendance';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"ngx-spinner\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/platform-browser\";\nexport let SectionService = /*#__PURE__*/(() => {\n  class SectionService {\n    constructor(http, toastr, spinner, router, sanitizer) {\n      this.http = http;\n      this.toastr = toastr;\n      this.spinner = spinner;\n      this.router = router;\n      this.sanitizer = sanitizer;\n      this.section = [{}];\n      this.TrainerSection = [{}];\n      this.sections = [{}];\n      this.status = [{}];\n      this.tasks = [];\n      this.tasksAnswers = [] = [];\n      this.arr = new Attendance();\n      this.traineeSection = [{}];\n      this.filterTraineeSection = [{}];\n      this.studentsInfoAttend = [];\n      this.studentsAttendenceArray = [];\n    }\n\n    reloadComponent() {\n      let currentUrl = this.router.url;\n\n      this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n\n      this.router.onSameUrlNavigation = 'reload';\n      this.router.navigate([currentUrl]);\n    }\n\n    ReturnAllTrainerSections(TrainerId) {\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'Section/ReturnAllTrainerSections/' + TrainerId, TrainerId).subscribe(result => {\n        this.TrainerSection = result;\n        this.spinner.hide();\n        this.TrainerSection.forEach(element => {\n          this.myBase64 = this.sanitizer.bypassSecurityTrustResourceUrl(`data:image/png;base64, ${element.courseImage}`);\n          this.sanitizer.sanitize(SecurityContext.HTML, this.myBase64);\n          element.courseImage = this.myBase64;\n        });\n        this.spinner.hide();\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something wrong');\n      });\n    }\n\n    InsertTaskMarkForTrainee(obj) {\n      this.http.put('http://localhost:54921/api/Section/UpdateTraineeTask', obj).subscribe(res => {});\n    }\n\n    getSections(courseId) {\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'Section/ReturnSectionByCourseId/' + courseId, courseId).subscribe(res => {\n        debugger;\n        this.sections = res; // this.toastr.success('Data Retrived !!!');\n\n        this.spinner.hide();\n      }, err => {// this.spinner.hide();\n        // this.toastr.warning('Something wrong');\n      });\n      debugger;\n    } /////////\n\n\n    getSectionsById(courseId) {\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'Section/ReturnSectionByCourseId/' + courseId, courseId).subscribe(res => {\n        this.spinner.hide();\n        this.toastr.success('Send Message successfully, Thank You :)');\n        console.log(res);\n        this.section = res;\n        console.log(\"test\", this.section);\n        this.toastr.success('Data Retrived !!!'); ///jjk\n      }, err => {// this.spinner.hide();\n        // this.toastr.warning('Something wrong');\n      });\n      debugger;\n    }\n\n    getStatus() {\n      // debugger;\n      //  this.spinner.show();\n      this.http.get(environment.apiUrl + 'Section/GetAllStatus/').subscribe(res => {\n        // debugger\n        // this.spinner.hide();\n        // this.toastr.success('Send Message successfully, Thank You :)');\n        debugger;\n        console.log(res);\n        this.status = res; // console.log( \"test\",this.courses)\n        // this.toastr.success('Data Retrived !!!');\n      }, err => {// this.spinner.hide();\n        // this.toastr.warning('Something wrong');\n      });\n      debugger;\n    }\n\n    createSection(section, trainerId) {\n      debugger;\n      this.http.post(environment.apiUrl + 'Section/AddSection/' + trainerId, section).subscribe(res => {\n        // debugger\n        // this.spinner.hide();\n        // this.toastr.success('Send Message successfully, Thank You :)');\n        debugger; // console.log( \"test\",this.courses)\n\n        this.toastr.success('Data Retrived !!!');\n        window.location.reload();\n      }, err => {\n        // this.spinner.hide();\n        this.toastr.warning('Something wrong');\n      });\n      debugger;\n      ;\n    }\n\n    AddAttendance(trainerId) {\n      debugger;\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'Employee/AddAttendanceTrainee/', trainerId).subscribe(res => {\n        // debugger\n        this.spinner.hide();\n        this.toastr.success('Section Created Successfully');\n        debugger; // console.log( \"test\",this.courses)\n        // this.toastr.success('Data Retrived !!!');\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something wrong');\n      });\n      debugger;\n      ;\n    }\n\n    deleteSection(sectionId) {\n      this.http.delete(environment.apiUrl + 'Section/DeleteSection/' + sectionId).subscribe(res => {\n        debugger; // this.spinner.hide();\n\n        window.location.reload();\n        this.toastr.success('Course Deleted successfully !!!');\n      }, err => {\n        // this.spinner.hide();\n        this.toastr.error('Something Wrong, Try Again!');\n      });\n      debugger;\n    }\n\n    updateSection(section, trainerId) {\n      this.spinner.show();\n      this.http.put(environment.apiUrl + 'Section/UpdateSection/' + trainerId, section).subscribe(res => {\n        this.spinner.hide();\n        this.toastr.success('Section Updated Successfully!!');\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something wrong');\n      });\n      debugger;\n      ;\n    }\n\n    SetSection(sectionId) {\n      this.SelectedSection = sectionId;\n    }\n\n    ReturnTraineeSection(sectionId) {\n      debugger;\n      this.http.post(environment.apiUrl + 'Section/ReturnTraineeSection/' + sectionId, null).subscribe(res => {\n        // debugger\n        // this.spinner.hide();\n        // this.toastr.success('Send Message successfully, Thank You :)');\n        debugger;\n        this.traineeSection = res;\n        this.filterTraineeSection = res; // console.log( \"test\",this.courses)\n\n        this.toastr.success('Data Retrived !!!');\n      }, err => {\n        // this.spinner.hide();\n        this.toastr.warning('Something wrong');\n      });\n    }\n\n    TraineeSection(sectionId) {\n      debugger;\n      this.filterTraineeSection = this.traineeSection.filter(i => i.sectionId == sectionId.value);\n      debugger;\n    }\n\n    CreateNewTaskForSection(object) {\n      this.http.post('http://localhost:54921/api/Section/InsertTask', object).subscribe(res => {\n        if (res) {\n          this.toastr.success('uploaded Success');\n        } else {\n          this.toastr.error('Failed Operation');\n        }\n      });\n      window.location.reload();\n    }\n\n    GetTrainerSectionTask(sectionId) {\n      const current = this.TrainerSection.find(x => x.sectionId == sectionId);\n      this.TrainerSectionId = current.trainerSectionId;\n      debugger;\n      this.http.post(`http://localhost:54921/api/Section/ReturnTasksOfSection?sectionTrainerId=${this.TrainerSectionId}`, null).subscribe(res => {\n        this.tasks = res;\n      });\n    }\n\n    GetTraineeSectionTaskAnswer() {\n      this.http.post('http://localhost:54921/api/Section/ReturnSolutionOfTask?taskId=1&sectionId=1', null).subscribe(res => {\n        this.tasksAnswers = res;\n      });\n    }\n\n    ReturnLectureBySectionId(SectionId) {\n      this.http.post(`http://localhost:54921/api/Section/ReturnLectureBySectionId=${SectionId}`, null).subscribe(res => {\n        this.CurrentLecture = res;\n        this.CurrentLecture = this.CurrentLecture.filter(x => x.sectionId == SectionId);\n        var LectureMax = 0;\n\n        for (let data of this.CurrentLecture) {\n          if (data.lectureId >= LectureMax) LectureMax = data.lectureId;\n        }\n\n        this.CurrentLecture = LectureMax;\n      });\n    }\n\n    GetTraineeInSpecificSection(SectionId) {\n      this.http.post(`http://localhost:54921/api/Section/ReturnTraineeInSection?sectionId=${SectionId}`, null).subscribe(res => {\n        this.studentsInfoAttend = res;\n\n        for (let i of this.studentsInfoAttend) {\n          const attendanceObject = {\n            studentId: i.trineeId,\n            studentName: i.traineeName,\n            isPresent: false,\n            lectureId: this.CurrentLecture\n          };\n          this.studentsAttendenceArray.push(attendanceObject);\n        }\n      });\n    }\n\n    SaveAttendenceReport() {\n      for (let i of this.studentsAttendenceArray) {\n        const attend = {\n          traineeId: i.studentId,\n          isPresent: i.isPresent,\n          lectureId: this.CurrentLecture,\n          createdBy: 1\n        };\n        this.http.post('http://localhost:54921/api/Section/InsertTraineeAttendance', attend).subscribe(res => {});\n      }\n    }\n\n  }\n\n  SectionService.ɵfac = function SectionService_Factory(t) {\n    return new (t || SectionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.NgxSpinnerService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i5.DomSanitizer));\n  };\n\n  SectionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SectionService,\n    factory: SectionService.ɵfac,\n    providedIn: 'root'\n  });\n  return SectionService;\n})();","map":null,"metadata":{},"sourceType":"module"}