{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport jwtDecode from 'jwt-decode';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ngx-toastr\";\nimport * as i5 from \"ngx-spinner\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http, jwtHelper, router, toastr, spinner) {\n      this.http = http;\n      this.jwtHelper = jwtHelper;\n      this.router = router;\n      this.toastr = toastr;\n      this.spinner = spinner;\n      this.loggedIn = false;\n      this.username = new FormControl('', [Validators.required]);\n      this.password = new FormControl('', [Validators.required]);\n      this.formGroup = new FormGroup({\n        username: new FormControl(''),\n        firstName: new FormControl('', [Validators.required]),\n        lastName: new FormControl('', [Validators.required]),\n        email: new FormControl('', [Validators.required, Validators.email]),\n        imageName: new FormControl(''),\n        nationality: new FormControl('', [Validators.required]),\n        phoneNumber: new FormControl('', [Validators.required, Validators.pattern(\"^[0-9]*$\")]),\n        password: new FormControl('', [Validators.required, Validators.minLength(8)])\n      });\n      this.login = [];\n    }\n\n    submit() {\n      var response1;\n      var body = {\n        username: this.username.value.toString(),\n        password: this.password.value.toString()\n      };\n      this.spinner.show();\n      this.http.post('http://localhost:54921/api/User/Authentiaction/', body, {\n        responseType: 'text'\n      }).subscribe(res => {\n        response1 = res;\n        const response = {\n          token: response1.toString()\n        };\n        localStorage.setItem('token', response.token);\n        let data = jwtDecode(response.token); // this.homeService.message ='You are Logged In..'\n\n        localStorage.setItem('user', JSON.stringify(Object.assign({}, data)));\n        debugger;\n\n        if (data.role == 'Admin') {\n          this.toastr.success('logged in');\n          this.router.navigate(['admin']);\n        } else if (data.role == 'Accountant') {\n          this.toastr.success('logged in');\n          this.router.navigate(['accountant']);\n        } else if (data.role == 'Trainee') {\n          this.loggedIn = true;\n          this.toastr.success('Logged in');\n          this.router.navigate(['client']);\n        } else if (data.role == 'Trainer') {\n          this.toastr.success('logged in');\n          this.router.navigate(['trainer']);\n        }\n\n        this.spinner.hide();\n        console.log(data);\n      }, err => {\n        this.spinner.hide();\n        this.toastr.error(err.status);\n      });\n    }\n\n    logout() {\n      // call api => logout\n      localStorage.clear();\n      this.loggedIn = false;\n      this.router.navigate(['auth/login']);\n    }\n\n    register() {\n      debugger;\n      const user = this.formGroup.value;\n      user.username = user.email;\n      user.roleId = 4; // debugger;\n\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'Customer/InsertTrainee', user).subscribe(res => {\n        // debugger\n        this.router.navigate(['auth/login']);\n        this.spinner.hide();\n        this.toastr.success('Created Account Successfully!');\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something wrong!, Please Try again!');\n      });\n      debugger;\n    }\n\n    ReturnLogin() {\n      this.http.get(environment.apiUrl + 'User/ReturnLogin').subscribe(res => {\n        // debugger\n        this.login = res;\n      });\n    }\n\n    checkUserName() {\n      debugger;\n      let check = this.login.find(i => i.username == this.formGroup.controls.email.value);\n\n      if (check) {\n        this.toastr.warning(\"This email is used\");\n      } else {\n        this.register();\n      }\n\n      debugger;\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.ToastrService), i0.ɵɵinject(i5.NgxSpinnerService));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}