{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-spinner\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/router\";\nexport let ExamServiceService = /*#__PURE__*/(() => {\n  class ExamServiceService {\n    constructor(http, spinner, toastr, router) {\n      this.http = http;\n      this.spinner = spinner;\n      this.toastr = toastr;\n      this.router = router;\n      this.Questions = [{}];\n      this.exam = [{}];\n      this.SelectedExamByID = [];\n    }\n\n    deleteExam(data) {\n      throw new Error('Method not implemented.');\n    }\n\n    GetExamBySection(sectionId) {\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'exam/ReturnExamBySectionId/' + sectionId, sectionId).subscribe(res => {\n        this.exam = res;\n        this.selectedSection = sectionId;\n        this.spinner.hide();\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something wrong');\n      });\n    }\n\n    CreatExam(Exam) {\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'exam/InsertExam', Exam).subscribe(res => {\n        this.reloadComponent();\n        this.GetExamBySection(this.selectedSection);\n        this.exam = res;\n        this.spinner.hide();\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something wrong');\n      });\n    }\n\n    UpdateExam(Exam) {\n      this.spinner.show();\n      this.http.put(environment.apiUrl + 'exam/UpdateExam', Exam).subscribe(res => {\n        this.reloadComponent();\n        this.GetExamBySection(this.selectedSection);\n        this.spinner.hide();\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something wrong');\n      });\n    }\n\n    InsertExamQuestion(Question) {\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'Exam/InsertExamQuestionAnswer', Question).subscribe(res => {\n        this.ReturnExamQuestion();\n        this.spinner.hide();\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something wrong');\n      });\n    }\n\n    ReturnExamQuestion() {\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'Exam/ReturnExamQuestionAnswer/' + this.currentExamId, this.currentExamId).subscribe(res => {\n        this.Questions = res;\n        this.spinner.hide();\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something wrong');\n      });\n    }\n\n    DeleteQuestion(examQuestionAnswer) {\n      this.spinner.show();\n      this.http.delete(environment.apiUrl + 'Exam/DeleteExamQuestionAnswer/' + examQuestionAnswer, examQuestionAnswer).subscribe(res => {\n        this.reloadComponent();\n        this.spinner.hide();\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something wrong');\n      });\n    }\n\n    DeleteExam(sectionId) {\n      this.spinner.show();\n      this.http.delete(environment.apiUrl + 'Exam/DeleteExam/' + sectionId, sectionId).subscribe(res => {\n        this.reloadComponent();\n        this.spinner.hide();\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something wrong');\n      });\n    }\n\n    reloadComponent() {\n      let currentUrl = this.router.url;\n\n      this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n\n      this.router.onSameUrlNavigation = 'reload';\n      this.router.navigate([currentUrl]);\n    }\n\n  }\n\n  ExamServiceService.ɵfac = function ExamServiceService_Factory(t) {\n    return new (t || ExamServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NgxSpinnerService), i0.ɵɵinject(i3.ToastrService), i0.ɵɵinject(i4.Router));\n  };\n\n  ExamServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExamServiceService,\n    factory: ExamServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return ExamServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}