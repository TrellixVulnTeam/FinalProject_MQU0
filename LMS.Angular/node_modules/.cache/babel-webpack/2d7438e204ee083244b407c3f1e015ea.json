{"ast":null,"code":"import { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { EventEmitter, Component, Inject, Output, Directive, Optional, Self, Renderer2, NgZone, ElementRef, Input, HostBinding, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldControl, MatFormField } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport { takeUntil, first } from 'rxjs/operators';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/material/dialog';\nimport * as ɵngcc2 from '@angular/material/toolbar';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/material/button';\nimport * as ɵngcc5 from '@angular/forms';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/platform';\nimport * as ɵngcc8 from '@angular/material/form-field';\nimport * as ɵngcc9 from '@angular/material/core';\n\nfunction MatTimepickerComponentDialogComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 14);\n    ɵngcc0.ɵɵlistener(\"click\", function MatTimepickerComponentDialogComponent_ng_template_0_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.cancelClickHandler();\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r1.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.cancelLabel);\n  }\n}\n\nfunction MatTimepickerComponentDialogComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 15);\n    ɵngcc0.ɵɵlistener(\"click\", function MatTimepickerComponentDialogComponent_ng_template_2_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r14);\n      const ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.okClickHandler();\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r3.invalidSelection)(\"color\", ctx_r3.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r3.okLabel);\n  }\n}\n\nfunction MatTimepickerComponentDialogComponent_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction MatTimepickerComponentDialogComponent_ng_template_16_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 4);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"select\": a0\n  };\n};\n\nfunction MatTimepickerComponentDialogComponent_ng_template_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 16);\n    ɵngcc0.ɵɵelementStart(1, \"span\", 17);\n    ɵngcc0.ɵɵlistener(\"click\", function MatTimepickerComponentDialogComponent_ng_template_18_Template_span_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.setPm();\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵpipe(3, \"uppercase\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(4, \"span\", 17);\n    ɵngcc0.ɵɵlistener(\"click\", function MatTimepickerComponentDialogComponent_ng_template_18_Template_span_click_4_listener() {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      const ctx_r17 = ɵngcc0.ɵɵnextContext();\n      return ctx_r17.setAm();\n    });\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵpipe(6, \"uppercase\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(8, _c0, ctx_r8.isPm));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(3, 4, ctx_r8.postMeridiemAbbreviation));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(10, _c0, !ctx_r8.isPm));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(6, 6, ctx_r8.anteMeridiemAbbreviation));\n  }\n}\n\nfunction MatTimepickerComponentDialogComponent_ng_container_23_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction MatTimepickerComponentDialogComponent_ng_container_24_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c1 = function (a0, a1) {\n  return {\n    label: a0,\n    $implicit: a1\n  };\n};\n\nfunction ClockComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1, \"\\u00B7\");\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction ClockComponent_ng_container_7_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1, \"\\u00B7\");\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n}\n\nconst _c2 = function (a0, a1) {\n  return {\n    \"selected\": a0,\n    \"disabled\": a1\n  };\n};\n\nfunction ClockComponent_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 8);\n    ɵngcc0.ɵɵtemplate(2, ClockComponent_ng_container_7_ng_container_2_Template, 2, 0, \"ng-container\", 6);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const digit_r4 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"transform\", \"translate(\" + digit_r4.translateX + \"px, \" + digit_r4.translateY + \"px)\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(4, _c2, ctx_r1.formattedValue === digit_r4.display || digit_r4.display === 0 && ctx_r1.formattedValue === 0, !ctx_r1.isAvailable(digit_r4.display === 60 ? 0 : digit_r4.display)));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", digit_r4.display % 5 !== 0);\n  }\n}\n\nfunction ClockComponent_ng_container_8_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const digit_r6 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵtextInterpolate(digit_r6.display);\n  }\n}\n\nfunction ClockComponent_ng_container_8_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const digit_r6 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵtextInterpolate(digit_r6.display === 60 ? \"00\" : digit_r6.display);\n  }\n}\n\nfunction ClockComponent_ng_container_8_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction ClockComponent_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 9);\n    ɵngcc0.ɵɵtemplate(2, ClockComponent_ng_container_8_ng_template_2_Template, 1, 1, \"ng-template\", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵtemplate(4, ClockComponent_ng_container_8_ng_template_4_Template, 1, 1, \"ng-template\", null, 11, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵtemplate(6, ClockComponent_ng_container_8_ng_container_6_Template, 1, 0, \"ng-container\", 12);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const digit_r6 = ctx.$implicit;\n\n    const _r7 = ɵngcc0.ɵɵreference(3);\n\n    const _r9 = ɵngcc0.ɵɵreference(5);\n\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"transform\", \"translate(\" + digit_r6.translateX + \"px, \" + digit_r6.translateY + \"px)\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(6, _c2, ctx_r2.formattedValue === digit_r6.display || digit_r6.display === 60 && ctx_r2.formattedValue === 0, !ctx_r2.isAvailable(digit_r6.display === 60 ? 0 : digit_r6.display)));\n    ɵngcc0.ɵɵadvance(5);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.viewType === \"minutes\")(\"ngIfThen\", _r9)(\"ngIfElse\", _r7);\n  }\n}\n\nfunction ClockComponent_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 13);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const digit_r14 = ctx.$implicit;\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"transform\", \"translate(\" + digit_r14.translateX + \"px, \" + digit_r14.translateY + \"px)\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(4, _c2, ctx_r3.formattedValue === digit_r14.display || digit_r14.display === 24 && ctx_r3.formattedValue === 0, !ctx_r3.isAvailable(digit_r14.display === 24 ? 0 : digit_r14.display)));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", digit_r14.display === 24 ? \"00\" : digit_r14.display, \" \");\n  }\n}\n\nconst _c3 = function (a0, a1) {\n  return {\n    \"small-pointer\": a0,\n    \"animated-pointer\": a1\n  };\n};\n\nconst _c4 = function (a0) {\n  return {\n    \"outer-dot-odd\": a0\n  };\n};\n\nfunction twoDigits(n) {\n  return n < 10 ? `0${n}` : `${n}`;\n}\n\nfunction addDays(date, days) {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\nfunction convertHoursForMode(hour, mode) {\n  const isPm = hour >= 12;\n\n  if (mode === '24h') {\n    return {\n      hour,\n      isPm\n    };\n  } else if (hour === 0 || hour === 12) {\n    return {\n      hour: 12,\n      isPm\n    };\n  } else if (hour < 12) {\n    return {\n      hour,\n      isPm\n    };\n  }\n\n  return {\n    hour: hour - 12,\n    isPm\n  };\n}\n\nfunction mod(a, b) {\n  return a - Math.floor(a / b) * b;\n}\n\nfunction getShortestAngle(from, to) {\n  const difference = to - from;\n  return from + mod(difference + 180, 360) - 180;\n}\n\nfunction isDateInRange(minDate, maxDate, current) {\n  const unixCurrentDate = +current;\n  return (!minDate || +minDate <= unixCurrentDate) && (!maxDate || unixCurrentDate <= +maxDate);\n}\n\nfunction isTimeInRange(minDate, maxDate, current) {\n  if (minDate instanceof Date) {\n    const newMinDate = new Date();\n    newMinDate.setHours(minDate.getHours());\n    newMinDate.setMinutes(minDate.getMinutes());\n    newMinDate.setSeconds(0);\n    newMinDate.setMilliseconds(0);\n    minDate = newMinDate;\n  }\n\n  if (maxDate instanceof Date) {\n    const newMaxDate = new Date();\n    newMaxDate.setHours(maxDate.getHours());\n    newMaxDate.setMinutes(maxDate.getMinutes());\n    newMaxDate.setSeconds(0);\n    newMaxDate.setMilliseconds(0);\n    maxDate = newMaxDate;\n  }\n\n  if (current instanceof Date) {\n    const newCurrent = new Date();\n    newCurrent.setHours(current.getHours());\n    newCurrent.setMinutes(current.getMinutes());\n    newCurrent.setSeconds(0);\n    newCurrent.setMilliseconds(0);\n    current = newCurrent;\n  }\n\n  const unixCurrentDate = +current;\n  return (!minDate || +minDate <= unixCurrentDate) && (!maxDate || unixCurrentDate <= +maxDate);\n} // used when generating the allowed maps\n\n\nfunction isAllowed(hour, minutes, minDate, maxDate, clockMode, selectedMeridiem) {\n  if (hour > 24 || hour < 0 || minutes > 60 || minutes < 0) {\n    return false;\n  }\n\n  if (!minDate && !maxDate) {\n    return true;\n  }\n\n  if (clockMode === '12h') {\n    if (hour === 12 && selectedMeridiem === 'AM') {\n      hour = 0;\n    }\n\n    if (hour > 12) {\n      hour -= 12;\n    }\n  }\n\n  const checkDate = new Date();\n  checkDate.setHours(hour);\n  checkDate.setMinutes(minutes);\n  checkDate.setSeconds(0);\n  checkDate.setMilliseconds(0);\n  return isDateInRange(minDate, maxDate, checkDate);\n} // used by the clock component to visually disable the not allowed values\n\n\nfunction getIsAvailabeFn(allowed12HourMap, allowed24HourMap, mode) {\n  return (value, viewType, isPm, h) => {\n    const isHourCheck = viewType === 'hours';\n    const [hour, minutes] = isHourCheck ? [value, null] : [h, value];\n\n    if (mode === '12h') {\n      if (!allowed12HourMap) {\n        return true;\n      }\n\n      const meridiem = isPm ? 'pm' : 'am';\n\n      if (isHourCheck) {\n        return !!Object.values(allowed12HourMap[meridiem][hour]).find(v => v === true);\n      }\n\n      return allowed12HourMap[meridiem][hour][minutes];\n    }\n\n    if (!allowed24HourMap) {\n      return true;\n    }\n\n    if (isHourCheck) {\n      return !!Object.values(allowed24HourMap[hour]).find(v => v === true);\n    }\n\n    return allowed24HourMap[hour][minutes];\n  };\n}\n\nlet MatTimepickerComponentDialogComponent = /*#__PURE__*/(() => {\n  class MatTimepickerComponentDialogComponent {\n    constructor(data) {\n      this.data = data;\n      this.twoDigits = twoDigits;\n      this.changeEvent = new EventEmitter();\n      this.okClickEvent = new EventEmitter();\n      this.cancelClickEvent = new EventEmitter();\n      this.allowed24HourMap = null;\n      this.allowed12HourMap = null;\n      this.invalidSelection = false;\n      this.viewType = 'hours';\n      this.isPm = false;\n      this.skipMinuteAutoSwitch = false;\n      this.autoSwitchID = null;\n      this.invalidMedianID = null;\n      this.hasInvalidMeridiem = false;\n      this.editHoursClicked = false;\n      this.isClosing = false;\n\n      this.okClickHandler = () => {\n        if (this.hasInvalidMeridiem) {\n          this.isPm = !this.isPm;\n          this.hasInvalidMeridiem = false;\n        }\n\n        this.okClickEvent.emit(this.value);\n      };\n\n      this.cancelClickHandler = () => {\n        this.cancelClickEvent.emit();\n      };\n\n      this.isPm = data.isPm;\n      this.bindData(data); // keep this always at the bottom\n\n      this.value = data.value;\n    }\n\n    set value(value) {\n      value = value || this.minDate || this.maxDate || new Date();\n      this.hours = value.getHours();\n      this.minutes = value.getMinutes();\n      this._value = value;\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    set hours(value) {\n      this._hours = value;\n      this._formattedHour = convertHoursForMode(this.hours, this.mode).hour;\n    }\n\n    get hours() {\n      return this._hours;\n    }\n\n    get formattedHours() {\n      return this._formattedHour;\n    }\n\n    bindData(data) {\n      this.mode = data.mode;\n      this.okLabel = data.okLabel;\n      this.cancelLabel = data.cancelLabel;\n      this.okButtonTemplate = data.okButtonTemplate;\n      this.cancelButtonTemplate = data.cancelButtonTemplate;\n      this.anteMeridiemAbbreviation = data.anteMeridiemAbbreviation;\n      this.postMeridiemAbbreviation = data.postMeridiemAbbreviation;\n      this.color = data.color;\n      this.minDate = data.minDate;\n      this.maxDate = data.maxDate;\n      this.allowed12HourMap = data.allowed12HourMap;\n      this.allowed24HourMap = data.allowed24HourMap;\n    }\n\n    ngDoCheck() {\n      this.bindData(this.data);\n    }\n\n    handleClockChange({\n      value,\n      type\n    }) {\n      const is24hoursAutoMeridiemChange = this.mode === '24h' && type === 'hours' && (this.hours >= 12 && value < 12 || this.hours < 12 && value >= 12);\n\n      if (this.hasInvalidMeridiem && this.mode === '12h' || is24hoursAutoMeridiemChange) {\n        this.isPm = !this.isPm;\n        this.hasInvalidMeridiem = false;\n      }\n\n      if (type && type === 'hours' || !type && this.viewType === 'hours') {\n        this.hours = value;\n      } else if (type && type === 'minutes' || !type && this.viewType === 'minutes') {\n        this.minutes = value;\n      }\n\n      const newValue = new Date();\n      const hours = this.isPm ? this.hours < 12 ? this.hours + 12 : this.hours : this.hours === 12 ? 0 : this.hours;\n      newValue.setHours(hours);\n      newValue.setMinutes(this.minutes);\n      newValue.setSeconds(0);\n      newValue.setMilliseconds(0);\n      this.value = newValue;\n      this.changeEvent.emit(newValue);\n    }\n\n    clearInvalidMeridiem() {\n      this.hasInvalidMeridiem = false;\n    }\n\n    handleUnavailableSelection() {\n      clearTimeout(this.autoSwitchID);\n    }\n\n    handleClockChangeDone(e) {\n      e.preventDefault(); // prevent mouseUp after touchEnd\n\n      if (this.viewType === 'hours' && !this.skipMinuteAutoSwitch) {\n        this.autoSwitchID = setTimeout(() => {\n          this.editMinutes();\n          this.autoSwitchID = null;\n        }, 300);\n      }\n    }\n\n    editHours() {\n      this.viewType = 'hours';\n      this.editHoursClicked = true;\n      setTimeout(() => {\n        this.editHoursClicked = false;\n      }, 0);\n    }\n\n    editMinutes() {\n      if (this.hasInvalidMeridiem) {\n        this.isPm = !this.isPm;\n        this.hasInvalidMeridiem = false;\n      }\n\n      this.viewType = 'minutes';\n    }\n\n    invalidSelectionHandler(value) {\n      this.invalidSelection = value;\n    }\n\n    invalidMeridiem() {\n      if (this.viewType !== 'minutes' && this.editHoursClicked) {\n        if (this.invalidMedianID) {\n          return;\n        }\n\n        this.invalidMedianID = setTimeout(() => {\n          this.isPm = !this.isPm;\n          this.hasInvalidMeridiem = false;\n        }, 0);\n        return;\n      }\n\n      this.hasInvalidMeridiem = true;\n    }\n\n    meridiemChange(hours) {\n      const changeData = {\n        type: this.viewType,\n        value: this.viewType === 'hours' ? hours : this.value.getMinutes()\n      };\n      this.handleClockChange(changeData);\n    }\n\n    setAm() {\n      if (this.hours >= 12) {\n        this.hours = this.hours - 12;\n      }\n\n      this.isPm = false;\n      this.meridiemChange(this.hours);\n    }\n\n    setPm() {\n      if (this.hours < 12) {\n        this.hours = this.hours + 12;\n      }\n\n      this.isPm = true;\n      this.meridiemChange(this.hours);\n    }\n\n  }\n\n  MatTimepickerComponentDialogComponent.ɵfac = function MatTimepickerComponentDialogComponent_Factory(t) {\n    return new (t || MatTimepickerComponentDialogComponent)(ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n\n  MatTimepickerComponentDialogComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatTimepickerComponentDialogComponent,\n    selectors: [[\"mat-timepicker-dialog\"]],\n    outputs: {\n      changeEvent: \"changeEvent\",\n      okClickEvent: \"okClickEvent\",\n      cancelClickEvent: \"cancelClickEvent\"\n    },\n    decls: 25,\n    vars: 33,\n    consts: [[\"defaultCancelButtonTemplate\", \"\"], [\"defaultOkButtonTemplate\", \"\"], [1, \"root\"], [1, \"header\", 3, \"color\"], [1, \"placeholder\"], [1, \"time-frame\"], [1, \"time\", \"fixed-font-size\", 3, \"ngClass\", \"click\"], [1, \"fixed-font-size\"], [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"normal\", \"\"], [\"ampm\", \"\"], [1, \"body\"], [3, \"allowed12HourMap\", \"allowed24HourMap\", \"minDate\", \"maxDate\", \"color\", \"viewType\", \"mode\", \"formattedHours\", \"minutes\", \"formattedValue\", \"isPm\", \"changeEvent\", \"unavailableSelection\", \"invalidMeridiem\", \"mouseup\", \"clearInvalidMeridiem\", \"touchend\", \"invalidSelection\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"mat-button\", \"\", 3, \"color\", \"click\"], [\"mat-button\", \"\", 3, \"disabled\", \"color\", \"click\"], [1, \"ampm\"], [1, \"time\", 3, \"ngClass\", \"click\"]],\n    template: function MatTimepickerComponentDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatTimepickerComponentDialogComponent_ng_template_0_Template, 2, 2, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(2, MatTimepickerComponentDialogComponent_ng_template_2_Template, 2, 3, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelementStart(4, \"mat-dialog-content\");\n        ɵngcc0.ɵɵelementStart(5, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(6, \"mat-toolbar\", 3);\n        ɵngcc0.ɵɵelement(7, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(8, \"div\", 5);\n        ɵngcc0.ɵɵelementStart(9, \"span\", 6);\n        ɵngcc0.ɵɵlistener(\"click\", function MatTimepickerComponentDialogComponent_Template_span_click_9_listener() {\n          return ctx.editHours();\n        });\n        ɵngcc0.ɵɵtext(10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 7);\n        ɵngcc0.ɵɵtext(12, \":\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(13, \"span\", 6);\n        ɵngcc0.ɵɵlistener(\"click\", function MatTimepickerComponentDialogComponent_Template_span_click_13_listener() {\n          return ctx.editMinutes();\n        });\n        ɵngcc0.ɵɵtext(14);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(15, MatTimepickerComponentDialogComponent_ng_container_15_Template, 1, 0, \"ng-container\", 8);\n        ɵngcc0.ɵɵtemplate(16, MatTimepickerComponentDialogComponent_ng_template_16_Template, 1, 0, \"ng-template\", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(18, MatTimepickerComponentDialogComponent_ng_template_18_Template, 7, 12, \"ng-template\", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(20, \"div\", 11);\n        ɵngcc0.ɵɵelementStart(21, \"mat-clock\", 12);\n        ɵngcc0.ɵɵlistener(\"changeEvent\", function MatTimepickerComponentDialogComponent_Template_mat_clock_changeEvent_21_listener($event) {\n          return ctx.handleClockChange($event);\n        })(\"unavailableSelection\", function MatTimepickerComponentDialogComponent_Template_mat_clock_unavailableSelection_21_listener() {\n          return ctx.handleUnavailableSelection();\n        })(\"invalidMeridiem\", function MatTimepickerComponentDialogComponent_Template_mat_clock_invalidMeridiem_21_listener() {\n          return ctx.invalidMeridiem();\n        })(\"mouseup\", function MatTimepickerComponentDialogComponent_Template_mat_clock_mouseup_21_listener($event) {\n          return ctx.handleClockChangeDone($event);\n        })(\"clearInvalidMeridiem\", function MatTimepickerComponentDialogComponent_Template_mat_clock_clearInvalidMeridiem_21_listener() {\n          return ctx.clearInvalidMeridiem();\n        })(\"touchend\", function MatTimepickerComponentDialogComponent_Template_mat_clock_touchend_21_listener($event) {\n          return ctx.handleClockChangeDone($event);\n        })(\"invalidSelection\", function MatTimepickerComponentDialogComponent_Template_mat_clock_invalidSelection_21_listener($event) {\n          return ctx.invalidSelectionHandler($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(22, \"mat-dialog-actions\");\n        ɵngcc0.ɵɵtemplate(23, MatTimepickerComponentDialogComponent_ng_container_23_Template, 1, 0, \"ng-container\", 13);\n        ɵngcc0.ɵɵtemplate(24, MatTimepickerComponentDialogComponent_ng_container_24_Template, 1, 0, \"ng-container\", 13);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n\n        const _r2 = ɵngcc0.ɵɵreference(3);\n\n        const _r5 = ɵngcc0.ɵɵreference(17);\n\n        const _r7 = ɵngcc0.ɵɵreference(19);\n\n        ɵngcc0.ɵɵadvance(6);\n        ɵngcc0.ɵɵproperty(\"color\", ctx.color);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(23, _c0, ctx.viewType === \"hours\" && \"active\"));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.twoDigits(ctx.formattedHours), \" \");\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(25, _c0, ctx.viewType === \"minutes\" && \"active\"));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.twoDigits(ctx.minutes), \" \");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.mode === \"12h\")(\"ngIfThen\", _r7)(\"ngIfElse\", _r5);\n        ɵngcc0.ɵɵadvance(6);\n        ɵngcc0.ɵɵproperty(\"allowed12HourMap\", ctx.allowed12HourMap)(\"allowed24HourMap\", ctx.allowed24HourMap)(\"minDate\", ctx.minDate)(\"maxDate\", ctx.maxDate)(\"color\", ctx.color)(\"viewType\", ctx.viewType)(\"mode\", ctx.mode)(\"formattedHours\", ctx.formattedHours)(\"minutes\", ctx.minutes)(\"formattedValue\", ctx.viewType === \"minutes\" ? ctx.minutes : ctx.formattedHours)(\"isPm\", ctx.isPm);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.cancelButtonTemplate || _r0)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(27, _c1, ctx.cancelLabel, ctx.cancelClickHandler));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.okButtonTemplate || _r2)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(30, _c1, ctx.okLabel, ctx.okClickHandler));\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.MatDialogContent, ɵngcc2.MatToolbar, ɵngcc3.NgClass, ɵngcc3.NgIf, ClockComponent, ɵngcc1.MatDialogActions, ɵngcc3.NgTemplateOutlet, ɵngcc4.MatButton];\n    },\n    pipes: function () {\n      return [ɵngcc3.UpperCasePipe];\n    },\n    styles: [\"mat-dialog-content[_ngcontent-%COMP%]{margin-top:-24px;min-height:395px;overflow:hidden;padding:0}mat-dialog-actions[_ngcontent-%COMP%]{justify-content:flex-end;margin-left:-8px;margin-right:-8px}.root[_ngcontent-%COMP%]{min-width:282px}.header[_ngcontent-%COMP%]{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;align-items:center;border-top-left-radius:2px;border-top-right-radius:2px;display:flex;height:98px;justify-content:center;line-height:58px;padding:20px 0;user-select:none}.header[_ngcontent-%COMP%], .header[_ngcontent-%COMP%]   .fixed-font-size[_ngcontent-%COMP%]{font-size:58px}.header[_ngcontent-%COMP%]   .time-frame[_ngcontent-%COMP%]{height:60px}.time[_ngcontent-%COMP%]{cursor:pointer;transition:all .2s ease-out}.time[_ngcontent-%COMP%]:not(.select){opacity:.6}.placeholder[_ngcontent-%COMP%]{flex:1}.ampm[_ngcontent-%COMP%]{display:flex;flex:1;flex-direction:column-reverse;font-size:14px;font-weight:700px;line-height:20px;margin-left:16px}.select[_ngcontent-%COMP%]{color:#fff}.body[_ngcontent-%COMP%]{display:flex;justify-content:center;padding:24px 16px 20px}\"]\n  });\n  return MatTimepickerComponentDialogComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MatTimepickerDirective = /*#__PURE__*/(() => {\n  class MatTimepickerDirective {\n    constructor(ngControl, dialog, renderer, zone, fm, elRef, ngZone, // tslint:disable-next-line:variable-name\n    _platform, // tslint:disable-next-line:variable-name\n    _parentForm, // tslint:disable-next-line:variable-name\n    _matFormFiled, // tslint:disable-next-line:variable-name\n    _parentFormGroup, // tslint:disable-next-line:variable-name\n    _defaultErrorStateMatcher) {\n      this.ngControl = ngControl;\n      this.dialog = dialog;\n      this.renderer = renderer;\n      this.zone = zone;\n      this.fm = fm;\n      this.elRef = elRef;\n      this.ngZone = ngZone;\n      this._platform = _platform;\n      this._parentForm = _parentForm;\n      this._matFormFiled = _matFormFiled;\n      this._parentFormGroup = _parentFormGroup; // tslint:disable-next-line:variable-name\n\n      this._errorState = false; // tslint:disable-next-line:variable-name\n\n      this._disabled = false; // tslint:disable-next-line:variable-name\n\n      this._readonly = false;\n      this.isAlive = new Subject();\n      this.stateChanges = new Subject(); // tslint:disable-next-line:variable-name\n\n      this._uid = `mat-time-picker-${MatTimepickerDirective.nextId++}`;\n      this.describedBy = ''; // tslint:disable-next-line:variable-name\n\n      this._required = false;\n      this.focused = false;\n      this.allowed24HourMap = null;\n      this.allowed12HourMap = null;\n      this.isInputFocused = false;\n      /* Use a custom template for the ok button */\n\n      this.okButtonTemplate = null;\n      /* Use a custom template for the cancel button */\n\n      this.cancelButtonTemplate = null;\n      /** Override the label of the ok button. */\n\n      this.okLabel = 'Ok';\n      /** Override the label of the cancel button. */\n\n      this.cancelLabel = 'Cancel';\n      /** Override the ante meridiem abbreviation. */\n\n      this.anteMeridiemAbbreviation = 'am';\n      /** Override the post meridiem abbreviation. */\n\n      this.postMeridiemAbbreviation = 'pm';\n      /** Sets the clock mode, 12-hour or 24-hour clocks are supported. */\n\n      this.mode = '24h';\n      this.color = 'primary';\n      this.disableDialogOpenOnClick = false;\n      this.strict = true;\n      this.controlType = 'angular-material-timepicker';\n      this.listeners = []; // tslint:disable-next-line:variable-name\n\n      this._skipValueChangeEmission = true;\n      this.combination = [];\n      this.timeChange = new EventEmitter();\n      this.invalidInput = new EventEmitter();\n\n      this.clickHandler = e => {\n        if (this.modalRef && this.modalRef.componentInstance.isClosing || this.disabled || this.disableDialogOpenOnClick) {\n          return;\n        }\n\n        if (!this.modalRef && !this.disableDialogOpenOnClick) {\n          this.showDialog();\n        }\n      };\n\n      this.handleChange = newValue => {\n        if (!(newValue instanceof Date)) {\n          return;\n        }\n\n        const v = this.value instanceof Date ? new Date(this.value.getTime()) : new Date();\n        v.setHours(newValue.getHours());\n        v.setMinutes(newValue.getMinutes());\n        v.setSeconds(0);\n        v.setMilliseconds(0);\n        this.currentValue = v;\n      };\n\n      this.handleOk = value => {\n        if (!this.currentValue && value) {\n          this.currentValue = value;\n        }\n\n        if (this.onChangeFn) {\n          this.onChangeFn(this.currentValue);\n        }\n\n        this.value = this.currentValue;\n        this.modalRef.close();\n      };\n\n      this.handleCancel = () => {\n        this.modalRef.close();\n      };\n\n      this.id = this.id;\n      this.errorStateMatcher = _defaultErrorStateMatcher;\n\n      if (this.ngControl != null) {\n        this.ngControl.valueAccessor = this;\n      }\n\n      if (_platform.IOS) {\n        ngZone.runOutsideAngular(() => {\n          elRef.nativeElement.addEventListener('keyup', event => {\n            const el = event.target;\n\n            if (!el.value && !el.selectionStart && !el.selectionEnd) {\n              // Note: Just setting `0, 0` doesn't fix the issue. Setting\n              // `1, 1` fixes it for the first time that you type text and\n              // then hold delete. Toggling to `1, 1` and then back to\n              // `0, 0` seems to completely fix it.\n              el.setSelectionRange(1, 1);\n              el.setSelectionRange(0, 0);\n            }\n          });\n        });\n      }\n\n      this._isServer = !this._platform.isBrowser;\n    }\n\n    get errorState() {\n      const oldState = this._errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const control = this.ngControl ? this.ngControl.control : null;\n      const newState = this.errorStateMatcher ? this.errorStateMatcher.isErrorState(control, parent) : oldState;\n\n      if (newState !== oldState) {\n        this._errorState = newState;\n        this.stateChanges.next();\n      }\n\n      return newState;\n    }\n\n    get disabled() {\n      if (this.ngControl && this.ngControl.disabled !== null) {\n        return this.ngControl.disabled;\n      }\n\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value); // Browsers may not fire the blur event if the input is disabled too quickly.\n      // Reset from here to ensure that the element doesn't become stuck.\n\n      if (this.focused) {\n        this.focused = false;\n        this.stateChanges.next();\n      }\n    }\n\n    get id() {\n      return this._id;\n    }\n\n    set id(value) {\n      this._id = value || this._uid;\n    }\n\n    get readonly() {\n      return this._readonly;\n    }\n\n    set readonly(value) {\n      this._readonly = coerceBooleanProperty(value);\n    }\n\n    get shouldLabelFloat() {\n      return this.focused || !this.empty;\n    }\n\n    get required() {\n      return this._required;\n    }\n\n    set required(req) {\n      this._required = coerceBooleanProperty(req);\n      this.stateChanges.next();\n    }\n\n    get placeholder() {\n      return this._placeholder;\n    }\n\n    set placeholder(plh) {\n      this._placeholder = plh;\n      this.stateChanges.next();\n    }\n\n    set value(value) {\n      if (value === this._value) {\n        return;\n      }\n\n      this._value = value;\n\n      if (!value) {\n        this._formattedValueString = null;\n        this.setInputElementValue('');\n        this.currentValue = value;\n        return;\n      }\n\n      const {\n        hour,\n        isPm\n      } = convertHoursForMode(value.getHours(), this.mode);\n      this._isPm = isPm;\n      this._formattedValueString = this.mode === '12h' ? `${hour}:${twoDigits(value.getMinutes())} ${isPm ? this.postMeridiemAbbreviation : this.anteMeridiemAbbreviation}` : `${twoDigits(value.getHours())}:${twoDigits(value.getMinutes())}`;\n\n      if (!this.isInputFocused) {\n        this.setInputElementValue(this.formattedValueString);\n      }\n\n      this.currentValue = value;\n      this.stateChanges.next();\n\n      if (this._skipValueChangeEmission) {\n        return;\n      }\n\n      this.timeChange.emit(this.currentValue);\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    get isPm() {\n      return this._isPm;\n    }\n\n    get empty() {\n      return !(this.currentValue instanceof Date);\n    }\n\n    get formattedValueString() {\n      return this._formattedValueString;\n    }\n\n    inputHandler() {\n      let value = this.elRef.nativeElement.value;\n      const length = value.length;\n\n      if (length === 0) {\n        this.writeValue(null, true);\n\n        if (this.onChangeFn) {\n          this.onChangeFn(null);\n        }\n\n        return;\n      }\n\n      const meridiemResult = value.match(/am|pm/i);\n      let meridiem = null;\n\n      if (meridiemResult) {\n        value = value.replace(meridiemResult[0], '');\n        [meridiem] = meridiemResult;\n      }\n\n      const valueHasColumn = value.includes(':');\n      let [hours, minutes] = length === 1 ? [value, 0] : length === 2 && !valueHasColumn ? [value, 0] : valueHasColumn ? value.split(':') : value.split(/(\\d\\d)/).filter(v => v);\n      hours = +hours;\n\n      if (/\\s/.test(minutes)) {\n        let other;\n        [minutes, other] = minutes.split(/\\s/);\n\n        if (other === 'pm' && !isNaN(hours) && hours < 12) {\n          hours += 12;\n        }\n      }\n\n      minutes = +minutes;\n\n      if (isNaN(hours) || isNaN(minutes)) {\n        this.writeValue(null, true);\n        return;\n      }\n\n      if (hours < 12 && meridiem && meridiem.toLowerCase() === 'pm') {\n        hours += 12;\n      } else if (hours >= 12 && meridiem && meridiem.toLowerCase() === 'am') {\n        hours -= 12;\n      }\n\n      if (this.mode === '12h' && +hours < 0) {\n        hours = '0';\n      } else {\n        if (+hours > 24) {\n          hours = '24';\n        } else if (+hours < 0) {\n          hours = '0';\n        }\n      }\n\n      if (+minutes > 59) {\n        minutes = '59';\n      } else if (+minutes < 0) {\n        minutes = '0';\n      }\n\n      const d = this.value ? new Date(this.value.getTime()) : new Date();\n      d.setHours(+hours);\n      d.setMinutes(+minutes);\n      d.setSeconds(0);\n      d.setMilliseconds(0);\n      const isValueInRange = isDateInRange(this.minDate, this.maxDate, d);\n\n      if (!isValueInRange) {\n        this.invalidInput.emit();\n      }\n\n      this.writeValue(d, true);\n\n      if (this.onChangeFn) {\n        this.onChangeFn(d);\n      }\n    }\n\n    keydownHandler(event) {\n      if (event.metaKey || event.ctrlKey || event.altKey) {\n        this.combination = this.combination.concat(event.code);\n        return;\n      }\n\n      if (!/^[0-9a-zA-Z\\s]{0,1}$/.test(event.key)) {\n        return;\n      }\n\n      const target = event.target;\n      const tValue = target.value;\n      const value = `${tValue.slice(0, target.selectionStart)}${event.key}${tValue.slice(target.selectionEnd)}`;\n\n      if (value.match(this.pattern) || this.combination.length > 0) {\n        return true;\n      }\n\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n\n    keyupHandler(event) {\n      this.combination = this.combination.filter(v => v !== event.code);\n    }\n\n    focusHandler() {\n      this.isInputFocused = true;\n    }\n\n    focusoutHandler() {\n      this.isInputFocused = false;\n      this.setInputElementValue(this.formattedValueString);\n\n      if (this.onTouchedFn && !this.modalRef) {\n        this.onTouchedFn();\n      }\n    }\n\n    setDescribedByIds(ids) {\n      this.describedBy = ids.join(' ');\n    }\n\n    onContainerClick(event) {\n      if (event.target.tagName.toLowerCase() !== 'input') {\n        this.elRef.nativeElement.focus();\n      }\n    }\n\n    setInputElementValue(value) {\n      if (value === null || value === undefined) {\n        value = '';\n      }\n\n      Promise.resolve().then(() => {\n        this.zone.runOutsideAngular(() => {\n          this.renderer.setProperty(this.elRef.nativeElement, 'value', value);\n        });\n      });\n    }\n\n    validate() {\n      if (this.currentValue === null || this.currentValue === undefined) {\n        return null;\n      }\n\n      const isValueInRange = this.strict ? isDateInRange(this.minDate, this.maxDate, this.currentValue) : isTimeInRange(this.minDate, this.maxDate, this.currentValue);\n      return isValueInRange ? null : {\n        dateRange: true\n      };\n    }\n\n    ngAfterViewInit() {\n      this.listeners.push(this.renderer.listen(this._matFormFiled ? this._matFormFiled._elementRef.nativeElement : this.elRef.nativeElement, 'click', this.clickHandler));\n    }\n\n    ngOnInit() {\n      if (this._platform.isBrowser) {\n        this.fm.monitor(this.elRef.nativeElement, true).subscribe(origin => {\n          this.focused = !!origin;\n          this.stateChanges.next();\n        });\n      }\n\n      const hasMaxDate = !!this.maxDate;\n      const hasMinDate = !!this.minDate;\n\n      if (hasMinDate || hasMaxDate) {\n        if (hasMinDate) {\n          this.minDate.setSeconds(0);\n          this.minDate.setMilliseconds(0);\n        }\n\n        if (hasMaxDate) {\n          this.maxDate.setSeconds(0);\n          this.maxDate.setMilliseconds(0);\n        }\n\n        Promise.resolve().then(() => this.generateAllowedMap());\n\n        if (!this.ngControl._rawValidators.find(v => v === this)) {\n          this.ngControl.control.setValidators(this.ngControl._rawValidators.concat(this));\n          this.ngControl.control.updateValueAndValidity();\n        }\n      }\n\n      this._skipValueChangeEmission = false;\n    }\n\n    generateAllowedMap() {\n      const isStrictMode = this.strict && this.value instanceof Date;\n\n      if (this.mode === '24h') {\n        this.allowed24HourMap = {};\n\n        for (let h = 0; h < 24; h++) {\n          for (let m = 0; m < 60; m++) {\n            const hourMap = this.allowed24HourMap[h] || {};\n\n            if (isStrictMode) {\n              const currentDate = new Date(this.value.getTime());\n              currentDate.setHours(h);\n              currentDate.setMinutes(m);\n              currentDate.setSeconds(0);\n              currentDate.setMilliseconds(0);\n              hourMap[m] = isDateInRange(this.minDate, this.maxDate, currentDate);\n            } else {\n              hourMap[m] = isAllowed(h, m, this.minDate, this.maxDate, '24h');\n            }\n\n            this.allowed24HourMap[h] = hourMap;\n          }\n        }\n      } else {\n        this.allowed12HourMap = {\n          am: {},\n          pm: {}\n        };\n\n        for (let h = 0; h < 24; h++) {\n          const meridiem = h < 12 ? 'am' : 'pm';\n\n          for (let m = 0; m < 60; m++) {\n            const hour = h > 12 ? h - 12 : h === 0 ? 12 : h;\n            const hourMap = this.allowed12HourMap[meridiem][hour] || {};\n\n            if (isStrictMode) {\n              const currentDate = new Date(this.value.getTime());\n              currentDate.setHours(h);\n              currentDate.setMinutes(m);\n              currentDate.setSeconds(0);\n              currentDate.setMilliseconds(0);\n              hourMap[m] = isDateInRange(this.minDate, this.maxDate, currentDate);\n            } else {\n              hourMap[m] = isAllowed(h, m, this.minDate, this.maxDate, '24h');\n            }\n\n            this.allowed12HourMap[meridiem][hour] = hourMap;\n          }\n        }\n      }\n    }\n\n    ngOnChanges(simpleChanges) {\n      this.pattern = this.mode === '24h' ? /^[0-9]{1,2}:?([0-9]{1,2})?$/ : /^[0-9]{1,2}:?([0-9]{1,2})?\\s?(a|p)?m?$/;\n\n      if (simpleChanges.minDate && !simpleChanges.minDate.isFirstChange() && +simpleChanges.minDate.currentValue !== simpleChanges.minDate.previousValue || simpleChanges.maxDate && !simpleChanges.maxDate.isFirstChange() && +simpleChanges.maxDate.currentValue !== simpleChanges.maxDate.previousValue || simpleChanges.disableLimitBase && !simpleChanges.disableLimitBase.isFirstChange() && +simpleChanges.disableLimitBase.currentValue !== simpleChanges.disableLimitBase.previousValue) {\n        this.generateAllowedMap();\n        this.ngControl.control.updateValueAndValidity();\n      }\n\n      if (!this.modalRef || !this.modalRef.componentInstance) {\n        return;\n      }\n\n      this.modalRef.componentInstance.data = {\n        mode: this.mode,\n        value: this.currentValue,\n        okLabel: this.okLabel,\n        cancelLabel: this.cancelLabel,\n        okButtonTemplate: this.okButtonTemplate,\n        cancelButtonTemplate: this.cancelButtonTemplate,\n        anteMeridiemAbbreviation: this.anteMeridiemAbbreviation,\n        postMeridiemAbbreviation: this.postMeridiemAbbreviation,\n        color: this.color,\n        isPm: this.isPm,\n        minDate: this.minDate,\n        maxDate: this.maxDate,\n        allowed12HourMap: this.allowed12HourMap,\n        allowed24HourMap: this.allowed24HourMap\n      };\n    }\n\n    checkValidity(value) {\n      if (!value) {\n        return false;\n      }\n\n      const hour = value.getHours();\n      const minutes = value.getMinutes();\n      const meridiem = this.isPm ? 'PM' : 'AM';\n      return isAllowed(hour, minutes, this.minDate, this.maxDate, this.mode, meridiem);\n    }\n\n    writeValue(value, isInnerCall = false) {\n      if (!isInnerCall) {\n        this._skipValueChangeEmission = true;\n        Promise.resolve().then(() => this._skipValueChangeEmission = false);\n      }\n\n      if (value) {\n        value.setSeconds(0);\n        value.setMilliseconds(0);\n      }\n\n      if (+this.value !== +value) {\n        this.value = value;\n      }\n    }\n\n    registerOnChange(fn) {\n      this.onChangeFn = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouchedFn = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n    showDialog() {\n      if (this.disabled) {\n        return;\n      }\n\n      this.isInputFocused = false;\n      this.modalRef = this.dialog.open(MatTimepickerComponentDialogComponent, {\n        autoFocus: false,\n        data: {\n          mode: this.mode,\n          value: this.currentValue,\n          okLabel: this.okLabel,\n          cancelLabel: this.cancelLabel,\n          okButtonTemplate: this.okButtonTemplate,\n          cancelButtonTemplate: this.cancelButtonTemplate,\n          anteMeridiemAbbreviation: this.anteMeridiemAbbreviation,\n          postMeridiemAbbreviation: this.postMeridiemAbbreviation,\n          color: this.color,\n          isPm: this.isPm,\n          minDate: this.minDate,\n          maxDate: this.maxDate,\n          allowed12HourMap: this.allowed12HourMap,\n          allowed24HourMap: this.allowed24HourMap\n        }\n      });\n      const instance = this.modalRef.componentInstance;\n      instance.changeEvent.pipe(takeUntil(this.isAlive)).subscribe(this.handleChange);\n      instance.okClickEvent.pipe(takeUntil(this.isAlive)).subscribe(this.handleOk);\n      instance.cancelClickEvent.pipe(takeUntil(this.isAlive)).subscribe(this.handleCancel);\n      this.modalRef.beforeClosed().pipe(first()).subscribe(() => instance.isClosing = true);\n      this.modalRef.afterClosed().pipe(first()).subscribe(() => {\n        if (this.onTouchedFn) {\n          this.onTouchedFn();\n        }\n\n        this.modalRef = null;\n        this.elRef.nativeElement.focus();\n      });\n      this.currentValue = this.value;\n    }\n\n    ngOnDestroy() {\n      this.isAlive.next();\n      this.isAlive.complete();\n      this.stateChanges.complete();\n\n      if (this._platform.isBrowser) {\n        this.fm.stopMonitoring(this.elRef.nativeElement);\n      }\n\n      this.listeners.forEach(l => l());\n    }\n\n  }\n\n  MatTimepickerDirective.ɵfac = function MatTimepickerDirective_Factory(t) {\n    return new (t || MatTimepickerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.MatFormField, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.ErrorStateMatcher));\n  };\n\n  MatTimepickerDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTimepickerDirective,\n    selectors: [[\"input\", \"matTimepicker\", \"\"]],\n    hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"],\n    hostVars: 12,\n    hostBindings: function MatTimepickerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function MatTimepickerDirective_input_HostBindingHandler() {\n          return ctx.inputHandler();\n        })(\"keydown\", function MatTimepickerDirective_keydown_HostBindingHandler($event) {\n          return ctx.keydownHandler($event);\n        })(\"keyup\", function MatTimepickerDirective_keyup_HostBindingHandler($event) {\n          return ctx.keyupHandler($event);\n        })(\"focus\", function MatTimepickerDirective_focus_HostBindingHandler() {\n          return ctx.focusHandler();\n        })(\"focusout\", function MatTimepickerDirective_focusout_HostBindingHandler() {\n          return ctx.focusoutHandler();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString())(\"aria-describedby\", ctx.describedBy);\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer)(\"floating\", ctx.shouldLabelFloat);\n      }\n    },\n    inputs: {\n      okButtonTemplate: \"okButtonTemplate\",\n      cancelButtonTemplate: \"cancelButtonTemplate\",\n      okLabel: \"okLabel\",\n      cancelLabel: \"cancelLabel\",\n      anteMeridiemAbbreviation: \"anteMeridiemAbbreviation\",\n      postMeridiemAbbreviation: \"postMeridiemAbbreviation\",\n      mode: \"mode\",\n      color: \"color\",\n      disableDialogOpenOnClick: \"disableDialogOpenOnClick\",\n      strict: \"strict\",\n      value: \"value\",\n      id: \"id\",\n      errorStateMatcher: \"errorStateMatcher\",\n      disabled: \"disabled\",\n      readonly: \"readonly\",\n      required: \"required\",\n      placeholder: \"placeholder\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\"\n    },\n    outputs: {\n      timeChange: \"timeChange\",\n      invalidInput: \"invalidInput\"\n    },\n    exportAs: [\"matTimepicker\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatTimepickerDirective\n    }]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  MatTimepickerDirective.nextId = 0;\n  return MatTimepickerDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ClockComponent = /*#__PURE__*/(() => {\n  class ClockComponent {\n    constructor() {\n      this.color = 'primary';\n      this.changeEvent = new EventEmitter();\n      this.unavailableSelection = new EventEmitter();\n      this.invalidMeridiem = new EventEmitter();\n      this.invalidSelection = new EventEmitter();\n      this.clearInvalidMeridiem = new EventEmitter();\n      this.allowed12HourMap = null;\n      this.allowed24HourMap = null;\n      this.isFormattedValueAllowed = true;\n      this.meridiem = null;\n      this.touching = false;\n      this.numbers = [];\n      this.secondaryNumbers = [];\n      this.minuteDots = [];\n      this.invalidMeridiemEmitted = true;\n\n      this.handleTouchMove = e => {\n        e.preventDefault(); // prevent scrolling behind the clock on iOS\n\n        const rect = e.target.getBoundingClientRect();\n        this.movePointer(e.changedTouches[0].clientX - rect.left, e.changedTouches[0].clientY - rect.top);\n      };\n    }\n\n    initIsAllowedFn() {\n      if (!this.allowed12HourMap && !this.allowed24HourMap) {\n        return;\n      }\n\n      this.isAvailableFn = getIsAvailabeFn(this.allowed12HourMap, this.allowed24HourMap, this.mode);\n    }\n\n    isAvailable(value) {\n      return this.isAvailableFn ? this.isAvailableFn(value, this.viewType, this.isPm, this.formattedHours) : true;\n    }\n\n    ngOnChanges(simpleChanges) {\n      if (simpleChanges.allowed12HourMap || simpleChanges.allowed24HourMap || simpleChanges.mode && !simpleChanges.mode.firstChange) {\n        this.initIsAllowedFn();\n      }\n\n      this.calculateAngule();\n      this.setNumbers();\n      this.meridiem = this.isPm ? 'PM' : 'AM';\n\n      if (simpleChanges.formattedValue && (this.allowed12HourMap || this.allowed24HourMap)) {\n        this.isFormattedValueAllowed = this.isAvailable(this.formattedValue);\n      }\n\n      const isSelectedTimeAvailable = this.isAvailableFn ? // when calling isAvailableFn here we should always set the viewType to minutes because we want to check the hours and the minutes\n      this.isAvailableFn(this.minutes, 'minutes', this.isPm, this.formattedHours) : true; // if (this.mode === '24h' && this.viewType === 'minutes' && this.isAvailableFn) {\n      //   const areMinitesAvailable = this.isAvailableFn(this.minutes, 'minutes', this.isPm, this.formattedHours);\n      //   if (!areMinitesAvailable) {\n      //     if (this.minDate && this.minDate.getMinutes() > this.minutes) {\n      //       setTimeout(() => { this.changeEvent.emit({ value: this.minDate.getMinutes(), type: 'minutes' }); });\n      //     } else {\n      //       setTimeout(() => { this.changeEvent.emit({ value: this.maxDate.getMinutes(), type: 'minutes' }); });\n      //     }\n      //   }\n      // }\n\n      if (isSelectedTimeAvailable && this.invalidMeridiemEmitted) {\n        this.clearInvalidMeridiem.emit();\n        this.invalidMeridiemEmitted = false;\n      }\n\n      this.invalidSelection.emit(!isSelectedTimeAvailable);\n    }\n\n    calculateAngule() {\n      this.angle = this.getPointerAngle(this.formattedValue, this.viewType);\n    }\n\n    setNumbers() {\n      if (this.viewType === 'hours') {\n        if (this.mode === '12h') {\n          const meridiem = this.isPm ? 'pm' : 'am';\n          const isAllowedFn = this.allowed12HourMap ? num => this.allowed12HourMap[meridiem][num + 1][0] : undefined;\n          this.numbers = this.getNumbers(12, {\n            size: 256\n          }, isAllowedFn);\n          this.secondaryNumbers = [];\n          this.minuteDots = [];\n        } else if (this.mode === '24h') {\n          const isAllowedFn = this.allowed24HourMap ? num => this.allowed24HourMap[num][0] : undefined;\n          this.numbers = this.getNumbers(12, {\n            size: 256\n          }, isAllowedFn);\n          this.secondaryNumbers = this.getNumbers(12, {\n            size: 256 - 64,\n            start: 13\n          }, isAllowedFn);\n          this.minuteDots = [];\n        }\n      } else {\n        const meridiem = this.isPm ? 'pm' : 'am';\n        const isAllowedFn = !!this.allowed12HourMap ? num => this.allowed12HourMap[meridiem][this.formattedHours][num] : !!this.allowed24HourMap ? num => this.allowed24HourMap[this.formattedHours][num] : undefined;\n        this.numbers = this.getNumbers(12, {\n          size: 256,\n          start: 5,\n          step: 5\n        }, isAllowedFn);\n        this.minuteDots = this.getNumbers(60, {\n          size: 256,\n          start: 13\n        }).map(digit => {\n          if (digit.display <= 59) {\n            digit.allowed = isAllowedFn ? isAllowedFn(digit.display) : true;\n            return digit;\n          }\n\n          digit.display = digit.display - 60;\n          digit.allowed = isAllowedFn ? isAllowedFn(digit.display) : true;\n          return digit;\n        });\n        this.secondaryNumbers = [];\n      }\n    }\n\n    disableAnimatedPointer() {\n      this.touching = true;\n    }\n\n    enableAnimatedPointer() {\n      this.touching = false;\n    }\n\n    handleTouchEnd(e) {\n      this.handleTouchMove(e);\n      this.enableAnimatedPointer();\n    }\n\n    handleMouseMove(e) {\n      // MouseEvent.which is deprecated, but MouseEvent.buttons is not supported in Safari\n      if ((e.buttons === 1 || e.which === 1) && this.touching) {\n        const rect = e.target.getBoundingClientRect();\n        this.movePointer(e.clientX - rect.left, e.clientY - rect.top);\n      }\n    }\n\n    handleClick(e) {\n      const rect = e.target.getBoundingClientRect();\n      this.movePointer(e.clientX - rect.left, e.clientY - rect.top);\n    }\n\n    movePointer(x, y) {\n      const value = this.getPointerValue(x, y, 256);\n\n      if (!this.isAvailable(value)) {\n        this.unavailableSelection.emit();\n        return;\n      }\n\n      if (value !== this.formattedValue) {\n        this.changeEvent.emit({\n          value,\n          type: this.viewType\n        });\n\n        if (this.viewType !== 'minutes') {\n          if (!this.isAvailable(value)) {\n            if (this.minDate && this.isAvailable(value)) {\n              this.changeEvent.emit({\n                value: this.minDate.getMinutes(),\n                type: 'minutes'\n              });\n            } else if (this.maxDate && this.isAvailable(value)) {\n              this.changeEvent.emit({\n                value: this.maxDate.getMinutes(),\n                type: 'minutes'\n              });\n            }\n          }\n        }\n      }\n    }\n\n    getNumbers(count, {\n      size,\n      start = 1,\n      step = 1\n    }, isAllowedFn) {\n      return Array.apply(null, Array(count)).map((_, i) => ({\n        display: i * step + start,\n        translateX: (size / 2 - 20) * Math.cos(2 * Math.PI * (i - 2) / count),\n        translateY: (size / 2 - 20) * Math.sin(2 * Math.PI * (i - 2) / count),\n        allowed: isAllowedFn ? isAllowedFn(i) : true\n      }));\n    }\n\n    getPointerAngle(value, mode) {\n      if (this.viewType === 'hours') {\n        return this.mode === '12h' ? 360 / 12 * (value - 3) : 360 / 12 * (value % 12 - 3);\n      }\n\n      return 360 / 60 * (value - 15);\n    }\n\n    getPointerValue(x, y, size) {\n      let value;\n      let angle = Math.atan2(size / 2 - x, size / 2 - y) / Math.PI * 180;\n\n      if (angle < 0) {\n        angle = 360 + angle;\n      }\n\n      if (this.viewType === 'hours') {\n        if (this.mode === '12h') {\n          value = 12 - Math.round(angle * 12 / 360);\n          return value === 0 ? 12 : value;\n        }\n\n        const radius = Math.sqrt(Math.pow(size / 2 - x, 2) + Math.pow(size / 2 - y, 2));\n        value = 12 - Math.round(angle * 12 / 360);\n\n        if (value === 0) {\n          value = 12;\n        }\n\n        if (radius < size / 2 - 32) {\n          value = value === 12 ? 0 : value + 12;\n        }\n\n        return value;\n      }\n\n      value = Math.round(60 - 60 * angle / 360);\n      return value === 60 ? 0 : value;\n    }\n\n  }\n\n  ClockComponent.ɵfac = function ClockComponent_Factory(t) {\n    return new (t || ClockComponent)();\n  };\n\n  ClockComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClockComponent,\n    selectors: [[\"mat-clock\"]],\n    inputs: {\n      color: \"color\",\n      allowed12HourMap: \"allowed12HourMap\",\n      allowed24HourMap: \"allowed24HourMap\",\n      mode: \"mode\",\n      viewType: \"viewType\",\n      formattedValue: \"formattedValue\",\n      minDate: \"minDate\",\n      maxDate: \"maxDate\",\n      isPm: \"isPm\",\n      formattedHours: \"formattedHours\",\n      minutes: \"minutes\"\n    },\n    outputs: {\n      changeEvent: \"changeEvent\",\n      unavailableSelection: \"unavailableSelection\",\n      invalidMeridiem: \"invalidMeridiem\",\n      invalidSelection: \"invalidSelection\",\n      clearInvalidMeridiem: \"clearInvalidMeridiem\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 10,\n    vars: 16,\n    consts: [[1, \"root\"], [1, \"circle\", 3, \"touchmove\", \"mousemove\", \"touchstart\", \"mousedown\", \"touchend\", \"mouseup\", \"click\"], [1, \"pointer-container\", 3, \"ngClass\"], [\"mat-mini-fab\", \"\", 1, \"inner-dot\", 3, \"color\"], [1, \"pointer\", 3, \"color\"], [\"mat-mini-fab\", \"\", 1, \"outer-dot\", 3, \"color\", \"ngClass\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"number\", \"minute-dot\", 3, \"ngClass\"], [1, \"number\", 3, \"ngClass\"], [\"hoursTemplate\", \"\"], [\"minutesTemplate\", \"\"], [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [1, \"number\", \"small-number\", 3, \"ngClass\"]],\n    template: function ClockComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵlistener(\"touchmove\", function ClockComponent_Template_div_touchmove_1_listener($event) {\n          return ctx.handleTouchMove($event);\n        })(\"mousemove\", function ClockComponent_Template_div_mousemove_1_listener($event) {\n          return ctx.handleMouseMove($event);\n        })(\"touchstart\", function ClockComponent_Template_div_touchstart_1_listener() {\n          return ctx.disableAnimatedPointer();\n        })(\"mousedown\", function ClockComponent_Template_div_mousedown_1_listener() {\n          return ctx.disableAnimatedPointer();\n        })(\"touchend\", function ClockComponent_Template_div_touchend_1_listener($event) {\n          return ctx.handleTouchEnd($event);\n        })(\"mouseup\", function ClockComponent_Template_div_mouseup_1_listener() {\n          return ctx.enableAnimatedPointer();\n        })(\"click\", function ClockComponent_Template_div_click_1_listener($event) {\n          return ctx.handleClick($event);\n        });\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"button\", 3);\n        ɵngcc0.ɵɵelementStart(4, \"mat-toolbar\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"button\", 5);\n        ɵngcc0.ɵɵtemplate(6, ClockComponent_ng_container_6_Template, 2, 0, \"ng-container\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(7, ClockComponent_ng_container_7_Template, 3, 7, \"ng-container\", 7);\n        ɵngcc0.ɵɵtemplate(8, ClockComponent_ng_container_8_Template, 7, 9, \"ng-container\", 7);\n        ɵngcc0.ɵɵtemplate(9, ClockComponent_ng_container_9_Template, 3, 7, \"ng-container\", 7);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵstyleProp(\"transform\", \"rotate(\" + ctx.angle + \"deg)\");\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(11, _c3, ctx.mode === \"24h\" && ctx.viewType === \"hours\" && (ctx.formattedValue === 0 || ctx.formattedValue > 12), !ctx.touching));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"color\", ctx.color);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"color\", ctx.color);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"color\", ctx.color)(\"ngClass\", ɵngcc0.ɵɵpureFunction1(14, _c4, ctx.viewType === \"minutes\" && ctx.formattedValue % 5 !== 0));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.viewType === \"minutes\" && ctx.formattedValue % 5 !== 0);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.minuteDots);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.numbers);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.secondaryNumbers);\n      }\n    },\n    directives: [ɵngcc3.NgClass, ɵngcc4.MatButton, ɵngcc2.MatToolbar, ɵngcc3.NgIf, ɵngcc3.NgForOf],\n    styles: [\".root[_ngcontent-%COMP%]{cursor:default}.circle[_ngcontent-%COMP%], .root[_ngcontent-%COMP%]{height:256px;width:256px}.circle[_ngcontent-%COMP%]{background:#ededed;border-radius:50%;cursor:pointer;position:relative}.number[_ngcontent-%COMP%]{-moz-box-shadow:0 -1px 5px -200px #000!important;-moz-user-select:none;-ms-user-select:none;-webkit-box-shadow:0 -1px 5px -200px #000!important;-webkit-user-select:none;align-items:center;background:transparent!important;background-color:transparent!important;border:0;box-shadow:0 -1px 5px -200px #000!important;cursor:pointer;display:flex;flex-direction:column;font-size:14px;height:32px;justify-content:center;left:calc(50% - 16px);line-height:32px;pointer-events:none;position:absolute;text-align:center;top:calc(50% - 16px);user-select:none;width:32px}.number.disabled[_ngcontent-%COMP%]{color:rgba(1,1,1,.1)}.number[_ngcontent-%COMP%]:not(.selected):not(.disabled){color:rgba(0,0,0,.87)}.number[_ngcontent-%COMP%]:not(.disabled).minute-dot{color:rgba(1,1,1,.7)}.number[_ngcontent-%COMP%]:not(.disabled).minute-dot.selected{color:transparent}.small-number[_ngcontent-%COMP%]{font-size:12px}.small-number[_ngcontent-%COMP%]:not(.selected):not(.disabled){color:rgba(0,0,0,.67)}.pointer-container[_ngcontent-%COMP%]{height:2;left:50%;pointer-events:none;position:absolute;top:calc(50% - 1px);transform-origin:left center;width:calc(50% - 20px)}.pointer-container.disabled[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]{background-color:transparent}.pointer[_ngcontent-%COMP%]{height:1px}.animated-pointer[_ngcontent-%COMP%]{transition:all .2s ease-out}.small-pointer[_ngcontent-%COMP%]{width:calc(50% - 52px)}.inner-dot[_ngcontent-%COMP%]{height:8px;left:-4px;top:-3px;width:8px}.inner-dot[_ngcontent-%COMP%], .outer-dot[_ngcontent-%COMP%]{-moz-box-shadow:0 3px 5px -1px transparent,0 6px 10px 0 transparent,0 1px 18px 0 transparent!important;-webkit-box-shadow:0 3px 5px -1px transparent,0 6px 10px 0 transparent,0 1px 18px 0 transparent!important;border-radius:50%;box-shadow:0 3px 5px -1px transparent,0 6px 10px 0 transparent,0 1px 18px 0 transparent!important;position:absolute}.outer-dot[_ngcontent-%COMP%]{box-sizing:content-box;height:32px;right:-16px;width:32px}.outer-dot-odd[_ngcontent-%COMP%]{-moz-box-shadow:0 3px 5px -1px transparent,0 6px 10px 0 transparent,0 1px 18px 0 transparent!important;-webkit-box-shadow:0 3px 5px -1px transparent,0 6px 10px 0 transparent,0 1px 18px 0 transparent!important;align-items:center;box-shadow:0 3px 5px -1px transparent,0 6px 10px 0 transparent,0 1px 18px 0 transparent!important;display:flex;flex-direction:column;height:32px;justify-content:center;width:32px}\"],\n    changeDetection: 0\n  });\n  return ClockComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MatTimepickerModule = /*#__PURE__*/(() => {\n  class MatTimepickerModule {}\n\n  MatTimepickerModule.ɵfac = function MatTimepickerModule_Factory(t) {\n    return new (t || MatTimepickerModule)();\n  };\n\n  MatTimepickerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatTimepickerModule\n  });\n  MatTimepickerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatDialogModule, MatButtonModule, MatToolbarModule, MatIconModule, MatInputModule]]\n  });\n  return MatTimepickerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTimepickerModule, {\n    declarations: function () {\n      return [ClockComponent, MatTimepickerDirective, MatTimepickerComponentDialogComponent];\n    },\n    imports: function () {\n      return [CommonModule, MatDialogModule, MatButtonModule, MatToolbarModule, MatIconModule, MatInputModule];\n    },\n    exports: function () {\n      return [MatTimepickerDirective];\n    }\n  });\n})();\n/*\r\n * Public API Surface of mat-timepicker\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { MatTimepickerDirective, MatTimepickerModule, ClockComponent as ɵa, MatTimepickerComponentDialogComponent as ɵb }; //# sourceMappingURL=mat-timepicker.js.map","map":null,"metadata":{},"sourceType":"module"}