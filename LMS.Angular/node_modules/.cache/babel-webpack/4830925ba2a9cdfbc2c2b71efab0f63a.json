{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ngx-spinner\";\nexport let CourseService = /*#__PURE__*/(() => {\n  class CourseService {\n    constructor(http, toastr, router, spinner) {\n      this.http = http;\n      this.toastr = toastr;\n      this.router = router;\n      this.spinner = spinner; //Updated\n\n      this.courses = [];\n      this.countOfCourses = 0;\n      this.availableCourses = [];\n      this.courseTopic = [];\n      this.courseComment = [];\n      this.courseSection = [];\n      this.singleCourse = {};\n      this.sectionStudents = [];\n      this.coursesActualRating = [];\n      this.coursesSumationOfReview = [];\n      this.finalRate = 0;\n      this.summationRate = 0;\n      this.cartId = 0;\n      this.wishListId = 0; //Tags\n\n      this.tag = [];\n      this.level = []; //Types\n\n      this.type = []; //Topics\n\n      this.topic = []; //Coupon\n\n      this.coupon = []; //Checkout\n\n      this.soldCourse = [];\n      this.countOfSoldCourses = 0;\n      this.totalSales = 0;\n      this.recentSoldCourses = [];\n      this.annualSoldCourses = [];\n    } //get course\n\n\n    getCourses() {\n      // debugger;\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'Course/ReturnAllCourses/1', 1).subscribe(res => {\n        debugger;\n        console.log(res);\n        this.courses = res;\n        this.countOfCourses = res.length;\n        this.spinner.hide();\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something wrong');\n      });\n      debugger;\n    } //delete Course\n\n\n    deleteCourse(courseId) {\n      // const contactUs : ContactUs = this.contactUsForm.value;\n      // debugger;\n      this.spinner.show();\n      this.http.put(environment.apiUrl + 'Course/DeleteCourse/' + courseId, courseId).subscribe(res => {\n        // debugger\n        // this.toastr.success('Send Message successfully, Thank You :)');\n        debugger;\n        console.log(res);\n        this.courses = res; // console.log( \"test\",this.courses)\n\n        window.location.reload();\n        this.spinner.hide();\n        this.toastr.success('Course Deleted successfully !!!');\n      }, err => {\n        // this.spinner.hide();\n        this.toastr.error('Something Wrong, Try Again!');\n      });\n      debugger;\n    } //create course\n\n\n    createCourse(course) {\n      debugger;\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'Course/InsertCourse/', course).subscribe(res => {\n        debugger;\n        this.spinner.hide();\n        this.toastr.success('Course Created successfully !!!');\n        window.location.reload();\n      }, err => {\n        this.spinner.hide();\n        this.toastr.error('Something Wrong, Try Again!');\n      });\n    } //update course\n\n\n    updateCourse(course) {\n      debugger;\n      this.spinner.show();\n      this.http.put(environment.apiUrl + 'Course/UpdateCourse', course).subscribe(res => {\n        debugger;\n        window.location.reload();\n        this.spinner.hide();\n        this.toastr.success('Course Updated successfully !!!');\n      }, err => {\n        this.spinner.hide();\n        this.toastr.error('Something Wrong, Try Again!');\n      });\n      debugger;\n    }\n\n    getAllTags() {\n      this.http.get(environment.apiUrl + 'Course/GetAllTags').subscribe(res => {\n        this.tag = res;\n      });\n    } //Levels\n\n\n    reloadComponent() {\n      let currentUrl = this.router.url;\n\n      this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n\n      this.router.onSameUrlNavigation = 'reload';\n      this.router.navigate([currentUrl]);\n    }\n\n    getAllLevels() {\n      this.http.post(environment.apiUrl + 'Course/ReturnLevel/1', 1).subscribe(res => {\n        this.level = res;\n      });\n    }\n\n    getAllTypes() {\n      this.http.get(environment.apiUrl + 'Course/GetAllType').subscribe(res => {\n        this.type = res;\n      });\n    }\n\n    getAllTopics(courseId) {\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'Course/GetCourseTopic/' + courseId, courseId).subscribe(res => {\n        this.topic = res;\n        this.spinner.hide();\n      });\n    }\n\n    deleteTopic(topicId) {\n      this.spinner.show();\n      this.http.put(environment.apiUrl + 'Course/DeleteTopic/' + topicId, topicId).subscribe(res => {\n        this.spinner.hide();\n        this.toastr.success('Topic deleted Successfully !');\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something Wrong, Try Again!');\n      });\n    }\n\n    createTopic(topic) {\n      debugger;\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'Course/InsertTopic/', topic).subscribe(res => {\n        window.location.reload();\n        this.spinner.hide();\n        this.toastr.success('Topic Created successfully !!!');\n      }, err => {\n        this.spinner.hide();\n        this.toastr.error('Something Wrong, Try Again!');\n      });\n      debugger;\n    }\n\n    updateTopic(topic) {\n      debugger;\n      this.spinner.show();\n      this.http.put(environment.apiUrl + 'Course/UpdateTopic/', topic).subscribe(res => {\n        this.spinner.hide();\n        this.toastr.success('Topic updated successfully !!!');\n        window.location.reload();\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('something Wrong   !!!');\n      });\n      debugger;\n    }\n\n    ReturnAllCoupon() {\n      debugger;\n      this.http.post(environment.apiUrl + 'Course/ReturnAllCoupon/' + 0, 0).subscribe(res => {\n        debugger;\n        this.coupon = res;\n      });\n    }\n\n    createCoupon(coupon) {\n      debugger;\n      this.http.post(environment.apiUrl + 'Course/InsertCoupon/', coupon).subscribe(res => {\n        window.location.reload();\n        this.toastr.success('coupon Created successfully !!!');\n      }, err => {\n        // this.spiner.hide();\n        this.toastr.warning('Something Wrong, Try Again!');\n      });\n      debugger;\n    }\n\n    ChangeCouponStatus(couponId) {\n      debugger;\n      this.spinner.show();\n      this.http.put(environment.apiUrl + 'Course/ChangeCouponStatus/' + couponId, couponId).subscribe(res => {\n        window.location.reload();\n        this.spinner.hide();\n        this.toastr.success('Coupon Updated successfully !!!');\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something Wrong, Try Again!');\n      });\n      debugger;\n    }\n\n    updateCoupon(updatedCoupon) {\n      debugger;\n      this.spinner.show();\n      this.http.put(environment.apiUrl + 'Course/UpdateCoupon/', updatedCoupon).subscribe(res => {\n        window.location.reload();\n        this.spinner.hide();\n        this.toastr.success('Coupon Updated successfully !!!');\n      }, err => {\n        this.spinner.hide();\n        this.toastr.error('Something Wrong, Try Again!');\n      });\n      debugger;\n    }\n\n    getALlRefund() {}\n\n    returnSoldCourses() {\n      this.http.get(environment.apiUrl + 'Customer/ReturnSoldCourses').subscribe(res => {\n        debugger;\n        this.soldCourse = res;\n        this.annualSoldCourses = res;\n        this.countOfSoldCourses = res.length;\n        this.totalSales = 0;\n        this.soldCourse.forEach(total => {\n          this.totalSales = this.totalSales + total.coursePrice; // let date = new Date();\n\n          const date = new Date();\n          this.recentSoldCourses = this.soldCourse.filter(course => new Date(course.creationDate).getDate() == date.getDate()); // console.log(\"Date.now.toString() = \", date)\n          // console.log(\"Date = \", course.creationDate)\n        });\n        this.totalSales = (Math.round(this.totalSales * 100) / 100).toFixed(2);\n      });\n    }\n\n    filterSoldCourse(year) {\n      this.soldCourse = this.annualSoldCourses.filter(course => new Date(course.creationDate).getFullYear() == year.value);\n      debugger; // this.returnSoldCourses();\n      // this.soldCourse = this.annualSoldCourses.filter(course => new Date(course.creationDate).getMonth()+1 == month.value)\n    }\n\n    filterSoldCourseByMonth(month) {\n      this.soldCourse = this.annualSoldCourses.filter(course => new Date(course.creationDate).getMonth() + 1 == month.value);\n      debugger;\n    }\n\n    filterSoldCourseBetweenDate(startDate, endDate) {\n      this.soldCourse = this.annualSoldCourses.filter(course => new Date(course.creationDate) >= startDate.value && new Date(course.creationDate) <= endDate.value);\n      console.log(\"startDate = \", startDate);\n      console.log(\"endDate = \", endDate);\n      debugger; // this.returnSoldCourses();\n      // this.soldCourse = this.annualSoldCourses.filter(course => new Date(course.creationDate).getMonth()+1 == month.value)\n    }\n\n    getAllAvailableCourse() {\n      this.http.post('http://localhost:54921/api/Course/ReturnAllCourses/0', null).subscribe(res => {\n        this.availableCourses = res;\n\n        for (let course of res) {\n          this.GetCourseRating(course.courseId);\n        }\n      });\n    }\n\n    GetCourseRating(courseId) {\n      this.http.post('http://localhost:54921/api/Course/GetCourseRatings/' + courseId, null).subscribe(res => {\n        this.coursesSumationOfReview.push(res.length);\n\n        if (res.length > 0) {\n          for (let userRate of res) {\n            this.summationRate += userRate.noOfStar;\n          }\n\n          this.finalRate = this.summationRate / res.length;\n          this.coursesActualRating.push(Math.floor(this.finalRate));\n        } else {\n          this.coursesActualRating.push(0);\n        }\n      });\n    }\n\n    GetSingleCourseInfoById(P_courseId) {\n      this.http.post('http://localhost:54921/api/Course/ReturnAllCourses/0', null).subscribe(res => {\n        for (let course of res) {\n          if (course.courseId == P_courseId) {\n            this.singleCourse = course;\n            console.log(this.singleCourse);\n          }\n        }\n      });\n    }\n\n    GetCourseTopic(P_courseId) {\n      this.http.post('http://localhost:54921/api/Course/GetCourseTopic/' + P_courseId, null).subscribe(res => {\n        this.courseTopic = res;\n      });\n    }\n\n    GetCourseComments(P_courseId) {\n      this.http.post('http://localhost:54921/api/Course/ReturnAllComments?courseId=' + P_courseId + '&queryCode=0', null).subscribe(res => {\n        this.courseComment = res;\n      });\n    }\n\n    GetCourseSections(P_courseId) {\n      this.http.post('http://localhost:54921/api/Section/ReturnSectionByCourseId/' + P_courseId, null).subscribe(res => {\n        this.courseSection = res;\n\n        for (let section of res) {\n          this.GetStudentCountInSection(section.sectionId);\n        }\n      });\n    }\n\n    GetStudentCountInSection(sectionId) {\n      this.http.post('http://localhost:54921/api/Section/ReturnStudentCount/' + sectionId, null).subscribe(res => {\n        this.sectionStudents.push(res.student);\n        this.traineeNumber = res.student;\n      });\n    }\n\n    GetAvailableCartId(traineeId) {\n      this.http.post('http://localhost:54921/api/Customer/ReturnCart?queryCode=1&trineeId=' + traineeId, null).subscribe(res => {\n        if (res.length > 0) {\n          this.cartId = res[0].cartId;\n        } else {\n          //create New Cart\n          this.http.post('http://localhost:54921/api/Customer/InsertCart', {\n            traineeId: traineeId\n          }).subscribe(res => {\n            this.GetAvailableCartId(traineeId);\n          });\n        }\n      }, err => {});\n    }\n\n    GetAvailableWishListId(traineeId) {\n      this.http.post('http://localhost:54921/api/Customer/ReturnWishList/' + traineeId, null).subscribe(res => {\n        if (res.length > 0) {\n          this.wishListId = res[0].wishListId;\n        } else {\n          //create New Wish List\n          this.http.post('http://localhost:54921/api/Customer/InsertWishList', {\n            traineeId: traineeId\n          }).subscribe(res => {\n            this.GetAvailableWishListId(traineeId);\n          });\n        }\n      });\n    }\n\n    AddCourseToWishList(wishListItem) {\n      this.http.post('http://localhost:54921/api/Customer/InsertWishListItem', wishListItem).subscribe(res => {\n        if (res) {\n          this.toastr.success('Added To Wish List');\n        }\n      });\n    }\n\n    AddCourseToCart(cartItem) {\n      this.http.post('http://localhost:54921/api/Customer/InsertCartItem', cartItem).subscribe(res => {\n        console.log(res);\n\n        if (res) {\n          this.toastr.success('Finally Added');\n        }\n      });\n    }\n\n  }\n\n  CourseService.ɵfac = function CourseService_Factory(t) {\n    return new (t || CourseService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.NgxSpinnerService));\n  };\n\n  CourseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CourseService,\n    factory: CourseService.ɵfac,\n    providedIn: 'root'\n  });\n  return CourseService;\n})();","map":null,"metadata":{},"sourceType":"module"}