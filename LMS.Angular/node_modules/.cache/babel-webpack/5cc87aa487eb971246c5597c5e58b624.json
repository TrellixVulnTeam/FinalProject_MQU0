{"ast":null,"code":"import * as signalR from '@microsoft/signalr'; // import signalR\n\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"ngx-spinner\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/platform-browser\";\nexport let ChatService = /*#__PURE__*/(() => {\n  class ChatService {\n    constructor(http, toastr, spinner, router, sanitizer) {\n      this.http = http;\n      this.toastr = toastr;\n      this.spinner = spinner;\n      this.router = router;\n      this.sanitizer = sanitizer;\n      this.data = [];\n    }\n\n    startConnection() {\n      this.hubConnection = new signalR.HubConnectionBuilder() // This url must point to your back-end hub\n      .withUrl('http://localhost:54921/chatsocke').build();\n      this.hubConnection.start().then(() => console.log('Connection started')).catch(err => console.log('Error while starting connection: ' + err));\n    }\n\n    addDataListener() {\n      this.hubConnection.on('ReceiveOne', message => {\n        this.data.push(message);\n      });\n    }\n\n    SendMessage(msg) {\n      this.http.post(environment.apiUrl + 'chat/send', msg).subscribe(res => {}, err => {});\n    }\n\n  }\n\n  ChatService.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.NgxSpinnerService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i5.DomSanitizer));\n  };\n\n  ChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChatService;\n})();","map":null,"metadata":{},"sourceType":"module"}