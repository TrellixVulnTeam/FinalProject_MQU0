{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-spinner\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/router\";\nexport let ContactusService = /*#__PURE__*/(() => {\n  class ContactusService {\n    constructor(http, spinner, toastr, router) {\n      this.http = http;\n      this.spinner = spinner;\n      this.toastr = toastr;\n      this.router = router;\n      this.contactUsForm = new FormGroup({\n        description: new FormControl('', [Validators.required]),\n        email: new FormControl('', [Validators.required]),\n        name: new FormControl('', [Validators.required]),\n        subject: new FormControl('', [Validators.required]),\n        phoneNumber: new FormControl('')\n      });\n      this.message = [{}];\n    }\n    /**********Hit API*********** */\n    // show spinner\n    // hit api\n    // after response: hide spinner\n    // show toastr: small message\n\n    /*************************** */\n\n\n    send() {\n      const contactUs = this.contactUsForm.value; // debugger;\n\n      this.spinner.show();\n      this.http.post(environment.apiUrl + 'ContactUs/InsertMessage', contactUs).subscribe(res => {\n        // debugger\n        this.spinner.hide();\n        this.toastr.success('Send Message successfully, Thank You :)');\n      }, err => {\n        this.spinner.hide();\n        this.toastr.warning('Something wrong!, Please send message again');\n      });\n      debugger;\n    }\n\n    returnAllMessages() {\n      this.http.post(environment.apiUrl + 'ContactUs/ReturnMessage/' + 1, 1).subscribe(res => {\n        debugger;\n        this.message = res;\n        debugger;\n      });\n    }\n\n    deleteMessage(messageId) {\n      this.http.put(environment.apiUrl + 'ContactUs/DeleteMessage/' + messageId, messageId).subscribe(res => {});\n    }\n\n  }\n\n  ContactusService.ɵfac = function ContactusService_Factory(t) {\n    return new (t || ContactusService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NgxSpinnerService), i0.ɵɵinject(i3.ToastrService), i0.ɵɵinject(i4.Router));\n  };\n\n  ContactusService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactusService,\n    factory: ContactusService.ɵfac,\n    providedIn: 'root'\n  });\n  return ContactusService;\n})();","map":null,"metadata":{},"sourceType":"module"}