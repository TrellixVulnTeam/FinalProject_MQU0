{"ast":null,"code":"\"use strict\";\n\nvar ɵngcc0 = require('@angular/core');\n\nvar ɵngcc1 = require('./MbscProvider');\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@angular/core\");\n\nvar MbscProvider_1 = require(\"./MbscProvider\");\n\nvar MobiscrollCalendar = function () {\n  function MobiscrollCalendar(ElementRef, MbscProvider) {\n    this.ElementRef = ElementRef;\n    this.MbscProvider = MbscProvider;\n    this.refChange = new core_1.EventEmitter();\n    this.ngModelChange = new core_1.EventEmitter();\n    this.mbscCalendarChange = new core_1.EventEmitter();\n    this.options = {};\n    this.mbscOptions = {};\n    this.mbscOptionsChange = new core_1.EventEmitter();\n  }\n\n  MobiscrollCalendar.prototype.setInstVal = function (val) {\n    val = new Date(val);\n    if (val.toString() == 'Invalid Date') return;\n    this.instance.setDate(new Date(val)); //this.instance.setVal()\n  };\n\n  MobiscrollCalendar.prototype.ngOnInit = function () {\n    var _this = this;\n\n    this.mbscOptions = this.mbscOptions || {};\n    this.options = Object.assign(this.options, this.mbscOptions); //safe options\n\n    var orgOnMonthChange = this.options.onMonthChange;\n\n    this.options.onMonthChange = function (event, inst) {\n      _this.holdValue = event;\n      if (orgOnMonthChange) orgOnMonthChange();\n    }; // TODO : Find better way to tap into onSet event without overriding settings onSetDate\n\n\n    var orgOnSet = this.mbscOptions.onSet;\n\n    this.setter = this.options.onSet = function (event, inst) {\n      if (orgOnSet) orgOnSet(event, inst);\n\n      if (_this.holdValue) {\n        var newValue = _this.instance.getVal();\n\n        if (newValue && newValue.constructor == Date) {\n          newValue = new Date(newValue.setFullYear(_this.holdValue.year));\n          newValue = new Date(newValue.setMonth(_this.holdValue.month));\n          delete _this.holdValue;\n          return _this.updateVal(newValue);\n        }\n      }\n\n      _this.updateVal(_this.instance.getVal());\n    };\n\n    this.instance = this.createInst(); //this.ElementRef.nativeElement.instance = this.instance\n\n    this.setInstVal(this.getValue()); //allow angular finish digest cycle. Avoid Expression has changed error\n\n    setTimeout(function () {\n      return _this.refChange.emit(_this);\n    }, 0);\n  };\n\n  MobiscrollCalendar.prototype.getValue = function () {\n    if (this.mbscCalendar && new Date(this.mbscCalendar).toString() != 'Invalid Date') {\n      return this.mbscCalendar;\n    }\n\n    if (this.ngModel) {\n      return this.ngModel;\n    }\n    /* Dont do this. Mobiscroll may have default date but that doesnt mean use it as a value\n    if(this.instance){\n      return this.instance.getDate()\n    }*/\n\n\n    return this.isValValue(this.mbscCalendar) ? this.mbscCalendar : null;\n  };\n\n  MobiscrollCalendar.prototype.createInst = function () {\n    return this.MbscProvider.getMobiscroll().calendar(this.ElementRef.nativeElement, this.options);\n  };\n\n  MobiscrollCalendar.prototype.updateVal = function (value) {\n    var _this = this;\n\n    value = value || this.getValue();\n    this.setInstVal(value);\n    setTimeout(function () {\n      _this.updateModel(value);\n\n      setTimeout(function () {\n        return _this.updateDisplay();\n      }, 0);\n    }, 0);\n  };\n\n  MobiscrollCalendar.prototype.updateDisplay = function () {\n    this.ElementRef.nativeElement.value = this.instance._value;\n  };\n\n  MobiscrollCalendar.prototype.updateModel = function (date) {\n    date = this.ngModel = this.mbscCalendar = date || this.getValue();\n    this.mbscCalendarChange.emit(date);\n    this.ngModelChange.emit(date);\n    var form = getParentByTagName(this.ElementRef.nativeElement, 'form');\n    if (form) this.fireFormEvents(form);\n  };\n\n  MobiscrollCalendar.prototype.fireFormEvents = function (form) {\n    var event = document.createEvent(\"HTMLEvents\");\n    event.initEvent(\"input\", true, true);\n    form.dispatchEvent(event);\n    event = document.createEvent(\"HTMLEvents\");\n    event.initEvent(\"change\", true, true);\n    form.dispatchEvent(event);\n  };\n\n  MobiscrollCalendar.prototype.isValValue = function (value) {\n    return value && value != 'mbsc-calendar' && value != 'mbscCalendar';\n  };\n\n  MobiscrollCalendar.prototype.datesMatch = function (a, b) {\n    return a == b || new Date(a).getTime() == new Date(b).getTime();\n  };\n\n  MobiscrollCalendar.prototype.ngOnChanges = function (changes) {\n    var _this = this;\n\n    if (!this.instance) return;\n\n    if (changes.mbscCalendar && !this.datesMatch(changes.mbscCalendar.currentValue, changes.mbscCalendar.previousValue)) {\n      var valValue = this.isValValue(changes.mbscCalendar.currentValue);\n\n      if (valValue && changes.mbscCalendar.currentValue != this.instance.getVal()) {\n        this.setInstVal(changes.mbscCalendar.currentValue);\n      }\n\n      if (valValue) setTimeout(function () {\n        return _this.updateDisplay();\n      }, 0);\n    }\n\n    if (changes.ngModel && !this.datesMatch(changes.ngModel.currentValue, changes.ngModel.previousValue)) {\n      this.updateVal(changes.ngModel.currentValue);\n    }\n\n    if (changes.mbscOptions) {\n      this.applyConfig(changes.mbscOptions.currentValue);\n    }\n  };\n\n  MobiscrollCalendar.prototype.applyConfig = function (config) {\n    this.instance.init(Object.assign(this.options, config, {\n      onSet: this.setter\n    }));\n  };\n\n  MobiscrollCalendar.prototype.ngAfterViewInit = function () {\n    var _this = this;\n\n    if (this.isValValue(this.getValue())) {\n      setTimeout(function () {\n        return _this.updateVal();\n      }, 0);\n    }\n  };\n\n  MobiscrollCalendar.ɵfac = function MobiscrollCalendar_Factory(t) {\n    return new (t || MobiscrollCalendar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MbscProvider));\n  };\n\n  MobiscrollCalendar.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MobiscrollCalendar,\n    selectors: [[\"\", \"mbsc-calendar\", \"\"]],\n    inputs: {\n      mbscOptions: [\"mbsc-options\", \"mbscOptions\"],\n      ngModel: \"ngModel\",\n      mbscCalendar: [\"mbsc-calendar\", \"mbscCalendar\"],\n      ref: [\"mbsc-calendar-ref\", \"ref\"]\n    },\n    outputs: {\n      refChange: \"mbsc-calendar-refChange\",\n      ngModelChange: \"ngModelChange\",\n      mbscCalendarChange: \"mbsc-calendarChange\",\n      mbscOptionsChange: \"mbsc-optionsChange\"\n    },\n    exportAs: [\"mobiscroll\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MobiscrollCalendar;\n}();\n/** @nocollapse */\n\n\nMobiscrollCalendar.ctorParameters = function () {\n  return [{\n    type: core_1.ElementRef\n  }, {\n    type: MbscProvider_1.MbscProvider\n  }];\n};\n\nMobiscrollCalendar.propDecorators = {\n  'ref': [{\n    type: core_1.Input,\n    args: ['mbsc-calendar-ref']\n  }],\n  'refChange': [{\n    type: core_1.Output,\n    args: ['mbsc-calendar-refChange']\n  }],\n  'ngModel': [{\n    type: core_1.Input\n  }],\n  'ngModelChange': [{\n    type: core_1.Output\n  }],\n  'mbscCalendar': [{\n    type: core_1.Input,\n    args: ['mbsc-calendar']\n  }],\n  'mbscCalendarChange': [{\n    type: core_1.Output,\n    args: ['mbsc-calendarChange']\n  }],\n  'mbscOptions': [{\n    type: core_1.Input,\n    args: ['mbsc-options']\n  }],\n  'mbscOptionsChange': [{\n    type: core_1.Output,\n    args: ['mbsc-optionsChange']\n  }]\n};\nexports.MobiscrollCalendar = MobiscrollCalendar;\n\nvar MobiscrollDate = function (_super) {\n  __extends(MobiscrollDate, _super);\n\n  function MobiscrollDate() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.refChange = new core_1.EventEmitter();\n    _this.mbscCalendarChange = new core_1.EventEmitter();\n    return _this;\n  }\n\n  MobiscrollDate.prototype.createInst = function () {\n    return this.MbscProvider.getMobiscroll().date(this.ElementRef.nativeElement, this.options);\n  };\n\n  MobiscrollDate.ɵfac = /*@__PURE__*/function () {\n    var ɵMobiscrollDate_BaseFactory;\n    return function MobiscrollDate_Factory(t) {\n      return (ɵMobiscrollDate_BaseFactory || (ɵMobiscrollDate_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MobiscrollDate)))(t || MobiscrollDate);\n    };\n  }();\n\n  MobiscrollDate.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MobiscrollDate,\n    selectors: [[\"\", \"mbsc-date\", \"\"]],\n    inputs: {\n      ref: [\"mbsc-date-ref\", \"ref\"],\n      mbscCalendar: [\"mbsc-date\", \"mbscCalendar\"]\n    },\n    outputs: {\n      refChange: \"mbsc-date-refChange\",\n      mbscCalendarChange: \"mbsc-dateChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MobiscrollDate;\n}(MobiscrollCalendar);\n/** @nocollapse */\n\n\nMobiscrollDate.ctorParameters = function () {\n  return [];\n};\n\nMobiscrollDate.propDecorators = {\n  'ref': [{\n    type: core_1.Input,\n    args: ['mbsc-date-ref']\n  }],\n  'refChange': [{\n    type: core_1.Output,\n    args: ['mbsc-date-refChange']\n  }],\n  'mbscCalendar': [{\n    type: core_1.Input,\n    args: ['mbsc-date']\n  }],\n  'mbscCalendarChange': [{\n    type: core_1.Output,\n    args: ['mbsc-dateChange']\n  }]\n};\nexports.MobiscrollDate = MobiscrollDate;\n\nvar MobiscrollDateTime = function (_super) {\n  __extends(MobiscrollDateTime, _super);\n\n  function MobiscrollDateTime() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.refChange = new core_1.EventEmitter();\n    _this.mbscCalendarChange = new core_1.EventEmitter();\n    return _this;\n  }\n\n  MobiscrollDateTime.prototype.createInst = function () {\n    return this.MbscProvider.getMobiscroll().datetime(this.ElementRef.nativeElement, this.options);\n  };\n\n  MobiscrollDateTime.ɵfac = /*@__PURE__*/function () {\n    var ɵMobiscrollDateTime_BaseFactory;\n    return function MobiscrollDateTime_Factory(t) {\n      return (ɵMobiscrollDateTime_BaseFactory || (ɵMobiscrollDateTime_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MobiscrollDateTime)))(t || MobiscrollDateTime);\n    };\n  }();\n\n  MobiscrollDateTime.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MobiscrollDateTime,\n    selectors: [[\"\", \"mbsc-datetime\", \"\"]],\n    inputs: {\n      ref: [\"mbsc-datetime-ref\", \"ref\"],\n      mbscCalendar: [\"mbsc-datetime\", \"mbscCalendar\"]\n    },\n    outputs: {\n      refChange: \"mbsc-datetime-refChange\",\n      mbscCalendarChange: \"mbsc-datetimeChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MobiscrollDateTime;\n}(MobiscrollCalendar);\n/** @nocollapse */\n\n\nMobiscrollDateTime.ctorParameters = function () {\n  return [];\n};\n\nMobiscrollDateTime.propDecorators = {\n  'ref': [{\n    type: core_1.Input,\n    args: ['mbsc-datetime-ref']\n  }],\n  'refChange': [{\n    type: core_1.Output,\n    args: ['mbsc-datetime-refChange']\n  }],\n  'mbscCalendar': [{\n    type: core_1.Input,\n    args: ['mbsc-datetime']\n  }],\n  'mbscCalendarChange': [{\n    type: core_1.Output,\n    args: ['mbsc-datetimeChange']\n  }]\n};\nexports.MobiscrollDateTime = MobiscrollDateTime;\n\nvar MobiscrollTime = function (_super) {\n  __extends(MobiscrollTime, _super);\n\n  function MobiscrollTime() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.refChange = new core_1.EventEmitter();\n    _this.mbscCalendarChange = new core_1.EventEmitter();\n    return _this;\n  }\n\n  MobiscrollTime.prototype.createInst = function () {\n    return this.MbscProvider.getMobiscroll().time(this.ElementRef.nativeElement, this.options);\n  };\n\n  MobiscrollTime.ɵfac = /*@__PURE__*/function () {\n    var ɵMobiscrollTime_BaseFactory;\n    return function MobiscrollTime_Factory(t) {\n      return (ɵMobiscrollTime_BaseFactory || (ɵMobiscrollTime_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MobiscrollTime)))(t || MobiscrollTime);\n    };\n  }();\n\n  MobiscrollTime.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MobiscrollTime,\n    selectors: [[\"\", \"mbsc-time\", \"\"]],\n    inputs: {\n      ref: [\"mbsc-time-ref\", \"ref\"],\n      mbscCalendar: [\"mbsc-time\", \"mbscCalendar\"]\n    },\n    outputs: {\n      refChange: \"mbsc-time-refChange\",\n      mbscCalendarChange: \"mbsc-timeChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MobiscrollTime;\n}(MobiscrollCalendar);\n/** @nocollapse */\n\n\nMobiscrollTime.ctorParameters = function () {\n  return [];\n};\n\nMobiscrollTime.propDecorators = {\n  'ref': [{\n    type: core_1.Input,\n    args: ['mbsc-time-ref']\n  }],\n  'refChange': [{\n    type: core_1.Output,\n    args: ['mbsc-time-refChange']\n  }],\n  'mbscCalendar': [{\n    type: core_1.Input,\n    args: ['mbsc-time']\n  }],\n  'mbscCalendarChange': [{\n    type: core_1.Output,\n    args: ['mbsc-timeChange']\n  }]\n};\nexports.MobiscrollTime = MobiscrollTime;\nexports.declarations = [MobiscrollCalendar, MobiscrollDate, MobiscrollDateTime, MobiscrollTime];\n\nfunction getParentByTagName(node, tagname) {\n  var parent;\n  if (node === null || tagname === '') return;\n  parent = node.parentNode;\n  tagname = tagname.toUpperCase();\n\n  while (parent && parent.tagName !== \"HTML\") {\n    if (parent.tagName === tagname) {\n      return parent;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return;\n}\n\nexports.getParentByTagName = getParentByTagName; //# sourceMappingURL=mobiscroll.components.js.map","map":null,"metadata":{},"sourceType":"script"}