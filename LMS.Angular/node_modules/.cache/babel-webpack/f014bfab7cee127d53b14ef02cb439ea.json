{"ast":null,"code":"import _asyncToGenerator from \"C:/Github/FinalProject/LMS.Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as signalR from '@microsoft/signalr'; // import signalR\n\nimport { Subject } from 'rxjs';\nimport { Message } from '../models/Message';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChatService {\n  constructor(http) {\n    var _this = this;\n\n    this.http = http;\n    this.connection = new signalR.HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withUrl(\"http://localhost:5000/notify\", {//skipNegotiation: true,\n      //transport: signalR.HttpTransportType.WebSockets\n    }).build();\n    this.connection = new signalR.HubConnectionBuilder().withUrl(\"https://localhost:54921/chatsocket\") // mapping to the chathub as in startup.cs\n    .configureLogging(signalR.LogLevel.Information).build();\n    this.POST_URL = \"https://localhost:54921/api/chat/send\";\n    this.receivedMessageObject = new Message();\n    this.sharedObj = new Subject();\n    this.connection.onclose( /*#__PURE__*/_asyncToGenerator(function* () {\n      yield _this.start();\n    }));\n    this.connection.on(\"ReceiveOne\", (user, message) => {\n      return this.mapReceivedMessage(user, message);\n    });\n    this.start();\n  }\n\n  start() {}\n\n  then() {}\n\n  function() {\n    console.log('Connected!');\n  }\n\n  catch() {}\n\n  function(err) {\n    return console.error(err.toString());\n  }\n\n  // Strart the connection\n  start() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.connection.start();\n        console.log(\"connected\");\n      } catch (err) {\n        console.log(err);\n        setTimeout(() => _this2.start(), 5000);\n      }\n    })();\n  }\n\n  mapReceivedMessage(user, message) {\n    this.receivedMessageObject.user = user;\n    this.receivedMessageObject.message = message;\n    this.sharedObj.next(this.receivedMessageObject);\n  }\n  /* ****************************** Public Mehods **************************************** */\n  // Calls the controller method\n\n\n  broadcastMessage(msgDto) {\n    this.http.post(this.POST_URL, msgDto).subscribe(data => console.log(data)); // this.connection.invoke(\"SendMessage1\", msgDto.user, msgDto.msgText).catch(err => console.error(err));    // This can invoke the server method named as \"SendMethod1\" directly.\n  }\n\n  retrieveMappedObject() {\n    return this.sharedObj.asObservable();\n  }\n\n}\n\nChatService.ɵfac = function ChatService_Factory(t) {\n  return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatService,\n  factory: ChatService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Github/FinalProject/LMS.Angular/src/app/Service/chat.service.ts"],"names":["signalR","Subject","Message","i0","i1","ChatService","constructor","http","connection","HubConnectionBuilder","configureLogging","LogLevel","Debug","withUrl","build","Information","POST_URL","receivedMessageObject","sharedObj","onclose","start","on","user","message","mapReceivedMessage","then","function","console","log","catch","err","error","toString","setTimeout","next","broadcastMessage","msgDto","post","subscribe","data","retrieveMappedObject","asObservable","ɵfac","ChatService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,OAAZ,MAAyB,oBAAzB,C,CAA+C;;AAC/C,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAAA;;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkB,IAAIR,OAAO,CAACS,oBAAZ,GACbC,gBADa,CACIV,OAAO,CAACW,QAAR,CAAiBC,KADrB,EAEbC,OAFa,CAEL,8BAFK,EAE2B,CAC7C;AACA;AAF6C,KAF3B,EAKfC,KALe,EAAlB;AAMA,SAAKN,UAAL,GAAkB,IAAIR,OAAO,CAACS,oBAAZ,GAAmCI,OAAnC,CAA2C,oCAA3C,EAAiF;AAAjF,KACbH,gBADa,CACIV,OAAO,CAACW,QAAR,CAAiBI,WADrB,EAEbD,KAFa,EAAlB;AAGA,SAAKE,QAAL,GAAgB,uCAAhB;AACA,SAAKC,qBAAL,GAA6B,IAAIf,OAAJ,EAA7B;AACA,SAAKgB,SAAL,GAAiB,IAAIjB,OAAJ,EAAjB;AACA,SAAKO,UAAL,CAAgBW,OAAhB,iCAAwB,aAAY;AAChC,YAAM,KAAI,CAACC,KAAL,EAAN;AACH,KAFD;AAGA,SAAKZ,UAAL,CAAgBa,EAAhB,CAAmB,YAAnB,EAAiC,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAAE,aAAO,KAAKC,kBAAL,CAAwBF,IAAxB,EAA8BC,OAA9B,CAAP;AAAgD,KAAtG;AACA,SAAKH,KAAL;AACH;;AACDA,EAAAA,KAAK,GAAG,CAAG;;AACXK,EAAAA,IAAI,GAAG,CAAG;;AACVC,EAAAA,QAAQ,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH;;AACDC,EAAAA,KAAK,GAAG,CAAG;;AACXH,EAAAA,QAAQ,CAACI,GAAD,EAAM;AACV,WAAOH,OAAO,CAACI,KAAR,CAAcD,GAAG,CAACE,QAAJ,EAAd,CAAP;AACH;;AAED;AACMZ,EAAAA,KAAK,GAAG;AAAA;;AAAA;AACV,UAAI;AACA,cAAM,MAAI,CAACZ,UAAL,CAAgBY,KAAhB,EAAN;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH,OAHD,CAIA,OAAOE,GAAP,EAAY;AACRH,QAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACAG,QAAAA,UAAU,CAAC,MAAM,MAAI,CAACb,KAAL,EAAP,EAAqB,IAArB,CAAV;AACH;AARS;AASb;;AACDI,EAAAA,kBAAkB,CAACF,IAAD,EAAOC,OAAP,EAAgB;AAC9B,SAAKN,qBAAL,CAA2BK,IAA3B,GAAkCA,IAAlC;AACA,SAAKL,qBAAL,CAA2BM,OAA3B,GAAqCA,OAArC;AACA,SAAKL,SAAL,CAAegB,IAAf,CAAoB,KAAKjB,qBAAzB;AACH;AACD;AACA;;;AACAkB,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AACrB,SAAK7B,IAAL,CAAU8B,IAAV,CAAe,KAAKrB,QAApB,EAA8BoB,MAA9B,EAAsCE,SAAtC,CAAgDC,IAAI,IAAIZ,OAAO,CAACC,GAAR,CAAYW,IAAZ,CAAxD,EADqB,CAErB;AACH;;AACDC,EAAAA,oBAAoB,GAAG;AACnB,WAAO,KAAKtB,SAAL,CAAeuB,YAAf,EAAP;AACH;;AAvDoB;;AAyDzBpC,WAAW,CAACqC,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIvC,WAAV,EAAuBF,EAAE,CAAC0C,QAAH,CAAYzC,EAAE,CAAC0C,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACAzC,WAAW,CAAC0C,KAAZ,GAAoB,aAAc5C,EAAE,CAAC6C,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE5C,WAAT;AAAsB6C,EAAAA,OAAO,EAAE7C,WAAW,CAACqC,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import * as signalR from '@microsoft/signalr'; // import signalR\r\nimport { Subject } from 'rxjs';\r\nimport { Message } from '../models/Message';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ChatService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.connection = new signalR.HubConnectionBuilder()\r\n            .configureLogging(signalR.LogLevel.Debug)\r\n            .withUrl(\"http://localhost:5000/notify\", {\r\n        //skipNegotiation: true,\r\n        //transport: signalR.HttpTransportType.WebSockets\r\n        }).build();\r\n        this.connection = new signalR.HubConnectionBuilder().withUrl(\"https://localhost:54921/chatsocket\") // mapping to the chathub as in startup.cs\r\n            .configureLogging(signalR.LogLevel.Information)\r\n            .build();\r\n        this.POST_URL = \"https://localhost:54921/api/chat/send\";\r\n        this.receivedMessageObject = new Message();\r\n        this.sharedObj = new Subject();\r\n        this.connection.onclose(async () => {\r\n            await this.start();\r\n        });\r\n        this.connection.on(\"ReceiveOne\", (user, message) => { return this.mapReceivedMessage(user, message); });\r\n        this.start();\r\n    }\r\n    start() { }\r\n    then() { }\r\n    function() {\r\n        console.log('Connected!');\r\n    }\r\n    catch() { }\r\n    function(err) {\r\n        return console.error(err.toString());\r\n    }\r\n    ;\r\n    // Strart the connection\r\n    async start() {\r\n        try {\r\n            await this.connection.start();\r\n            console.log(\"connected\");\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n            setTimeout(() => this.start(), 5000);\r\n        }\r\n    }\r\n    mapReceivedMessage(user, message) {\r\n        this.receivedMessageObject.user = user;\r\n        this.receivedMessageObject.message = message;\r\n        this.sharedObj.next(this.receivedMessageObject);\r\n    }\r\n    /* ****************************** Public Mehods **************************************** */\r\n    // Calls the controller method\r\n    broadcastMessage(msgDto) {\r\n        this.http.post(this.POST_URL, msgDto).subscribe(data => console.log(data));\r\n        // this.connection.invoke(\"SendMessage1\", msgDto.user, msgDto.msgText).catch(err => console.error(err));    // This can invoke the server method named as \"SendMethod1\" directly.\r\n    }\r\n    retrieveMappedObject() {\r\n        return this.sharedObj.asObservable();\r\n    }\r\n}\r\nChatService.ɵfac = function ChatService_Factory(t) { return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient)); };\r\nChatService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ChatService, factory: ChatService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}