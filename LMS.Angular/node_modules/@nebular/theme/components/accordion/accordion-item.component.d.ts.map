{"version":3,"file":"accordion-item.component.d.ts","sources":["accordion-item.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { ChangeDetectorRef, EventEmitter, SimpleChanges, OnInit, OnChanges, OnDestroy } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { NbAccordionComponent } from './accordion.component';\r\nimport { NbBooleanInput } from '../helpers';\r\n/**\r\n * Component intended to be used within `<nb-accordion>` component\r\n */\r\nexport declare class NbAccordionItemComponent implements OnInit, OnChanges, OnDestroy {\r\n    private accordion;\r\n    private cd;\r\n    /**\r\n     * Item is collapse (`true` by default)\r\n     * @type {boolean}\r\n     */\r\n    get collapsed(): boolean;\r\n    set collapsed(val: boolean);\r\n    static ngAcceptInputType_collapsed: NbBooleanInput;\r\n    /**\r\n     * Item is expanded (`false` by default)\r\n     * @type {boolean}\r\n     */\r\n    get expanded(): boolean;\r\n    set expanded(val: boolean);\r\n    static ngAcceptInputType_expanded: NbBooleanInput;\r\n    /**\r\n     * Item is disabled and cannot be opened.\r\n     * @type {boolean}\r\n     */\r\n    get disabled(): boolean;\r\n    set disabled(val: boolean);\r\n    static ngAcceptInputType_disabled: NbBooleanInput;\r\n    /**\r\n     * Emits whenever the expanded state of the accordion changes.\r\n     * Primarily used to facilitate two-way binding.\r\n     */\r\n    collapsedChange: EventEmitter<boolean>;\r\n    accordionItemInvalidate: Subject<boolean>;\r\n    private collapsedValue;\r\n    private disabledValue;\r\n    private destroy$;\r\n    constructor(accordion: NbAccordionComponent, cd: ChangeDetectorRef);\r\n    /**\r\n     * Open/close the item\r\n     */\r\n    toggle(): void;\r\n    /**\r\n     * Open the item.\r\n     */\r\n    open(): void;\r\n    /**\r\n     * Collapse the item.\r\n     */\r\n    close(): void;\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    private invalidate;\r\n}\r\n"]}