{"version":3,"file":"autocomplete.component.d.ts","sources":["autocomplete.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { ChangeDetectorRef, ElementRef, EventEmitter, QueryList, AfterContentInit, OnDestroy } from '@angular/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { Subject } from 'rxjs';\r\nimport { NbComponentSize } from '../component-size';\r\nimport { NbPosition } from '../cdk/overlay/overlay-position';\r\nimport { NbOptionComponent } from '../option/option.component';\r\nimport { NbPortalDirective } from '../cdk/overlay/mapping';\r\n/**\r\n * The `NbAutocompleteComponent` overlay component.\r\n * Provides an `NbOptionList` overlay component.\r\n * */\r\nexport declare class NbAutocompleteComponent<T> implements AfterContentInit, OnDestroy {\r\n    protected cd: ChangeDetectorRef;\r\n    protected destroy$: Subject<void>;\r\n    /**\r\n     * HTML input reference to which autocomplete connected.\r\n     * */\r\n    hostRef: ElementRef;\r\n    /**\r\n     * Component scoped id for aria attributes.\r\n     * */\r\n    id: string;\r\n    /**\r\n     * @docs-private\r\n     * Current overlay position because of we have to toggle overlayPosition\r\n     * in [ngClass] direction.\r\n     */\r\n    _overlayPosition: NbPosition;\r\n    get overlayPosition(): NbPosition;\r\n    set overlayPosition(value: NbPosition);\r\n    /**\r\n     * Returns width of the input.\r\n     * */\r\n    get hostWidth(): number;\r\n    /**\r\n     * Function passed as input to process each string option value before render.\r\n     * */\r\n    handleDisplayFn: ((value: any) => string);\r\n    /**\r\n     * Autocomplete size, available sizes:\r\n     * `tiny`, `small`, `medium` (default), `large`, `giant`\r\n     */\r\n    size: NbComponentSize;\r\n    /**\r\n     * Flag passed as input to always make first option active.\r\n     * */\r\n    activeFirst: boolean;\r\n    /**\r\n     * Specifies class to be set on `nb-option`s container (`nb-option-list`)\r\n     * */\r\n    optionsListClass: NgClass['ngClass'];\r\n    /**\r\n     * Specifies class for the overlay panel with options\r\n     * */\r\n    optionsPanelClass: string | string[];\r\n    /**\r\n     * Will be emitted when selected value changes.\r\n     * */\r\n    selectedChange: EventEmitter<T>;\r\n    /**\r\n      * List of `NbOptionComponent`'s components passed as content.\r\n    * */\r\n    options: QueryList<NbOptionComponent<T>>;\r\n    /**\r\n     * NbOptionList with options content.\r\n     * */\r\n    portal: NbPortalDirective;\r\n    constructor(cd: ChangeDetectorRef);\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Autocomplete knows nothing about host html input element.\r\n     * So, attach method set input hostRef for styling.\r\n     * */\r\n    setHost(hostRef: ElementRef): void;\r\n    /**\r\n     * Propagate selected value.\r\n     * */\r\n    emitSelected(selected: T): void;\r\n    get tiny(): boolean;\r\n    get small(): boolean;\r\n    get medium(): boolean;\r\n    get large(): boolean;\r\n    get giant(): boolean;\r\n}\r\n"]}