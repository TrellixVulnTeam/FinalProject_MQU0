{"version":3,"file":"autocomplete.directive.d.ts","sources":["autocomplete.directive.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { AfterViewInit, ChangeDetectorRef, ComponentRef, ElementRef, OnDestroy, Renderer2 } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { NbOverlayRef, NbScrollStrategy } from '../cdk/overlay/mapping';\r\nimport { NbTriggerStrategy, NbTriggerStrategyBuilderService } from '../cdk/overlay/overlay-trigger';\r\nimport { NbOverlayService } from '../cdk/overlay/overlay-service';\r\nimport { NbAdjustableConnectedPositionStrategy, NbPositionBuilderService } from '../cdk/overlay/overlay-position';\r\nimport { NbActiveDescendantKeyManager, NbActiveDescendantKeyManagerFactoryService } from '../cdk/a11y/descendant-key-manager';\r\nimport { NbScrollStrategies } from '../cdk/adapter/block-scroll-strategy-adapter';\r\nimport { NbOptionComponent } from '../option/option.component';\r\nimport { NbAutocompleteComponent } from './autocomplete.component';\r\n/**\r\n * The `NbAutocompleteDirective` provides a capability to expand input with\r\n * `NbAutocompleteComponent` overlay containing options to select and fill input with.\r\n *\r\n * @stacked-example(Showcase, autocomplete/autocomplete-showcase.component)\r\n *\r\n * ### Installation\r\n *\r\n * Import `NbAutocompleteModule` to your feature module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbAutocompleteModule,\r\n *   ],\r\n * })\r\n * export class PageModule { }\r\n * ```\r\n * ### Usage\r\n *\r\n * You can bind control with form controls or ngModel.\r\n *\r\n * @stacked-example(Autocomplete form binding, autocomplete/autocomplete-form.component)\r\n *\r\n * Options in the autocomplete may be grouped using `nb-option-group` component.\r\n *\r\n * @stacked-example(Grouping, autocomplete/autocomplete-group.component)\r\n *\r\n * Autocomplete may change selected option value via provided function.\r\n *\r\n * @stacked-example(Custom display, autocomplete/autocomplete-custom-display.component)\r\n *\r\n * Also, autocomplete may make first option in option list active automatically.\r\n *\r\n * @stacked-example(Active first, autocomplete/autocomplete-active-first.component)\r\n *\r\n * */\r\nexport declare class NbAutocompleteDirective<T> implements OnDestroy, AfterViewInit, ControlValueAccessor {\r\n    protected hostRef: ElementRef;\r\n    protected overlay: NbOverlayService;\r\n    protected cd: ChangeDetectorRef;\r\n    protected triggerStrategyBuilder: NbTriggerStrategyBuilderService;\r\n    protected positionBuilder: NbPositionBuilderService;\r\n    protected activeDescendantKeyManagerFactory: NbActiveDescendantKeyManagerFactoryService<NbOptionComponent<T>>;\r\n    protected renderer: Renderer2;\r\n    /**\r\n     * NbAutocompleteComponent instance passed via input.\r\n     * */\r\n    protected _autocomplete: NbAutocompleteComponent<T>;\r\n    /**\r\n     * Trigger strategy used by overlay.\r\n     * @docs-private\r\n     * */\r\n    protected triggerStrategy: NbTriggerStrategy;\r\n    protected positionStrategy: NbAdjustableConnectedPositionStrategy;\r\n    protected overlayRef: NbOverlayRef;\r\n    protected keyManager: NbActiveDescendantKeyManager<NbOptionComponent<T>>;\r\n    protected destroy$: Subject<void>;\r\n    protected _onChange: (value: T) => void;\r\n    protected _onTouched: () => void;\r\n    /**\r\n     * Determines is autocomplete overlay opened.\r\n     * */\r\n    get isOpen(): boolean;\r\n    /**\r\n     * Determines is autocomplete overlay closed.\r\n     * */\r\n    get isClosed(): boolean;\r\n    /**\r\n     * Provides autocomplete component.\r\n     * */\r\n    get autocomplete(): NbAutocompleteComponent<T>;\r\n    set autocomplete(autocomplete: NbAutocompleteComponent<T>);\r\n    /**\r\n     * Determines options overlay offset (in pixels).\r\n     **/\r\n    overlayOffset: number;\r\n    /**\r\n     * Determines if the input will be focused when the control value is changed\r\n     * */\r\n    get focusInputOnValueChange(): boolean;\r\n    set focusInputOnValueChange(value: boolean);\r\n    protected _focusInputOnValueChange: boolean;\r\n    /**\r\n     * Determines options overlay scroll strategy.\r\n     **/\r\n    scrollStrategy: NbScrollStrategies;\r\n    customOverlayHost: ElementRef;\r\n    get top(): boolean;\r\n    get bottom(): boolean;\r\n    role: string;\r\n    ariaAutocomplete: string;\r\n    hasPopup: string;\r\n    get ariaExpanded(): string;\r\n    get ariaOwns(): string;\r\n    get ariaActiveDescendant(): string;\r\n    constructor(hostRef: ElementRef, overlay: NbOverlayService, cd: ChangeDetectorRef, triggerStrategyBuilder: NbTriggerStrategyBuilderService, positionBuilder: NbPositionBuilderService, activeDescendantKeyManagerFactory: NbActiveDescendantKeyManagerFactoryService<NbOptionComponent<T>>, renderer: Renderer2);\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    handleInput(): void;\r\n    handleKeydown(): void;\r\n    handleBlur(): void;\r\n    show(): void;\r\n    hide(): void;\r\n    writeValue(value: T): void;\r\n    registerOnChange(fn: (value: any) => {}): void;\r\n    registerOnTouched(fn: any): void;\r\n    setDisabledState(disabled: boolean): void;\r\n    protected subscribeOnOptionClick(): void;\r\n    protected subscribeOnPositionChange(): void;\r\n    protected getActiveItem(): NbOptionComponent<T>;\r\n    protected setupAutocomplete(): void;\r\n    protected getDisplayValue(value: string): string;\r\n    protected getContainer(): ComponentRef<any>;\r\n    protected handleInputValueUpdate(value: T): void;\r\n    protected subscribeOnTriggers(): void;\r\n    protected createTriggerStrategy(): NbTriggerStrategy;\r\n    protected createKeyManager(): void;\r\n    protected setHostInputValue(value: any): void;\r\n    protected createPositionStrategy(): NbAdjustableConnectedPositionStrategy;\r\n    protected subscribeOnOverlayKeys(): void;\r\n    protected setActiveItem(): void;\r\n    protected attachToOverlay(): void;\r\n    protected createOverlay(): void;\r\n    protected initOverlay(): void;\r\n    protected checkOverlayVisibility(): void;\r\n    protected createScrollStrategy(): NbScrollStrategy;\r\n}\r\n"]}