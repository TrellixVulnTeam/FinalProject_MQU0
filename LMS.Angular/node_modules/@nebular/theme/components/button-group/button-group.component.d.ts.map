{"version":3,"file":"button-group.component.d.ts","sources":["button-group.component.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter, OnChanges, QueryList, SimpleChanges } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { NbStatusService } from '../../services/status.service';\r\nimport { NbBooleanInput } from '../helpers';\r\nimport { NbComponentSize } from '../component-size';\r\nimport { NbComponentShape } from '../component-shape';\r\nimport { NbComponentOrCustomStatus } from '../component-status';\r\nimport { NbButton } from '../button/base-button';\r\nimport { NbButtonToggleAppearance, NbButtonToggleDirective } from './button-toggle.directive';\r\n/**\r\n * `<nb-button-group>` visually groups buttons together and allow to control buttons properties and the state as a\r\n * group.\r\n * @stacked-example(Button Group Showcase, button-group/button-group-showcase.component)\r\n *\r\n * ### Installation\r\n *\r\n * Import `NbButtonGroupModule` to your feature module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbButtonGroupModule,\r\n *   ],\r\n * })\r\n * export class PageModule { }\r\n * ```\r\n *\r\n * ### Usage\r\n *\r\n * You can use `<nb-button-group>` to group a series of `[nbButton]` or `[nbButtonToggle]` components.\r\n * @stacked-example(Button and Button Toggle Groups, button-group/button-and-button-toggle-groups.component)\r\n *\r\n * For a group of multiple `[nbButtonToggle]` you also can control multi-selection behavior. By default, the group\r\n * component allows only one pressed button toggle at a time (similar to the radio group). To be able to keep multiple\r\n * toggles pressed, you need to add `multiple` attributes to the `<nb-button-toggle>`.\r\n * @stacked-example(Button Group Multiple, button-group/button-group-multiple.component)\r\n *\r\n * To know which buttons are currently pressed listen to `(valueChange)` on the `nb-button-group`. Event\r\n * contains an array of values of currently pressed button toggles. You can assign a value to the\r\n * `[nbButtonToggle]` via the `value` input.\r\n * @stacked-example(Button Group Value Change, button-group/button-group-value-change.component)\r\n *\r\n * To disable a group of buttons, add a `disabled` attribute to the `<nb-button-group>`.\r\n * @stacked-example(Button Group Disabled, button-group/button-group-disabled.component)\r\n *\r\n * The group component controls all visual attributes of buttons such as `appearance`, `status`, `size`, `shape`.\r\n * You can change it via the appropriate attributes.\r\n *\r\n * Button group appearances:\r\n * @stacked-example(Button Group Appearances, button-group/button-group-appearances.component)\r\n *\r\n * Button group statuses:\r\n * @stacked-example(Button Group Statuses, button-group/button-group-statuses.component)\r\n *\r\n * Button group sizes:\r\n * @stacked-example(Button Group Sizes, button-group/button-group-sizes.component)\r\n *\r\n * Buttons group shapes:\r\n * @additional-example(Button Group Shapes, button-group/button-group-shapes.component)\r\n *\r\n * @styles\r\n *\r\n * button-group-filled-button-basic-text-color:\r\n * button-group-filled-button-primary-text-color:\r\n * button-group-filled-button-success-text-color:\r\n * button-group-filled-button-info-text-color:\r\n * button-group-filled-button-warning-text-color:\r\n * button-group-filled-button-danger-text-color:\r\n * button-group-filled-button-control-text-color:\r\n * button-group-filled-basic-divider-color:\r\n * button-group-filled-primary-divider-color:\r\n * button-group-filled-success-divider-color:\r\n * button-group-filled-info-divider-color:\r\n * button-group-filled-warning-divider-color:\r\n * button-group-filled-danger-divider-color:\r\n * button-group-filled-control-divider-color:\r\n * button-group-ghost-divider-color:\r\n **/\r\nexport declare class NbButtonGroupComponent implements OnChanges, AfterContentInit {\r\n    protected cd: ChangeDetectorRef;\r\n    protected statusService: NbStatusService;\r\n    protected lastEmittedValue: any[];\r\n    protected readonly destroy$: Subject<void>;\r\n    protected readonly buttonsChange$: Subject<NbButton[]>;\r\n    readonly buttons: QueryList<NbButton>;\r\n    /**\r\n     * Button group size, available sizes:\r\n     * `tiny`, `small`, `medium`, `large`, `giant`\r\n     */\r\n    size: NbComponentSize;\r\n    /**\r\n     * Button group status (adds specific styles):\r\n     * `basic`, `primary`, `info`, `success`, `warning`, `danger`, `control`\r\n     */\r\n    status: NbComponentOrCustomStatus;\r\n    /**\r\n     * Button group shapes: `rectangle`, `round`, `semi-round`\r\n     */\r\n    shape: NbComponentShape;\r\n    /**\r\n     * Button group appearance: `filled`, `outline`, `ghost`\r\n     */\r\n    appearance: NbButtonToggleAppearance;\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    protected _disabled: boolean;\r\n    static ngAcceptInputType_disabled: NbBooleanInput;\r\n    /**\r\n     * Allows to keep multiple button toggles pressed. Off by default.\r\n     */\r\n    get multiple(): boolean;\r\n    set multiple(value: boolean);\r\n    protected _multiple: boolean;\r\n    static ngAcceptInputType_multiple: NbBooleanInput;\r\n    /**\r\n     * Sets `filled` appearance\r\n     */\r\n    get filled(): boolean;\r\n    set filled(value: boolean);\r\n    static ngAcceptInputType_filled: NbBooleanInput;\r\n    /**\r\n     * Sets `outline` appearance\r\n     */\r\n    get outline(): boolean;\r\n    set outline(value: boolean);\r\n    static ngAcceptInputType_outline: NbBooleanInput;\r\n    /**\r\n     * Sets `ghost` appearance\r\n     */\r\n    get ghost(): boolean;\r\n    set ghost(value: boolean);\r\n    static ngAcceptInputType_ghost: NbBooleanInput;\r\n    /**\r\n     * Emits when `nbButtonToggle` pressed state change. `$event` contains an array of the currently pressed button\r\n     * toggles.\r\n     */\r\n    valueChange: EventEmitter<any[]>;\r\n    role: string;\r\n    get additionalClasses(): string[];\r\n    constructor(cd: ChangeDetectorRef, statusService: NbStatusService);\r\n    ngOnChanges({ size, status, shape, multiple, filled, outline, ghost, disabled }: SimpleChanges): void;\r\n    ngAfterContentInit(): void;\r\n    protected listenButtonPressedState(buttons: NbButton[]): void;\r\n    protected syncButtonsProperties(buttons: NbButton[]): void;\r\n    protected emitCurrentValue(toggleButtons: NbButtonToggleDirective[]): void;\r\n}\r\n"]}