{"version":3,"file":"base-button.d.ts","sources":["base-button.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, Renderer2 } from '@angular/core';\r\nimport { NbStatusService } from '../../services/status.service';\r\nimport { NbBooleanInput } from '../helpers';\r\nimport { NbComponentSize } from '../component-size';\r\nimport { NbComponentOrCustomStatus } from '../component-status';\r\nimport { NbComponentShape } from '../component-shape';\r\nexport declare type NbButtonAppearance = 'filled' | 'outline' | 'ghost' | 'hero';\r\nexport declare type NbButtonProperties = Pick<NbButton, 'appearance' | 'size' | 'shape' | 'status' | 'disabled'> & Object;\r\nexport declare abstract class NbButton implements AfterViewInit {\r\n    protected renderer: Renderer2;\r\n    protected hostElement: ElementRef<HTMLElement>;\r\n    protected cd: ChangeDetectorRef;\r\n    protected zone: NgZone;\r\n    protected statusService: NbStatusService;\r\n    /**\r\n     * Button size, available sizes:\r\n     * `tiny`, `small`, `medium`, `large`, `giant`\r\n     */\r\n    size: NbComponentSize;\r\n    /**\r\n     * Button status (adds specific styles):\r\n     * `primary`, `info`, `success`, `warning`, `danger`\r\n     */\r\n    status: NbComponentOrCustomStatus;\r\n    /**\r\n     * Button shapes: `rectangle`, `round`, `semi-round`\r\n     */\r\n    shape: NbComponentShape;\r\n    /**\r\n     * Button appearance: `filled`, `outline`, `ghost`, `hero`\r\n     */\r\n    appearance: NbButtonAppearance;\r\n    /**\r\n     * Sets `filled` appearance\r\n     */\r\n    get filled(): boolean;\r\n    set filled(value: boolean);\r\n    static ngAcceptInputType_filled: NbBooleanInput;\r\n    /**\r\n     * Sets `outline` appearance\r\n     */\r\n    get outline(): boolean;\r\n    set outline(value: boolean);\r\n    static ngAcceptInputType_outline: NbBooleanInput;\r\n    /**\r\n     * Sets `ghost` appearance\r\n     */\r\n    get ghost(): boolean;\r\n    set ghost(value: boolean);\r\n    static ngAcceptInputType_ghost: NbBooleanInput;\r\n    /**\r\n     * If set element will fill its container\r\n     */\r\n    get fullWidth(): boolean;\r\n    set fullWidth(value: boolean);\r\n    private _fullWidth;\r\n    static ngAcceptInputType_fullWidth: NbBooleanInput;\r\n    /**\r\n     * Disables the button\r\n     */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    private _disabled;\r\n    static ngAcceptInputType_disabled: NbBooleanInput;\r\n    /**\r\n     * Tabindex of the button.\r\n     */\r\n    tabIndex: number;\r\n    get tabbable(): string;\r\n    get tiny(): boolean;\r\n    get small(): boolean;\r\n    get medium(): boolean;\r\n    get large(): boolean;\r\n    get giant(): boolean;\r\n    get rectangle(): boolean;\r\n    get round(): boolean;\r\n    get semiRound(): boolean;\r\n    get iconLeft(): boolean;\r\n    get iconRight(): boolean;\r\n    get additionalClasses(): string[];\r\n    protected constructor(renderer: Renderer2, hostElement: ElementRef<HTMLElement>, cd: ChangeDetectorRef, zone: NgZone, statusService: NbStatusService);\r\n    ngAfterViewInit(): void;\r\n    /**\r\n     * @docs-private\r\n     **/\r\n    updateProperties(config: Partial<NbButtonProperties>): void;\r\n    get iconElement(): Element;\r\n}\r\n"]}