{"version":3,"file":"native-date.service.d.ts","sources":["native-date.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { DatePipe, TranslationWidth } from '@angular/common';\r\nimport { NbDateService } from './date.service';\r\n/**\r\n * The `NbNativeDateService` is basic implementation of `NbDateService` using\r\n * native js date objects and angular localization services.\r\n * */\r\nexport declare class NbNativeDateService extends NbDateService<Date> {\r\n    protected datePipe: DatePipe;\r\n    constructor(locale: string);\r\n    setLocale(locale: string): void;\r\n    setHours(date: Date, hour: number): Date;\r\n    setMinutes(date: Date, minute: number): Date;\r\n    setSeconds(date: Date, second: number): Date;\r\n    setMilliseconds(date: Date, second: number): Date;\r\n    isValidDateString(date: string, format: string): boolean;\r\n    isValidTimeString(date: string, format: string): boolean;\r\n    today(): Date;\r\n    getLocaleTimeFormat(): string;\r\n    getDate(date: Date): number;\r\n    getMonth(date: Date): number;\r\n    getYear(date: Date): number;\r\n    getDayOfWeek(date: Date): number;\r\n    /**\r\n     * returns first day of the week, it can be 1 if week starts from monday\r\n     * and 0 if from sunday and so on.\r\n     * */\r\n    getFirstDayOfWeek(): number;\r\n    getMonthName(date: Date, style?: TranslationWidth): string;\r\n    getMonthNameByIndex(index: number, style?: TranslationWidth): string;\r\n    getDayOfWeekNames(): string[];\r\n    format(date: Date, format: string): string;\r\n    /**\r\n     * We haven't got capability to parse date using formatting without third party libraries.\r\n     * */\r\n    parse(date: string, format: string): Date;\r\n    addDay(date: Date, num: number): Date;\r\n    addMonth(date: Date, num: number): Date;\r\n    addMinutes(date: Date, minute: number): Date;\r\n    addHours(date: Date, hour: number): Date;\r\n    getHours(date: Date): number;\r\n    getMinutes(date: Date): number;\r\n    getSeconds(date: Date): number;\r\n    getMilliseconds(date: Date): number;\r\n    addYear(date: Date, num: number): Date;\r\n    clone(date: Date): Date;\r\n    compareDates(date1: Date, date2: Date): number;\r\n    createDate(year: number, month: number, date: number): Date;\r\n    getMonthEnd(date: Date): Date;\r\n    getMonthStart(date: Date): Date;\r\n    getNumberOfDaysInMonth(date: Date): number;\r\n    getYearEnd(date: Date): Date;\r\n    getYearStart(date: Date): Date;\r\n    valueOf(date: Date): number;\r\n    isSameDay(date1: Date, date2: Date): boolean;\r\n    isSameMonth(date1: Date, date2: Date): boolean;\r\n    isSameYear(date1: Date, date2: Date): boolean;\r\n    getId(): string;\r\n    getWeekNumber(date: Date): number;\r\n    getDateFormat(): string;\r\n    getTwelveHoursFormat(): string;\r\n}\r\n"]}