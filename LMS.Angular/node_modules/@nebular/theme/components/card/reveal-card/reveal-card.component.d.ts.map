{"version":3,"file":"reveal-card.component.d.ts","sources":["reveal-card.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n *\r\n * Reveal card example:\r\n * @stacked-example(My example, reveal-card/reveal-card-showcase.component)\r\n *\r\n * As a content Reveal card accepts two instances of `nb-card` - for front and back sides.\r\n *\r\n * Basic reveal card configuration:\r\n *\r\n * ```html\r\n * <nb-reveal-card>\r\n *   <nb-card-front>\r\n *     <nb-card>\r\n *       <nb-card-body>\r\n *         Front\r\n *       </nb-card-body>\r\n *     </nb-card>\r\n *   </nb-card-front>\r\n *   <nb-card-back>\r\n *     <nb-card>\r\n *       <nb-card-body>\r\n *         Back\r\n *       </nb-card-body>\r\n *     </nb-card>\r\n *   </nb-card-back>\r\n * </nb-reveal-card>\r\n * ```\r\n *\r\n * ### Installation\r\n *\r\n * Import `NbCardModule` to your feature module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbCardModule,\r\n *   ],\r\n * })\r\n * export class PageModule { }\r\n * ```\r\n * ### Usage\r\n *\r\n * Reveal Card with header and footer:\r\n * @stacked-example(With Header & Footer, reveal-card/reveal-card-full.component)\r\n *\r\n * Colored reveal-cards could be simply configured by providing a `status` property:\r\n * @stacked-example(Colored Card, reveal-card/reveal-card-colors.component)\r\n *\r\n * It is also possible to assign an `accent` property for a slight card highlight\r\n * as well as combine it with `status`:\r\n * @stacked-example(Accent Card, reveal-card/reveal-card-accents.component)\r\n *\r\n * @additional-example(Multiple Sizes, reveal-card/reveal-card-sizes.component)\r\n */\r\nexport declare class NbRevealCardComponent {\r\n    /**\r\n     * Reveal state\r\n     * @type boolean\r\n     */\r\n    revealed: boolean;\r\n    /**\r\n     * Show/hide toggle button to be able to control toggle from your code\r\n     * @type {boolean}\r\n     */\r\n    showToggleButton: boolean;\r\n    toggle(): void;\r\n}\r\n"]}