{"version":3,"file":"overlay-container.d.ts","sources":["overlay-container.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, Injector, ViewContainerRef } from '@angular/core';\r\nimport { NbPosition } from './overlay-position';\r\nimport { NbComponentPortal, NbPortalInjector, NbPortalOutletDirective, NbTemplatePortal } from './mapping';\r\nexport interface NbRenderableContainer {\r\n    /**\r\n     * A renderContent method renders content with provided context.\r\n     * Naturally, this job has to be done by ngOnChanges lifecycle hook, but\r\n     * ngOnChanges hook will be triggered only if we update content or context properties\r\n     * through template property binding syntax. But in our case we're updating these properties programmatically.\r\n     * */\r\n    renderContent(): any;\r\n}\r\nexport declare class NbPositionedContainerComponent {\r\n    position: NbPosition;\r\n    get top(): boolean;\r\n    get topStart(): boolean;\r\n    get topEnd(): boolean;\r\n    get right(): boolean;\r\n    get endTop(): boolean;\r\n    get endBottom(): boolean;\r\n    get bottom(): boolean;\r\n    get bottomStart(): boolean;\r\n    get bottomEnd(): boolean;\r\n    get left(): boolean;\r\n    get startTop(): boolean;\r\n    get startBottom(): boolean;\r\n}\r\nexport declare class NbOverlayContainerComponent {\r\n    protected vcr: ViewContainerRef;\r\n    protected injector: Injector;\r\n    private changeDetectorRef;\r\n    portalOutlet: NbPortalOutletDirective;\r\n    isAttached: boolean;\r\n    content: string;\r\n    constructor(vcr: ViewContainerRef, injector: Injector, changeDetectorRef: ChangeDetectorRef);\r\n    get isStringContent(): boolean;\r\n    attachComponentPortal<T>(portal: NbComponentPortal<T>, context?: Object): ComponentRef<T>;\r\n    attachTemplatePortal<C>(portal: NbTemplatePortal<C>): EmbeddedViewRef<C>;\r\n    attachStringContent(content: string): void;\r\n    detach(): void;\r\n    protected createChildInjector(cfr: ComponentFactoryResolver): NbPortalInjector;\r\n}\r\n"]}