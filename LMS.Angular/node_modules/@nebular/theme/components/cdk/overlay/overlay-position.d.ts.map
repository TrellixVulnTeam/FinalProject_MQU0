{"version":3,"file":"overlay-position.d.ts","sources":["overlay-position.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { NbConnectedPosition, NbFlexibleConnectedPositionStrategy, NbOverlayPositionBuilder, NbOverlayRef, NbPositionStrategy } from './mapping';\r\nimport { NbPlatform } from '../platform/platform-service';\r\nimport { NbOverlayContainerAdapter } from '../adapter/overlay-container-adapter';\r\nimport { NbViewportRulerAdapter } from '../adapter/viewport-ruler-adapter';\r\nimport { NbGlobalLogicalPosition } from './position-helper';\r\nimport { GlobalPositionStrategy } from '@angular/cdk/overlay';\r\nexport declare type NbAdjustmentValues = 'noop' | 'clockwise' | 'counterclockwise' | 'vertical' | 'horizontal';\r\nexport declare enum NbAdjustment {\r\n    NOOP = \"noop\",\r\n    CLOCKWISE = \"clockwise\",\r\n    COUNTERCLOCKWISE = \"counterclockwise\",\r\n    VERTICAL = \"vertical\",\r\n    HORIZONTAL = \"horizontal\"\r\n}\r\nexport declare type NbPositionValues = 'top' | 'bottom' | 'left' | 'right' | 'start' | 'end' | 'top-end' | 'top-start' | 'bottom-end' | 'bottom-start' | 'end-top' | 'end-bottom' | 'start-top' | 'start-bottom';\r\nexport declare enum NbPosition {\r\n    TOP = \"top\",\r\n    BOTTOM = \"bottom\",\r\n    LEFT = \"left\",\r\n    RIGHT = \"right\",\r\n    START = \"start\",\r\n    END = \"end\",\r\n    TOP_END = \"top-end\",\r\n    TOP_START = \"top-start\",\r\n    BOTTOM_END = \"bottom-end\",\r\n    BOTTOM_START = \"bottom-start\",\r\n    END_TOP = \"end-top\",\r\n    END_BOTTOM = \"end-bottom\",\r\n    START_TOP = \"start-top\",\r\n    START_BOTTOM = \"start-bottom\"\r\n}\r\n/**\r\n * The main idea of the adjustable connected strategy is to provide predefined set of positions for your overlay.\r\n * You have to provide adjustment and appropriate strategy will be chosen in runtime.\r\n * */\r\nexport declare class NbAdjustableConnectedPositionStrategy extends NbFlexibleConnectedPositionStrategy implements NbPositionStrategy {\r\n    protected _position: NbPosition;\r\n    protected _offset: number;\r\n    protected _adjustment: NbAdjustment;\r\n    protected appliedPositions: {\r\n        key: NbPosition;\r\n        connectedPosition: NbConnectedPosition;\r\n    }[];\r\n    readonly positionChange: Observable<NbPosition>;\r\n    attach(overlayRef: NbOverlayRef): void;\r\n    apply(): void;\r\n    position(position: NbPosition): this;\r\n    adjustment(adjustment: NbAdjustment): this;\r\n    offset(offset: number): this;\r\n    protected applyPositions(): void;\r\n    protected createPositions(): NbPosition[];\r\n    protected persistChosenPositions(positions: NbPosition[]): void;\r\n    protected reorderPreferredPositions(positions: NbPosition[]): NbPosition[];\r\n    protected mapToLogicalPosition(position: NbPosition): NbPosition;\r\n}\r\nexport declare class NbGlobalPositionStrategy extends GlobalPositionStrategy {\r\n    position(position: NbGlobalLogicalPosition): this;\r\n}\r\nexport declare class NbPositionBuilderService {\r\n    protected document: any;\r\n    protected viewportRuler: NbViewportRulerAdapter;\r\n    protected platform: NbPlatform;\r\n    protected positionBuilder: NbOverlayPositionBuilder;\r\n    protected overlayContainer: NbOverlayContainerAdapter;\r\n    constructor(document: any, viewportRuler: NbViewportRulerAdapter, platform: NbPlatform, positionBuilder: NbOverlayPositionBuilder, overlayContainer: NbOverlayContainerAdapter);\r\n    global(): NbGlobalPositionStrategy;\r\n    connectedTo(elementRef: ElementRef): NbAdjustableConnectedPositionStrategy;\r\n}\r\n"]}