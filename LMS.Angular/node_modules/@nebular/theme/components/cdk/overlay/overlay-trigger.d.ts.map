{"version":3,"file":"overlay-trigger.d.ts","sources":["overlay-trigger.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentRef } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nexport declare type NbTriggerValues = 'noop' | 'click' | 'hover' | 'hint' | 'focus';\r\nexport declare enum NbTrigger {\r\n    NOOP = \"noop\",\r\n    CLICK = \"click\",\r\n    HOVER = \"hover\",\r\n    HINT = \"hint\",\r\n    FOCUS = \"focus\"\r\n}\r\n/**\r\n * Provides entity with two event stream: show and hide.\r\n * Each stream provides different events depends on implementation.\r\n * We have three main trigger strategies: click, hint and hover.\r\n * */\r\nexport interface NbTriggerStrategy {\r\n    show$: Observable<never | Event>;\r\n    hide$: Observable<never | Event>;\r\n    destroy(): any;\r\n}\r\n/**\r\n * TODO maybe we have to use renderer.listen instead of observableFromEvent?\r\n * Renderer provides capability use it in service worker, ssr and so on.\r\n * */\r\nexport declare abstract class NbTriggerStrategyBase implements NbTriggerStrategy {\r\n    protected document: Document;\r\n    protected host: HTMLElement;\r\n    protected container: () => ComponentRef<any>;\r\n    destroy(): void;\r\n    protected destroyed$: Subject<unknown>;\r\n    protected isNotOnHostOrContainer(event: Event): boolean;\r\n    protected isOnHostOrContainer(event: Event): boolean;\r\n    protected isOnHost({ target }: Event): boolean;\r\n    protected isOnContainer({ target }: Event): boolean;\r\n    abstract show$: Observable<Event>;\r\n    abstract hide$: Observable<Event>;\r\n    constructor(document: Document, host: HTMLElement, container: () => ComponentRef<any>);\r\n}\r\n/**\r\n * Creates show and hide event streams.\r\n * Fires toggle event when the click was performed on the host element.\r\n * Fires close event when the click was performed on the document but\r\n * not on the host or container.\r\n * */\r\nexport declare class NbClickTriggerStrategy extends NbTriggerStrategyBase {\r\n    protected click$: Observable<[boolean, Event]>;\r\n    readonly show$: Observable<Event>;\r\n    readonly hide$: Observable<Event>;\r\n}\r\n/**\r\n * Creates show and hide event streams.\r\n * Fires open event when a mouse hovers over the host element and stay over at least 100 milliseconds.\r\n * Fires close event when the mouse leaves the host element and stops out of the host and popover container.\r\n * */\r\nexport declare class NbHoverTriggerStrategy extends NbTriggerStrategyBase {\r\n    show$: Observable<Event>;\r\n    hide$: Observable<Event>;\r\n}\r\n/**\r\n * Creates show and hide event streams.\r\n * Fires open event when a mouse hovers over the host element and stay over at least 100 milliseconds.\r\n * Fires close event when the mouse leaves the host element.\r\n * */\r\nexport declare class NbHintTriggerStrategy extends NbTriggerStrategyBase {\r\n    show$: Observable<Event>;\r\n    hide$: Observable<Event>;\r\n}\r\n/**\r\n * Creates show and hide event streams.\r\n * Fires open event when a focus is on the host element and stay over at least 100 milliseconds.\r\n * Fires close event when the focus leaves the host element.\r\n * */\r\nexport declare class NbFocusTriggerStrategy extends NbTriggerStrategyBase {\r\n    protected focusOut$: Observable<Event>;\r\n    protected clickIn$: Observable<Event>;\r\n    protected clickOut$: Observable<Event>;\r\n    protected tabKeyPress$: Observable<Event>;\r\n    show$: Observable<Event>;\r\n    hide$: Observable<Event>;\r\n}\r\n/**\r\n * Creates empty show and hide event streams.\r\n * */\r\nexport declare class NbNoopTriggerStrategy extends NbTriggerStrategyBase {\r\n    show$: Observable<Event>;\r\n    hide$: Observable<Event>;\r\n}\r\nexport declare class NbTriggerStrategyBuilderService {\r\n    protected _document: any;\r\n    protected _host: HTMLElement;\r\n    protected _container: () => ComponentRef<any>;\r\n    protected _trigger: NbTrigger;\r\n    constructor(_document: any);\r\n    trigger(trigger: NbTrigger): this;\r\n    host(host: HTMLElement): this;\r\n    container(container: () => ComponentRef<any>): this;\r\n    build(): NbTriggerStrategy;\r\n}\r\n"]}