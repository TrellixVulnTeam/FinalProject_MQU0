{"version":3,"file":"chat.component.d.ts","sources":["chat.component.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { ElementRef, QueryList, AfterViewInit, SimpleChanges, AfterContentInit, OnChanges } from '@angular/core';\r\nimport { NbStatusService } from '../../services/status.service';\r\nimport { NbComponentSize } from '../component-size';\r\nimport { NbComponentOrCustomStatus } from '../component-status';\r\nimport { NbBooleanInput } from '../helpers';\r\nimport { NbChatFormComponent } from './chat-form.component';\r\nimport { NbChatMessageComponent } from './chat-message.component';\r\n/**\r\n * Conversational UI collection - a set of components for chat-like UI construction.\r\n *\r\n * Main features:\r\n * - different message types support (text, image, file, file group, map, etc)\r\n * - drag & drop for images and files with preview\r\n * - different UI styles\r\n * - custom action buttons (coming soon)\r\n *\r\n * Here's a complete example build in a bot-like app. Type `help` to be able to receive different message types.\r\n * Enjoy the conversation and the beautiful UI.\r\n * @stacked-example(Showcase, chat/chat-showcase.component)\r\n *\r\n * Basic chat configuration and usage:\r\n * ```ts\r\n * <nb-chat title=\"Nebular Conversational UI\">\r\n *       <nb-chat-message *ngFor=\"let msg of messages\"\r\n *                        [type]=\"msg.type\"\r\n *                        [message]=\"msg.text\"\r\n *                        [reply]=\"msg.reply\"\r\n *                        [sender]=\"msg.user.name\"\r\n *                        [date]=\"msg.date\"\r\n *                        [files]=\"msg.files\"\r\n *                        [quote]=\"msg.quote\"\r\n *                        [latitude]=\"msg.latitude\"\r\n *                        [longitude]=\"msg.longitude\"\r\n *                        [avatar]=\"msg.user.avatar\">\r\n *   </nb-chat-message>\r\n *\r\n *   <nb-chat-form (send)=\"sendMessage($event)\" [dropFiles]=\"true\">\r\n *   </nb-chat-form>\r\n * </nb-chat>\r\n * ```\r\n * ### Installation\r\n *\r\n * Import `NbChatModule` to your feature module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbChatModule,\r\n *   ],\r\n * })\r\n * export class PageModule { }\r\n * ```\r\n *\r\n * If you need to provide an API key for a `map` message type (which is required by Google Maps)\r\n * you may use `NbChatModule.forRoot({ ... })` call if this is a global app configuration\r\n * or `NbChatModule.forChild({ ... })` for a feature module configuration:\r\n *\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbChatModule.forRoot({ messageGoogleMapKey: 'MAP_KEY' }),\r\n *   ],\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n *\r\n * ### Usage\r\n *\r\n * There are three main components:\r\n * ```ts\r\n * <nb-chat>\r\n * </nb-chat> // chat container\r\n *\r\n * <nb-chat-form>\r\n * </nb-chat-form> // chat form with drag&drop files feature\r\n *\r\n * <nb-chat-message>\r\n * </nb-chat-message> // chat message, available multiple types\r\n * ```\r\n *\r\n * Two users conversation showcase:\r\n * @stacked-example(Conversation, chat/chat-conversation-showcase.component)\r\n *\r\n * Chat UI is also available in different colors by specifying a `[status]` input:\r\n *\r\n * @stacked-example(Colored Chat, chat/chat-colors.component)\r\n *\r\n * Also it is possible to configure sizes through `[size]` input:\r\n *\r\n * @stacked-example(Chat Sizes, chat/chat-sizes.component)\r\n *\r\n * # Custom message types\r\n *\r\n * Besides built-in message types, you could provide custom ones with their own template to render.\r\n * As an example, let's add the `link` message type.\r\n * <br>\r\n * First, you need to provide a template for the `link` message type:\r\n * ```html\r\n * <nb-chat>\r\n *   <a *nbCustomMessage=\"'link'\" href=\"https://example.com\">example.com</a>\r\n * </nb-chat>\r\n * ```\r\n * Then, add the `nb-chat-message` component with the `link` type:\r\n * ```html\r\n * <nb-chat>\r\n *   <a *nbCustomMessage=\"'link'\" href=\"https://example.com\">example.com</a>\r\n *   <nb-chat-message type=\"link\"></nb-chat-message>\r\n * </nb-chat>\r\n * ```\r\n *\r\n * <div class=\"note note-warning\">\r\n *   <div class=\"note-title\">Important!</div>\r\n *   <div class=\"note-body\">\r\n *     Custom chat messages must be defined before the `nb-chat-message`.\r\n *   </div>\r\n * </div>\r\n *\r\n * Custom message templates could have arbitrary data associated with them. Let's extract hardcoded link\r\n * href and text. To pass some data to the custom message template, use the `customMessageData` input\r\n * of the `nb-chat-message` component:\r\n * ```html\r\n * ...\r\n * <nb-chat-message type=\"link\" [customMessageData]=\"{ href: 'https://example.com', text: 'example.com' }\">\r\n * </nb-chat-message>\r\n * ...\r\n * ```\r\n * When `customMessageData` is set, this object would become a template context and you'll be able\r\n * to reference it via `let varName` syntax:\r\n * ```html\r\n * <a *nbCustomMessage=\"'link'; let data\" [href]=\"data.href\">{{ data.text }}</a>\r\n * ```\r\n *\r\n * That's it, full example will look like this:\r\n * ```html\r\n * <nb-chat title=\"Nebular Conversational UI\">\r\n *   <a *nbCustomMessage=\"'link'; let data\" [href]=\"data.href\">{{ data.text }}</a>\r\n *   <nb-chat-message type=\"link\" [customMessageData]=\"{ href: 'https://example.com', text: 'example.com' }\">\r\n *   </nb-chat-message>\r\n * </nb-chat>\r\n * ```\r\n *\r\n * If you want to style your custom template from the ground up you could turn off generic message styling\r\n * (such as round borders, color, background, etc.) via the `noStyles` input:\r\n * ```html\r\n *   <div *nbCustomMessage=\"'my-custom-type'; noStyles: true\">...</div>\r\n * ```\r\n * When you decide to use your own styles, the `isReply` property of the custom message template context\r\n * would come in handy. This property allows you to determine whether the message is a reply or not.\r\n * For example, to change link text color (as replies have a different background):\r\n * ```html\r\n * <a *nbCustomMessage=\"'link'; let data; let isReply=isReply\"\r\n *    [href]=\"data.href\"\r\n *    [class.link-control]=\"!isReply\">\r\n *   {{ data.label }}\r\n * </a>\r\n * ```\r\n *\r\n * Below, you could find a more complex example with multiple custom message types:\r\n * @stacked-example(Custom message, chat/chat-custom-message.component)\r\n *\r\n * @styles\r\n *\r\n * chat-background-color:\r\n * chat-border:\r\n * chat-border-radius:\r\n * chat-shadow:\r\n * chat-padding:\r\n * chat-scrollbar-color:\r\n * chat-scrollbar-background-color:\r\n * chat-scrollbar-width:\r\n * chat-text-color:\r\n * chat-text-font-family:\r\n * chat-text-font-size:\r\n * chat-text-font-weight:\r\n * chat-text-line-height:\r\n * chat-header-text-font-family:\r\n * chat-header-text-font-size:\r\n * chat-header-text-font-weight:\r\n * chat-header-text-line-height:\r\n * chat-tiny-height:\r\n * chat-small-height:\r\n * chat-medium-height:\r\n * chat-large-height:\r\n * chat-giant-height:\r\n * chat-basic-background-color:\r\n * chat-basic-text-color:\r\n * chat-primary-background-color:\r\n * chat-primary-text-color:\r\n * chat-success-background-color:\r\n * chat-success-text-color:\r\n * chat-info-background-color:\r\n * chat-info-text-color:\r\n * chat-warning-background-color:\r\n * chat-warning-text-color:\r\n * chat-danger-background-color:\r\n * chat-danger-text-color:\r\n * chat-control-background-color:\r\n * chat-control-text-color:\r\n * chat-divider-color:\r\n * chat-divider-style:\r\n * chat-divider-width:\r\n * chat-message-background:\r\n * chat-message-text-color:\r\n * chat-message-reply-background-color:\r\n * chat-message-reply-text-color:\r\n * chat-message-avatar-background-color:\r\n * chat-message-sender-text-color:\r\n * chat-message-quote-background-color:\r\n * chat-message-quote-text-color:\r\n * chat-message-file-text-color:\r\n * chat-message-file-background-color:\r\n */\r\nexport declare class NbChatComponent implements OnChanges, AfterContentInit, AfterViewInit {\r\n    protected statusService: NbStatusService;\r\n    title: string;\r\n    /**\r\n     * Chat size, available sizes:\r\n     * `tiny`, `small`, `medium`, `large`, `giant`\r\n     */\r\n    size: NbComponentSize;\r\n    /**\r\n     * Chat status color (adds specific styles):\r\n     * `basic` (default), `primary`, `success`, `info`, `warning`, `danger`, `control`.\r\n     */\r\n    status: NbComponentOrCustomStatus;\r\n    noMessagesPlaceholder: string;\r\n    /**\r\n     * Scroll chat to the bottom of the list when a new message arrives\r\n     */\r\n    get scrollBottom(): boolean;\r\n    set scrollBottom(value: boolean);\r\n    protected _scrollBottom: boolean;\r\n    static ngAcceptInputType_scrollBottom: NbBooleanInput;\r\n    scrollable: ElementRef;\r\n    messages: QueryList<NbChatMessageComponent>;\r\n    chatForm: NbChatFormComponent;\r\n    constructor(statusService: NbStatusService);\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngAfterContentInit(): void;\r\n    ngAfterViewInit(): void;\r\n    updateView(): void;\r\n    scrollListBottom(): void;\r\n    protected updateFormStatus(): void;\r\n    get tiny(): boolean;\r\n    get small(): boolean;\r\n    get medium(): boolean;\r\n    get large(): boolean;\r\n    get giant(): boolean;\r\n    get primary(): boolean;\r\n    get success(): boolean;\r\n    get info(): boolean;\r\n    get warning(): boolean;\r\n    get danger(): boolean;\r\n    get basic(): boolean;\r\n    get control(): boolean;\r\n    get additionalClasses(): string[];\r\n}\r\n"]}