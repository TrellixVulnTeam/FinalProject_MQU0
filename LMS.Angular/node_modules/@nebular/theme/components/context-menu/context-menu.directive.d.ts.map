{"version":3,"file":"context-menu.directive.d.ts","sources":["context-menu.directive.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { AfterViewInit, ComponentRef, ElementRef, OnChanges, OnDestroy, OnInit } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { NbDynamicOverlayController } from '../cdk/overlay/dynamic/dynamic-overlay';\r\nimport { NbDynamicOverlayHandler } from '../cdk/overlay/dynamic/dynamic-overlay-handler';\r\nimport { NbOverlayConfig, NbOverlayRef } from '../cdk/overlay/mapping';\r\nimport { NbAdjustableConnectedPositionStrategy, NbAdjustment, NbPosition } from '../cdk/overlay/overlay-position';\r\nimport { NbTrigger, NbTriggerValues } from '../cdk/overlay/overlay-trigger';\r\nimport { NbMenuItem, NbMenuService } from '../menu/menu.service';\r\nexport interface NbContextMenuContext {\r\n    items: NbMenuItem[];\r\n    tag: string;\r\n    position: NbPosition;\r\n}\r\n/**\r\n * Full featured context menu directive.\r\n *\r\n * @stacked-example(Showcase, context-menu/context-menu-showcase.component)\r\n *\r\n * Just pass menu items array:\r\n *\r\n * ```html\r\n * <button [nbContextMenu]=\"items\"></button>\r\n * ...\r\n * items = [{ title: 'Profile' }, { title: 'Log out' }];\r\n * ```\r\n * ### Installation\r\n *\r\n * Import `NbContextMenuModule` to your feature module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbContextMenuModule,\r\n *   ],\r\n * })\r\n * export class PageModule { }\r\n * ```\r\n * Also make sure `NbMenuModule` is imported to your `app.module`.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbMenuModule.forRoot(),\r\n *   ],\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n *\r\n * ### Usage\r\n *\r\n * If you want to handle context menu clicks you have to pass `nbContextMenuTag`\r\n * param and register to events using NbMenuService.\r\n * `NbContextMenu` renders plain `NbMenu` inside, so\r\n * you have to work with it just like with `NbMenu` component:\r\n *\r\n * @stacked-example(Menu item click, context-menu/context-menu-click.component)\r\n *\r\n * Context menu has different placements, such as: top, bottom, left and right\r\n * which can be used as following:\r\n *\r\n * ```html\r\n * <button [nbContextMenu]=\"items\" nbContextMenuPlacement=\"right\"></button>\r\n * ```\r\n *\r\n * ```ts\r\n * items = [{ title: 'Profile' }, { title: 'Log out' }];\r\n * ```\r\n *\r\n * By default context menu will try to adjust itself to maximally fit viewport\r\n * and provide the best user experience. It will try to change position of the context menu.\r\n * If you wanna disable this behaviour just set it falsy value.\r\n *\r\n * ```html\r\n * <button [nbContextMenu]=\"items\" nbContextMenuAdjustment=\"counterclockwise\"></button>\r\n * ```\r\n *\r\n * ```ts\r\n * items = [{ title: 'Profile' }, { title: 'Log out' }];\r\n * ```\r\n * Context menu has a number of triggers which provides an ability to show and hide the component in different ways:\r\n *\r\n * - Click mode shows the component when a user clicks on the host element and hides when the user clicks\r\n * somewhere on the document outside the component.\r\n * - Hint provides capability to show the component when the user hovers over the host element\r\n * and hide when the user hovers out of the host.\r\n * - Hover works like hint mode with one exception - when the user moves mouse from host element to\r\n * the container element the component remains open, so that it is possible to interact with it content.\r\n * - Focus mode is applied when user focuses the element.\r\n * - Noop mode - the component won't react to the user interaction.\r\n *\r\n * @stacked-example(Available Triggers, context-menu/context-menu-modes.component.html)\r\n *\r\n * Noop mode is especially useful when you need to control Popover programmatically, for example show/hide\r\n * as a result of some third-party action, like HTTP request or validation check:\r\n *\r\n * @stacked-example(Manual Control, context-menu/context-menu-noop.component)\r\n *\r\n * @stacked-example(Manual Control, context-menu/context-menu-right-click.component)\r\n * */\r\nexport declare class NbContextMenuDirective implements NbDynamicOverlayController, OnChanges, AfterViewInit, OnDestroy, OnInit {\r\n    private hostRef;\r\n    private menuService;\r\n    private dynamicOverlayHandler;\r\n    contextMenuHost: boolean;\r\n    /**\r\n     * Position will be calculated relatively host element based on the position.\r\n     * Can be top, right, bottom and left.\r\n     * */\r\n    get position(): NbPosition;\r\n    set position(value: NbPosition);\r\n    _position: NbPosition;\r\n    /**\r\n     * Container position will be changes automatically based on this strategy if container can't fit view port.\r\n     * Set this property to any falsy value if you want to disable automatically adjustment.\r\n     * Available values: clockwise, counterclockwise.\r\n     * */\r\n    adjustment: NbAdjustment;\r\n    /**\r\n     * Set NbMenu tag, which helps identify menu when working with NbMenuService.\r\n     * */\r\n    get tag(): string;\r\n    set tag(value: string);\r\n    _tag: string;\r\n    /**\r\n     * Basic menu items, will be passed to the internal NbMenuComponent.\r\n     * */\r\n    get items(): NbMenuItem[];\r\n    set items(items: NbMenuItem[]);\r\n    /**\r\n     * Describes when the container will be shown.\r\n     * Available options: `click`, `hover`, `hint`, `focus` and `noop`\r\n     * */\r\n    trigger: NbTrigger;\r\n    static ngAcceptInputType_trigger: NbTriggerValues;\r\n    get contextMenuClass(): string;\r\n    set contextMenuClass(value: string);\r\n    _contextMenuClass: string;\r\n    protected ref: NbOverlayRef;\r\n    protected container: ComponentRef<any>;\r\n    protected positionStrategy: NbAdjustableConnectedPositionStrategy;\r\n    protected overlayConfig: NbOverlayConfig;\r\n    protected overlayContext: NbContextMenuContext;\r\n    protected destroy$: Subject<void>;\r\n    private _items;\r\n    private dynamicOverlay;\r\n    constructor(hostRef: ElementRef, menuService: NbMenuService, dynamicOverlayHandler: NbDynamicOverlayHandler);\r\n    ngOnInit(): void;\r\n    ngOnChanges(): void;\r\n    ngAfterViewInit(): void;\r\n    rebuild(): void;\r\n    show(): void;\r\n    hide(): void;\r\n    toggle(): void;\r\n    ngOnDestroy(): void;\r\n    protected configureDynamicOverlay(): NbDynamicOverlayHandler;\r\n    private validateItems;\r\n    private subscribeOnItemClick;\r\n    protected updateOverlayContext(): void;\r\n}\r\n"]}