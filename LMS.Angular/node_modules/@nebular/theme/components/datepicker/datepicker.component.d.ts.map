{"version":3,"file":"datepicker.component.d.ts","sources":["datepicker.component.d.ts"],"names":[],"mappingssourcesContent":["import { ComponentFactoryResolver, ComponentRef, OnChanges, ElementRef, EventEmitter, OnDestroy, Type, AfterViewInit, OnInit, SimpleChanges } from '@angular/core';\r\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { NbOverlayRef } from '../cdk/overlay/mapping';\r\nimport { NbAdjustableConnectedPositionStrategy, NbPositionBuilderService } from '../cdk/overlay/overlay-position';\r\nimport { NbOverlayService } from '../cdk/overlay/overlay-service';\r\nimport { NbTriggerStrategy, NbTriggerStrategyBuilderService } from '../cdk/overlay/overlay-trigger';\r\nimport { NbDatepickerContainerComponent } from './datepicker-container.component';\r\nimport { NbCalendarRange, NbCalendarRangeComponent } from '../calendar/calendar-range.component';\r\nimport { NbCalendarComponent } from '../calendar/calendar.component';\r\nimport { NbCalendarCell, NbCalendarSize, NbCalendarViewMode, NbCalendarSizeValues, NbCalendarViewModeValues } from '../calendar-kit/model';\r\nimport { NbDateService } from '../calendar-kit/services/date.service';\r\nimport { NbDatepicker, NbPickerValidatorConfig } from './datepicker.directive';\r\nimport { NbBooleanInput } from '../helpers';\r\n/**\r\n * The `NbBasePicker` component concentrates overlay manipulation logic.\r\n * */\r\nexport declare abstract class NbBasePicker<D, T, P> extends NbDatepicker<T> {\r\n    protected overlay: NbOverlayService;\r\n    protected positionBuilder: NbPositionBuilderService;\r\n    protected triggerStrategyBuilder: NbTriggerStrategyBuilderService;\r\n    protected cfr: ComponentFactoryResolver;\r\n    protected dateService: NbDateService<D>;\r\n    protected dateServiceOptions: any;\r\n    /**\r\n     * Datepicker date format. Can be used only with date adapters (moment, date-fns) since native date\r\n     * object doesn't support formatting.\r\n     * */\r\n    abstract format: string;\r\n    /**\r\n     * Defines if we should render previous and next months\r\n     * in the current month view.\r\n     * */\r\n    abstract boundingMonth: boolean;\r\n    /**\r\n     * Defines starting view for calendar.\r\n     * */\r\n    abstract startView: NbCalendarViewMode;\r\n    /**\r\n     * Minimum available date for selection.\r\n     * */\r\n    abstract min: T;\r\n    /**\r\n     * Maximum available date for selection.\r\n     * */\r\n    abstract max: T;\r\n    /**\r\n     * Predicate that decides which cells will be disabled.\r\n     * */\r\n    abstract filter: (T: any) => boolean;\r\n    /**\r\n     * Custom day cell component. Have to implement `NbCalendarCell` interface.\r\n     * */\r\n    abstract dayCellComponent: Type<NbCalendarCell<D, T>>;\r\n    /**\r\n     * Custom month cell component. Have to implement `NbCalendarCell` interface.\r\n     * */\r\n    abstract monthCellComponent: Type<NbCalendarCell<D, T>>;\r\n    /**\r\n     * Custom year cell component. Have to implement `NbCalendarCell` interface.\r\n     * */\r\n    abstract yearCellComponent: Type<NbCalendarCell<D, T>>;\r\n    /**\r\n     * Size of the calendar and entire components.\r\n     * Can be 'medium' which is default or 'large'.\r\n     * */\r\n    abstract size: NbCalendarSize;\r\n    /**\r\n     * Depending on this date a particular month is selected in the calendar\r\n     */\r\n    abstract visibleDate: D;\r\n    /**\r\n     * Hide picker when a date or a range is selected, `true` by default\r\n     * @type {boolean}\r\n     */\r\n    abstract hideOnSelect: boolean;\r\n    /**\r\n     * Determines should we show calendar navigation or not.\r\n     * @type {boolean}\r\n     */\r\n    abstract showNavigation: boolean;\r\n    /**\r\n     * Sets symbol used as a header for week numbers column\r\n     * */\r\n    abstract weekNumberSymbol: string;\r\n    /**\r\n     * Determines should we show week numbers column.\r\n     * False by default.\r\n     * */\r\n    abstract showWeekNumber: boolean;\r\n    /**\r\n     * Calendar component class that has to be instantiated inside overlay.\r\n     * */\r\n    protected abstract pickerClass: Type<P>;\r\n    /**\r\n     * Overlay reference object.\r\n     * */\r\n    protected ref: NbOverlayRef;\r\n    /**\r\n     * Datepicker container that contains instantiated picker.\r\n     * */\r\n    protected container: ComponentRef<NbDatepickerContainerComponent>;\r\n    /**\r\n     * Positioning strategy used by overlay.\r\n     * */\r\n    protected positionStrategy: NbAdjustableConnectedPositionStrategy;\r\n    /**\r\n     * Trigger strategy used by overlay\r\n     * */\r\n    protected triggerStrategy: NbTriggerStrategy;\r\n    /**\r\n     * HTML input reference to which datepicker connected.\r\n     * */\r\n    protected hostRef: ElementRef;\r\n    protected init$: ReplaySubject<void>;\r\n    /**\r\n     * Stream of picker changes. Required to be the subject because picker hides and shows and picker\r\n     * change stream becomes recreated.\r\n     * */\r\n    protected onChange$: Subject<T>;\r\n    /**\r\n     * Reference to the picker instance itself.\r\n     * */\r\n    protected pickerRef: ComponentRef<any>;\r\n    protected overlayOffset: number;\r\n    protected destroy$: Subject<void>;\r\n    /**\r\n     * Queue contains the last value that was applied to the picker when it was hidden.\r\n     * This value will be passed to the picker as soon as it shown.\r\n     * */\r\n    protected queue: T | undefined;\r\n    protected blur$: Subject<void>;\r\n    protected constructor(overlay: NbOverlayService, positionBuilder: NbPositionBuilderService, triggerStrategyBuilder: NbTriggerStrategyBuilderService, cfr: ComponentFactoryResolver, dateService: NbDateService<D>, dateServiceOptions: any);\r\n    /**\r\n     * Returns picker instance.\r\n     * */\r\n    get picker(): any;\r\n    /**\r\n     * Stream of picker value changes.\r\n     * */\r\n    get valueChange(): Observable<T>;\r\n    get isShown(): boolean;\r\n    get init(): Observable<void>;\r\n    /**\r\n     * Emits when datepicker looses focus.\r\n     */\r\n    get blur(): Observable<void>;\r\n    protected abstract get pickerValueChange(): Observable<T>;\r\n    /**\r\n     * Datepicker knows nothing about host html input element.\r\n     * So, attach method attaches datepicker to the host input element.\r\n     * */\r\n    attach(hostRef: ElementRef): void;\r\n    getValidatorConfig(): NbPickerValidatorConfig<T>;\r\n    show(): void;\r\n    shouldHide(): boolean;\r\n    hide(): void;\r\n    protected abstract writeQueue(): any;\r\n    protected createOverlay(): void;\r\n    protected openDatepicker(): void;\r\n    protected createPositionStrategy(): NbAdjustableConnectedPositionStrategy;\r\n    protected subscribeOnPositionChange(): void;\r\n    protected createTriggerStrategy(): NbTriggerStrategy;\r\n    protected subscribeOnTriggers(): void;\r\n    protected instantiatePicker(): void;\r\n    /**\r\n     * Subscribes on picker value changes and emit data through this.onChange$ subject.\r\n     * */\r\n    protected subscribeOnValueChange(): void;\r\n    protected patchWithInputs(): void;\r\n    protected checkFormat(): void;\r\n}\r\nexport declare class NbBasePickerComponent<D, T, P> extends NbBasePicker<D, T, P> implements OnInit, OnChanges, AfterViewInit, OnDestroy {\r\n    /**\r\n     * Datepicker date format. Can be used only with date adapters (moment, date-fns) since native date\r\n     * object doesn't support formatting.\r\n     * */\r\n    format: string;\r\n    /**\r\n     * Defines if we should render previous and next months\r\n     * in the current month view.\r\n     * */\r\n    boundingMonth: boolean;\r\n    /**\r\n     * Defines starting view for calendar.\r\n     * */\r\n    startView: NbCalendarViewMode;\r\n    static ngAcceptInputType_startView: NbCalendarViewModeValues;\r\n    /**\r\n     * Minimum available date for selection.\r\n     * */\r\n    min: T;\r\n    /**\r\n     * Maximum available date for selection.\r\n     * */\r\n    max: T;\r\n    /**\r\n     * Predicate that decides which cells will be disabled.\r\n     * */\r\n    filter: (T: any) => boolean;\r\n    /**\r\n     * Custom day cell component. Have to implement `NbCalendarCell` interface.\r\n     * */\r\n    dayCellComponent: Type<NbCalendarCell<D, T>>;\r\n    /**\r\n     * Custom month cell component. Have to implement `NbCalendarCell` interface.\r\n     * */\r\n    monthCellComponent: Type<NbCalendarCell<D, T>>;\r\n    /**\r\n     * Custom year cell component. Have to implement `NbCalendarCell` interface.\r\n     * */\r\n    yearCellComponent: Type<NbCalendarCell<D, T>>;\r\n    /**\r\n     * Size of the calendar and entire components.\r\n     * Can be 'medium' which is default or 'large'.\r\n     * */\r\n    size: NbCalendarSize;\r\n    static ngAcceptInputType_size: NbCalendarSizeValues;\r\n    /**\r\n     * Depending on this date a particular month is selected in the calendar\r\n     */\r\n    visibleDate: D;\r\n    /**\r\n     * Hide picker when a date or a range is selected, `true` by default\r\n     * @type {boolean}\r\n     */\r\n    hideOnSelect: boolean;\r\n    /**\r\n     * Determines should we show calendars navigation or not.\r\n     * @type {boolean}\r\n     */\r\n    showNavigation: boolean;\r\n    /**\r\n     * Sets symbol used as a header for week numbers column\r\n     * */\r\n    weekNumberSymbol: string;\r\n    /**\r\n     * Determines should we show week numbers column.\r\n     * False by default.\r\n     * */\r\n    get showWeekNumber(): boolean;\r\n    set showWeekNumber(value: boolean);\r\n    protected _showWeekNumber: boolean;\r\n    static ngAcceptInputType_showWeekNumber: NbBooleanInput;\r\n    /**\r\n     * Determines picker overlay offset (in pixels).\r\n     * */\r\n    overlayOffset: number;\r\n    constructor(document: any, positionBuilder: NbPositionBuilderService, triggerStrategyBuilder: NbTriggerStrategyBuilderService, overlay: NbOverlayService, cfr: ComponentFactoryResolver, dateService: NbDateService<D>, dateServiceOptions: any);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    protected pickerClass: Type<P>;\r\n    protected get pickerValueChange(): Observable<T>;\r\n    get value(): T;\r\n    set value(value: T);\r\n    protected writeQueue(): void;\r\n}\r\n/**\r\n * The DatePicker components itself.\r\n * Provides a proxy to `NbCalendar` options as well as custom picker options.\r\n */\r\nexport declare class NbDatepickerComponent<D> extends NbBasePickerComponent<D, D, NbCalendarComponent<D>> {\r\n    protected pickerClass: Type<NbCalendarComponent<D>>;\r\n    /**\r\n     * Date which will be rendered as selected.\r\n     * */\r\n    set date(date: D);\r\n    /**\r\n     * Emits date when selected.\r\n     * */\r\n    get dateChange(): EventEmitter<D>;\r\n    get value(): D;\r\n    set value(date: D);\r\n    protected get pickerValueChange(): Observable<D>;\r\n    protected writeQueue(): void;\r\n}\r\n/**\r\n * The RangeDatePicker components itself.\r\n * Provides a proxy to `NbCalendarRange` options as well as custom picker options.\r\n */\r\nexport declare class NbRangepickerComponent<D> extends NbBasePickerComponent<D, NbCalendarRange<D>, NbCalendarRangeComponent<D>> {\r\n    protected pickerClass: Type<NbCalendarRangeComponent<D>>;\r\n    /**\r\n     * Range which will be rendered as selected.\r\n     * */\r\n    set range(range: NbCalendarRange<D>);\r\n    /**\r\n     * Emits range when start selected and emits again when end selected.\r\n     * */\r\n    get rangeChange(): EventEmitter<NbCalendarRange<D>>;\r\n    get value(): NbCalendarRange<D>;\r\n    set value(range: NbCalendarRange<D>);\r\n    protected get pickerValueChange(): Observable<NbCalendarRange<D>>;\r\n    shouldHide(): boolean;\r\n    protected writeQueue(): void;\r\n}\r\n"]}