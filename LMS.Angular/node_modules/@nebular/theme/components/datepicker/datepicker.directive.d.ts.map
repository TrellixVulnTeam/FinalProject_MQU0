{"version":3,"file":"datepicker.directive.d.ts","sources":["datepicker.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, InjectionToken, OnDestroy, ChangeDetectorRef, Type } from '@angular/core';\r\nimport { ControlValueAccessor, ValidationErrors, Validator, ValidatorFn } from '@angular/forms';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { NbDateService } from '../calendar-kit/services/date.service';\r\n/**\r\n * The `NbDatepickerAdapter` instances provide way how to parse, format and validate\r\n * different date types.\r\n * */\r\nexport declare abstract class NbDatepickerAdapter<D> {\r\n    /**\r\n     * Picker component class.\r\n     * */\r\n    abstract picker: Type<any>;\r\n    /**\r\n     * Parse date string according to the format.\r\n     * */\r\n    abstract parse(value: string, format: string): D;\r\n    /**\r\n     * Format date according to the format.\r\n     * */\r\n    abstract format(value: D, format: string): string;\r\n    /**\r\n     * Validates date string according to the passed format.\r\n     * */\r\n    abstract isValid(value: string, format: string): boolean;\r\n}\r\n/**\r\n * Validators config that will be used by form control to perform proper validation.\r\n * */\r\nexport interface NbPickerValidatorConfig<D> {\r\n    /**\r\n     * Minimum date available in picker.\r\n     * */\r\n    min: D;\r\n    /**\r\n     * Maximum date available in picker.\r\n     * */\r\n    max: D;\r\n    /**\r\n     * Predicate that determines is value available for picking.\r\n     * */\r\n    filter: (D: any) => boolean;\r\n}\r\n/**\r\n * Datepicker is an control that can pick any values anyway.\r\n * It has to be bound to the datepicker directive through nbDatepicker input.\r\n * */\r\nexport declare abstract class NbDatepicker<T> {\r\n    /**\r\n     * HTML input element date format.\r\n     * */\r\n    abstract format: string;\r\n    abstract get value(): T;\r\n    abstract set value(value: T);\r\n    abstract get valueChange(): Observable<T>;\r\n    abstract get init(): Observable<void>;\r\n    /**\r\n     * Attaches datepicker to the native input element.\r\n     * */\r\n    abstract attach(hostRef: ElementRef): any;\r\n    /**\r\n     * Returns validator configuration based on the input properties.\r\n     * */\r\n    abstract getValidatorConfig(): NbPickerValidatorConfig<T>;\r\n    abstract show(): any;\r\n    abstract hide(): any;\r\n    abstract shouldHide(): boolean;\r\n    abstract get isShown(): boolean;\r\n    abstract get blur(): Observable<void>;\r\n}\r\nexport declare const NB_DATE_ADAPTER: InjectionToken<NbDatepickerAdapter<any>>;\r\nexport declare const NB_DATE_SERVICE_OPTIONS: InjectionToken<unknown>;\r\n/**\r\n * The `NbDatepickerDirective` is form control that gives you ability to select dates and ranges. The datepicker\r\n * is shown when input receives a `focus` event.\r\n *\r\n * ```html\r\n * <input [nbDatepicker]=\"datepicker\">\r\n * <nb-datepicker #datepicker></nb-datepicker>\r\n * ```\r\n *\r\n * @stacked-example(Showcase, datepicker/datepicker-showcase.component)\r\n *\r\n * ### Installation\r\n *\r\n * Import `NbDatepickerModule.forRoot()` to your root module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbDatepickerModule.forRoot(),\r\n *   ],\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n * And `NbDatepickerModule` to your feature module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbDatepickerModule,\r\n *   ],\r\n * })\r\n *\r\n * export class PageModule { }\r\n * ```\r\n * ### Usage\r\n *\r\n * If you want to use range selection, you have to use `NbRangepickerComponent` instead:\r\n *\r\n * ```html\r\n * <input [nbDatepicker]=\"rangepicker\">\r\n * <nb-rangepicker #rangepicker></nb-rangepicker>\r\n * ```\r\n *\r\n * Both range and date pickers support all parameters as calendar, so, check `NbCalendarComponent` for additional\r\n * info.\r\n *\r\n * @stacked-example(Range showcase, datepicker/rangepicker-showcase.component)\r\n *\r\n * Datepicker is the form control so it can be bound with angular forms through ngModel and form controls.\r\n *\r\n * @stacked-example(Forms, datepicker/datepicker-forms.component)\r\n *\r\n * `NbDatepickerDirective` may be validated using `min` and `max` dates passed to the datepicker.\r\n * And `filter` predicate that receives date object and has to return a boolean value.\r\n *\r\n * @stacked-example(Validation, datepicker/datepicker-validation.component)\r\n *\r\n * If you need to pick a time along with the date, you can use nb-date-timepicker\r\n *\r\n * ```html\r\n * <input nbInput placeholder=\"Pick Date\" [nbDatepicker]=\"dateTimePicker\">\r\n * <nb-date-timepicker withSeconds #dateTimePicker></nb-date-timepicker>\r\n * ```\r\n * @stacked-example(Date timepicker, datepicker/date-timepicker-showcase.component)\r\n *\r\n * A single column picker with options value as time and minute, so users wonâ€™t be able to pick\r\n * hours and minutes individually.\r\n *\r\n * @stacked-example(Date timepicker single column, datepicker/date-timepicker-single-column.component)\r\n\r\n * The `NbDatepickerComponent` supports date formatting:\r\n *\r\n * ```html\r\n * <input [nbDatepicker]=\"datepicker\">\r\n * <nb-datepicker #datepicker format=\"MM\\dd\\yyyy\"></nb-datepicker>\r\n * ```\r\n * <span id=\"formatting-issue\"></span>\r\n * ## Formatting Issue\r\n *\r\n * By default, datepicker uses angulars `LOCALE_ID` token for localization and `DatePipe` for dates formatting.\r\n * And native `Date.parse(...)` for dates parsing. But native `Date.parse` function doesn't support formats.\r\n * To provide custom formatting you have to use one of the following packages:\r\n *\r\n * - `@nebular/moment` - provides moment date adapter that uses moment for date objects. This means datepicker than\r\n * will operate only moment date objects. If you want to use it you have to install it: `npm i @nebular/moment`, and\r\n * import `NbMomentDateModule` from this package.\r\n *\r\n * - `@nebular/date-fns` - adapter for popular date-fns library. This way is preferred if you need only date formatting.\r\n * Because date-fns is treeshakable, tiny and operates native date objects. If you want to use it you have to\r\n * install it: `npm i @nebular/date-fns`, and import `NbDateFnsDateModule` from this package.\r\n *\r\n * ### NbDateFnsDateModule\r\n *\r\n * Format is required when using `NbDateFnsDateModule`. You can set it via `format` input on datepicker component:\r\n * ```html\r\n * <nb-datepicker format=\"dd.MM.yyyy\"></nb-datepicker>\r\n * ```\r\n * Also format can be set globally with `NbDateFnsDateModule.forRoot({ format: 'dd.MM.yyyy' })` and\r\n * `NbDateFnsDateModule.forChild({ format: 'dd.MM.yyyy' })` methods.\r\n *\r\n * Please note to use some of the formatting tokens you also need to pass\r\n * `{ useAdditionalWeekYearTokens: true, useAdditionalDayOfYearTokens: true }` to date-fns parse and format functions.\r\n * You can configure options passed this functions by setting `formatOptions` and\r\n * `parseOptions` of options object passed to `NbDateFnsDateModule.forRoot` and `NbDateFnsDateModule.forChild` methods.\r\n * ```ts\r\n * NbDateFnsDateModule.forRoot({\r\n *   parseOptions: { useAdditionalWeekYearTokens: true, useAdditionalDayOfYearTokens: true },\r\n *   formatOptions: { useAdditionalWeekYearTokens: true, useAdditionalDayOfYearTokens: true },\r\n * })\r\n * ```\r\n * Further info on `date-fns` formatting tokens could be found at\r\n * [date-fns docs](https://date-fns.org/v2.0.0-alpha.27/docs/Unicode-Tokens).\r\n *\r\n * You can also use `parseOptions` and `formatOptions` to provide locale.\r\n * ```ts\r\n * import { eo } from 'date-fns/locale';\r\n *\r\n * @NgModule({\r\n *   imports: [\r\n *     NbDateFnsDateModule.forRoot({\r\n *       parseOptions: { locale: eo },\r\n *       formatOptions: { locale: eo },\r\n *     }),\r\n *   ],\r\n * })\r\n * ```\r\n *\r\n * @styles\r\n *\r\n * datepicker-background-color:\r\n * datepicker-border-color:\r\n * datepicker-border-style:\r\n * datepicker-border-width:\r\n * datepicker-border-radius:\r\n * datepicker-shadow:\r\n * */\r\nexport declare class NbDatepickerDirective<D> implements OnDestroy, ControlValueAccessor, Validator {\r\n    protected document: any;\r\n    protected datepickerAdapters: NbDatepickerAdapter<D>[];\r\n    protected hostRef: ElementRef;\r\n    protected dateService: NbDateService<D>;\r\n    protected changeDetector: ChangeDetectorRef;\r\n    /**\r\n     * Provides datepicker component.\r\n     * */\r\n    set setPicker(picker: NbDatepicker<D>);\r\n    /**\r\n     * Datepicker adapter.\r\n     * */\r\n    protected datepickerAdapter: NbDatepickerAdapter<D>;\r\n    /**\r\n     * Datepicker instance.\r\n     * */\r\n    protected picker: NbDatepicker<D>;\r\n    protected destroy$: Subject<void>;\r\n    protected isDatepickerReady: boolean;\r\n    protected queue: D | undefined;\r\n    protected onChange: (D: any) => void;\r\n    protected onTouched: () => void;\r\n    /**\r\n     * Form control validators will be called in validators context, so, we need to bind them.\r\n     * */\r\n    protected validator: ValidatorFn;\r\n    constructor(document: any, datepickerAdapters: NbDatepickerAdapter<D>[], hostRef: ElementRef, dateService: NbDateService<D>, changeDetector: ChangeDetectorRef);\r\n    /**\r\n     * Returns html input element.\r\n     * */\r\n    get input(): HTMLInputElement;\r\n    /**\r\n     * Returns host input value.\r\n     * */\r\n    get inputValue(): string;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Writes value in picker and html input element.\r\n     * */\r\n    writeValue(value: D): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    /**\r\n     * Form control validation based on picker validator config.\r\n     * */\r\n    validate(): ValidationErrors | null;\r\n    /**\r\n     * Hides picker, focuses the input\r\n     */\r\n    protected hidePicker(): void;\r\n    /**\r\n     * Validates that we can parse value correctly.\r\n     * */\r\n    protected parseValidator(): ValidationErrors | null;\r\n    /**\r\n     * Validates passed value is greater than min.\r\n     * */\r\n    protected minValidator(): ValidationErrors | null;\r\n    /**\r\n     * Validates passed value is smaller than max.\r\n     * */\r\n    protected maxValidator(): ValidationErrors | null;\r\n    /**\r\n     * Validates passed value satisfy the filter.\r\n     * */\r\n    protected filterValidator(): ValidationErrors | null;\r\n    /**\r\n     * Chooses datepicker adapter based on passed picker component.\r\n     * */\r\n    protected chooseDatepickerAdapter(): void;\r\n    /**\r\n     * Attaches picker to the host input element and subscribes on value changes.\r\n     * */\r\n    protected setupPicker(): void;\r\n    protected writePicker(value: D): void;\r\n    protected writeInput(value: D): void;\r\n    /**\r\n     * Validates if no datepicker adapter provided.\r\n     * */\r\n    protected noDatepickerAdapterProvided(): boolean;\r\n    protected subscribeOnInputChange(): void;\r\n    /**\r\n     * Parses input value and write if it isn't null.\r\n     * */\r\n    protected handleInputChange(value: string): void;\r\n    protected parseInputValue(value: any): D | null;\r\n}\r\n"]}