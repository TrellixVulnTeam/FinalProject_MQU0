{"version":3,"file":"dialog.service.d.ts","sources":["dialog.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { ComponentFactoryResolver, Injector, TemplateRef, Type } from '@angular/core';\r\nimport { NbComponentPortal, NbOverlayRef, NbScrollStrategy, NbTemplatePortal } from '../cdk/overlay/mapping';\r\nimport { NbGlobalPositionStrategy, NbPositionBuilderService } from '../cdk/overlay/overlay-position';\r\nimport { NbOverlayService } from '../cdk/overlay/overlay-service';\r\nimport { NbDialogConfig } from './dialog-config';\r\nimport { NbDialogRef } from './dialog-ref';\r\nimport { NbDialogContainerComponent } from './dialog-container';\r\n/**\r\n * The `NbDialogService` helps to open dialogs.\r\n *\r\n * @stacked-example(Showcase, dialog/dialog-showcase.component)\r\n *\r\n * A new dialog is opened by calling the `open` method with a component to be loaded and an optional configuration.\r\n * `open` method will return `NbDialogRef` that can be used for the further manipulations.\r\n *\r\n * ### Installation\r\n *\r\n * Import `NbDialogModule.forRoot()` to your app module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbDialogModule.forRoot(config),\r\n *   ],\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n *\r\n * If you are using it in a lazy loaded module than you have to install it with `NbDialogModule.forChild()`:\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbDialogModule.forChild(config),\r\n *   ],\r\n * })\r\n * export class LazyLoadedModule { }\r\n * ```\r\n *\r\n * ### Usage\r\n *\r\n * ```ts\r\n * const dialogRef = this.dialogService.open(MyDialogComponent, { ... });\r\n * ```\r\n *\r\n * `NbDialogRef` gives capability access reference to the rendered dialog component,\r\n * destroy dialog and some other options described below.\r\n *\r\n * Also, you can inject `NbDialogRef` in dialog component.\r\n *\r\n * ```ts\r\n * this.dialogService.open(MyDialogComponent, { ... });\r\n *\r\n * // my-dialog.component.ts\r\n * constructor(protected dialogRef: NbDialogRef) {\r\n * }\r\n *\r\n * close() {\r\n *   this.dialogRef.close();\r\n * }\r\n * ```\r\n *\r\n * Instead of component you can create dialog from TemplateRef:\r\n *\r\n * @stacked-example(Template ref, dialog/dialog-template.component)\r\n *\r\n * The dialog may return result through `NbDialogRef`. Calling component can receive this result with `onClose`\r\n * stream of `NbDialogRef`.\r\n *\r\n * @stacked-example(Result, dialog/dialog-result.component)\r\n *\r\n * ### Configuration\r\n *\r\n * As we mentioned above, `open` method of the `NbDialogService` may receive optional configuration options.\r\n * Also, you can provide global dialogs configuration through `NbDialogModule.forRoot({ ... })`.\r\n *\r\n * This config may contain the following:\r\n *\r\n * `context` - both, template and component may receive data through `config.context` property.\r\n * For components, this data will be assigned through inputs.\r\n * For templates, you can access it inside template as $implicit.\r\n *\r\n * ```ts\r\n * this.dialogService.open(template, { context: 'pass data in template' });\r\n * ```\r\n *\r\n * ```html\r\n * <ng-template let-some-additional-data>\r\n *   {{ some-additional-data }}\r\n * <ng-template/>\r\n * ```\r\n *\r\n * `hasBackdrop` - determines is service have to render backdrop under the dialog.\r\n * Default is true.\r\n * @stacked-example(Backdrop, dialog/dialog-has-backdrop.component)\r\n *\r\n * `closeOnBackdropClick` - close dialog on backdrop click if true.\r\n * Default is true.\r\n * @stacked-example(Backdrop click, dialog/dialog-backdrop-click.component)\r\n *\r\n * `closeOnEsc` - close dialog on escape button on the keyboard.\r\n * Default is true.\r\n * @stacked-example(Escape hit, dialog/dialog-esc.component)\r\n *\r\n * `hasScroll` - Disables scroll on content under dialog if true and does nothing otherwise.\r\n * Default is false.\r\n * Please, open dialogs in the separate window and try to scroll.\r\n * @stacked-example(Scroll, dialog/dialog-scroll.component)\r\n *\r\n * `autoFocus` - Focuses dialog automatically after open if true. It's useful to prevent misclicks on\r\n * trigger elements and opening multiple dialogs.\r\n * Default is true.\r\n *\r\n * As you can see, if you open dialog with auto focus dialog will focus first focusable element\r\n * or just blur previously focused automatically.\r\n * Otherwise, without auto focus, the focus will stay on the previously focused element.\r\n * Please, open dialogs in the separate window and try to click on the button without focus\r\n * and then hit space any times. Multiple same dialogs will be opened.\r\n * @stacked-example(Auto focus, dialog/dialog-auto-focus.component)\r\n * */\r\nexport declare class NbDialogService {\r\n    protected document: any;\r\n    protected globalConfig: any;\r\n    protected positionBuilder: NbPositionBuilderService;\r\n    protected overlay: NbOverlayService;\r\n    protected injector: Injector;\r\n    protected cfr: ComponentFactoryResolver;\r\n    constructor(document: any, globalConfig: any, positionBuilder: NbPositionBuilderService, overlay: NbOverlayService, injector: Injector, cfr: ComponentFactoryResolver);\r\n    /**\r\n     * Opens new instance of the dialog, may receive optional config.\r\n     * */\r\n    open<T>(content: Type<T> | TemplateRef<T>, userConfig?: Partial<NbDialogConfig<Partial<T> | string>>): NbDialogRef<T>;\r\n    protected createOverlay(config: NbDialogConfig): NbOverlayRef;\r\n    protected createPositionStrategy(): NbGlobalPositionStrategy;\r\n    protected createScrollStrategy(hasScroll: boolean): NbScrollStrategy;\r\n    protected createContainer(config: NbDialogConfig, overlayRef: NbOverlayRef): NbDialogContainerComponent;\r\n    protected createContent<T>(config: NbDialogConfig, content: Type<T> | TemplateRef<T>, container: NbDialogContainerComponent, dialogRef: NbDialogRef<T>): void;\r\n    protected createTemplatePortal<T>(config: NbDialogConfig, content: TemplateRef<T>, dialogRef: NbDialogRef<T>): NbTemplatePortal;\r\n    /**\r\n     * We're creating portal with custom injector provided through config or using global injector.\r\n     * This approach provides us capability inject `NbDialogRef` in dialog component.\r\n     * */\r\n    protected createComponentPortal<T>(config: NbDialogConfig, content: Type<T>, dialogRef: NbDialogRef<T>): NbComponentPortal;\r\n    protected createInjector(config: NbDialogConfig): Injector;\r\n    protected registerCloseListeners<T>(config: NbDialogConfig, overlayRef: NbOverlayRef, dialogRef: NbDialogRef<T>): void;\r\n}\r\n"]}