{"version":3,"file":"layout.component.d.ts","sources":["layout.component.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { AfterViewInit, ElementRef, OnDestroy, Renderer2, ViewContainerRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { NbBooleanInput } from '../helpers';\r\nimport { NbThemeService } from '../../services/theme.service';\r\nimport { NbSpinnerService } from '../../services/spinner.service';\r\nimport { NbLayoutDirectionService } from '../../services/direction.service';\r\nimport { NbRestoreScrollTopHelper } from './restore-scroll-top.service';\r\nimport { NbScrollPosition, NbLayoutScrollService } from '../../services/scroll.service';\r\nimport { NbLayoutDimensions, NbLayoutRulerService } from '../../services/ruler.service';\r\nimport { NbOverlayContainerAdapter } from '../cdk/adapter/overlay-container-adapter';\r\n/**\r\n * Layout container component.\r\n * When using with Nebular Theme System it is required that all child components should be placed inside.\r\n *\r\n * Basic example of two column layout with header:\r\n *\r\n * @stacked-example(Showcase, layout/layout-showcase.component)\r\n *\r\n * Can contain the following components inside:\r\n *\r\n * ```html\r\n * <nb-layout>\r\n *  <nb-layout-header></nb-layout-header>\r\n *  <nb-layout-footer></nb-layout-footer>\r\n *  <nb-layout-column></nb-layout-column>\r\n *  <nb-sidebar></nb-sidebar>\r\n * </nb-layout>\r\n * ```\r\n * ### Installation\r\n *\r\n * Import `NbLayoutModule` to your app module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbLayoutModule,\r\n *   ],\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n * ### Usage\r\n * By default the layout fills up the whole view-port.\r\n * The window scrollbars are disabled on the body and moved inside of the nb-layout, so that the scrollbars\r\n * won't mess with the fixed nb-header.\r\n *\r\n * The child components are projected into a flexible layout structure allowing to adjust the layout behavior\r\n * based on the settings provided.\r\n *\r\n * The layout content (columns) becomes centered when the window width is more than\r\n * the value specified in the theme variable `layout-content-width`.\r\n *\r\n * The layout also contains the area on the very top (the first child of the nb-layout), which could be used\r\n * to dynamically append some components like modals or spinners/loaders\r\n * so that they are located on top of the elements hierarchy.\r\n * More details are under the `ThemeService` section.\r\n *\r\n * The layout component is also responsible for changing application themes.\r\n * It listens to the `themeChange` event and change a theme CSS class appended to body.\r\n * Based on the class appended, specific CSS-theme is applied to the application.\r\n * More details of the Theme System could be found here [Enabling Theme System](#/docs/concepts/theme-system)\r\n *\r\n * A simple layout with footer:\r\n *\r\n * @stacked-example(Layout With Footer, layout/layout-w-footer.component)\r\n *\r\n * It is possible to ask the layout to center the columns (notice: we added a `center` attribute\r\n * to the layout:\r\n *\r\n * ```html\r\n * <nb-layout center>\r\n *   <nb-layout-header>Awesome Company</nb-layout-header>\r\n *\r\n *   <nb-layout-column>\r\n *     Hello World!\r\n *   </nb-layout-column>\r\n *\r\n *   <nb-layout-footer>Contact us</nb-layout-footer>\r\n * </nb-layout>\r\n * ```\r\n *\r\n * @styles\r\n *\r\n * layout-background-color:\r\n * layout-text-color:\r\n * layout-text-font-family:\r\n * layout-text-font-size:\r\n * layout-text-font-weight:\r\n * layout-text-line-height:\r\n * layout-min-height:\r\n * layout-content-width:\r\n * layout-window-mode-min-width:\r\n * layout-window-mode-max-width:\r\n * layout-window-mode-background-color:\r\n * layout-window-mode-padding-top:\r\n * layout-window-shadow:\r\n * layout-padding:\r\n * layout-medium-padding:\r\n * layout-small-padding:\r\n * layout-scrollbar-background-color:\r\n * layout-scrollbar-color:\r\n * layout-scrollbar-width:\r\n */\r\nexport declare class NbLayoutComponent implements AfterViewInit, OnDestroy {\r\n    protected themeService: NbThemeService;\r\n    protected spinnerService: NbSpinnerService;\r\n    protected elementRef: ElementRef;\r\n    protected renderer: Renderer2;\r\n    protected window: any;\r\n    protected document: any;\r\n    protected platformId: Object;\r\n    protected layoutDirectionService: NbLayoutDirectionService;\r\n    protected scrollService: NbLayoutScrollService;\r\n    protected rulerService: NbLayoutRulerService;\r\n    protected scrollTop: NbRestoreScrollTopHelper;\r\n    protected overlayContainer: NbOverlayContainerAdapter;\r\n    protected scrollBlockClass: string;\r\n    protected isScrollBlocked: boolean;\r\n    protected scrollableContainerOverflowOldValue: string;\r\n    protected layoutPaddingOldValue: {\r\n        left: string;\r\n        right: string;\r\n    };\r\n    centerValue: boolean;\r\n    restoreScrollTopValue: boolean;\r\n    windowModeValue: boolean;\r\n    withScrollValue: boolean;\r\n    withSubheader: boolean;\r\n    /**\r\n     * Defines whether the layout columns will be centered after some width\r\n     * @param {boolean} val\r\n     */\r\n    set center(val: boolean);\r\n    static ngAcceptInputType_center: NbBooleanInput;\r\n    /**\r\n     * Defines whether the layout enters a 'window' mode, when the layout content (including sidebars and fixed header)\r\n     * becomes centered by width with a margin from the top of the screen, like a floating window.\r\n     * Automatically enables `withScroll` mode, as in the window mode scroll must be inside the layout and cannot be on\r\n     * window. (TODO: check this)\r\n     * @param {boolean} val\r\n     */\r\n    set windowMode(val: boolean);\r\n    static ngAcceptInputType_windowMode: NbBooleanInput;\r\n    /**\r\n     * Defines whether to move the scrollbars to layout or leave it at the body level.\r\n     * Automatically set to true when `windowMode` is enabled.\r\n     * @param {boolean} val\r\n     */\r\n    set withScroll(val: boolean);\r\n    static ngAcceptInputType_withScroll: NbBooleanInput;\r\n    /**\r\n     * Restores scroll to the top of the page after navigation\r\n     * @param {boolean} val\r\n     */\r\n    set restoreScrollTop(val: boolean);\r\n    static ngAcceptInputType_restoreScrollTop: NbBooleanInput;\r\n    veryTopRef: ViewContainerRef;\r\n    scrollableContainerRef: ElementRef<HTMLElement>;\r\n    layoutContainerRef: ElementRef<HTMLElement>;\r\n    protected afterViewInit$: BehaviorSubject<any>;\r\n    private destroy$;\r\n    constructor(themeService: NbThemeService, spinnerService: NbSpinnerService, elementRef: ElementRef, renderer: Renderer2, window: any, document: any, platformId: Object, layoutDirectionService: NbLayoutDirectionService, scrollService: NbLayoutScrollService, rulerService: NbLayoutRulerService, scrollTop: NbRestoreScrollTopHelper, overlayContainer: NbOverlayContainerAdapter);\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    onScroll($event: any): void;\r\n    onResize(event: any): void;\r\n    /**\r\n     * Returns scroll and client height/width\r\n     *\r\n     * Depending on the current scroll mode (`withScroll=true`) returns sizes from the body element\r\n     * or from the `.scrollable-container`\r\n     * @returns {NbLayoutDimensions}\r\n     */\r\n    getDimensions(): NbLayoutDimensions;\r\n    /**\r\n     * Returns scroll position of current scroll container.\r\n     *\r\n     * If `withScroll` = true, returns scroll position of the `.scrollable-container` element,\r\n     * otherwise - of the scrollable element of the window (which may be different depending of a browser)\r\n     *\r\n     * @returns {NbScrollPosition}\r\n     */\r\n    getScrollPosition(): NbScrollPosition;\r\n    protected registerAsOverlayContainer(): void;\r\n    protected unregisterAsOverlayContainer(): void;\r\n    private scroll;\r\n    protected blockScroll(): void;\r\n    private enableScroll;\r\n}\r\n/**\r\n * A container component which determines a content position inside of the layout.\r\n * The layout could contain unlimited columns (not including the sidebars).\r\n *\r\n * By default the columns are ordered from the left to the right,\r\n * but it's also possible to overwrite this behavior by setting a `left` attribute to the column,\r\n * moving it to the very first position:\r\n *\r\n * @stacked-example(Column Left, layout/layout-column-left.component)\r\n */\r\nexport declare class NbLayoutColumnComponent {\r\n    leftValue: boolean;\r\n    startValue: boolean;\r\n    /**\r\n     * Move the column to the very left position in the layout.\r\n     * @param {boolean} val\r\n     */\r\n    set left(val: boolean);\r\n    static ngAcceptInputType_left: NbBooleanInput;\r\n    /**\r\n     * Make column first in the layout.\r\n     * @param {boolean} val\r\n     */\r\n    set start(val: boolean);\r\n    static ngAcceptInputType_start: NbBooleanInput;\r\n}\r\n/**\r\n * Page header component.\r\n * Located on top of the page above the layout columns and sidebars.\r\n * Could be made `fixed` by setting the corresponding property. In the fixed mode the header becomes\r\n * sticky to the top of the nb-layout (to of the page). Here's an example:\r\n *\r\n * @stacked-example(Fixed Header, layout/layout-fixed-header.component)\r\n *\r\n * In a pair with sidebar it is possible to setup a configuration when header is placed on a side of the sidebar\r\n * and not on top of it. To achieve this simply put a `subheader` property to the header like this:\r\n * ```html\r\n * <nb-layout-header subheader></nb-layout-header>\r\n * ```\r\n * @stacked-example(Subheader, layout/layout-sidebar-subheader.component)\r\n * Note that in such configuration sidebar shadow is removed and header cannot be make `fixed`.\r\n *\r\n * Same way you can put both `fixed` and `clipped` headers adding creating a sub-header for your app:\r\n *\r\n * @stacked-example(Subheader, layout/layout-subheader.component)\r\n *\r\n * @styles\r\n *\r\n * header-background-color:\r\n * header-text-color:\r\n * header-text-font-family:\r\n * header-text-font-size:\r\n * header-text-font-weight:\r\n * header-text-line-height:\r\n * header-height:\r\n * header-padding:\r\n * header-shadow:\r\n */\r\nexport declare class NbLayoutHeaderComponent {\r\n    private layout;\r\n    fixedValue: boolean;\r\n    subheaderValue: boolean;\r\n    constructor(layout: NbLayoutComponent);\r\n    /**\r\n     * Makes the header sticky to the top of the nb-layout.\r\n     * @param {boolean} val\r\n     */\r\n    set fixed(val: boolean);\r\n    static ngAcceptInputType_fixed: NbBooleanInput;\r\n    /**\r\n     * Places header on a side of the sidebar, and not above.\r\n     * Disables fixed mode for this header and remove a shadow from the sidebar.\r\n     * @param {boolean} val\r\n     */\r\n    set subheader(val: boolean);\r\n    static ngAcceptInputType_subheader: NbBooleanInput;\r\n}\r\n/**\r\n * Page footer.\r\n * Located under the nb-layout content (specifically, under the columns).\r\n * Could be made `fixed`, becoming sticky to the bottom of the view port (window).\r\n *\r\n * @styles\r\n *\r\n * footer-background-color:\r\n * footer-text-color:\r\n * footer-text-font-family:\r\n * footer-text-font-size:\r\n * footer-text-font-weight:\r\n * footer-text-line-height:\r\n * footer-text-highlight-color:\r\n * footer-height:\r\n * footer-padding:\r\n * footer-divider-color:\r\n * footer-divider-style:\r\n * footer-divider-width:\r\n * footer-shadow:\r\n */\r\nexport declare class NbLayoutFooterComponent {\r\n    fixedValue: boolean;\r\n    /**\r\n     * Makes the footer sticky to the bottom of the window.\r\n     * @param {boolean} val\r\n     */\r\n    set fixed(val: boolean);\r\n    static ngAcceptInputType_fixed: NbBooleanInput;\r\n}\r\n"]}