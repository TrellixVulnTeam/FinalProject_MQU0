{"version":3,"file":"infinite-list.directive.d.ts","sources":["infinite-list.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnDestroy, AfterViewInit, QueryList } from '@angular/core';\r\nimport { NbBooleanInput } from '../helpers';\r\nimport { NbLayoutScrollService } from '../../services/scroll.service';\r\nimport { NbLayoutRulerService } from '../../services/ruler.service';\r\nimport { NbListItemComponent } from './list.component';\r\nexport declare class NbScrollableContainerDimentions {\r\n    scrollTop: number;\r\n    scrollHeight: number;\r\n    clientHeight: number;\r\n}\r\n/**\r\n * Infinite List Directive\r\n *\r\n * ```html\r\n *  <nb-list nbInfiniteList [threshold]=\"500\" (bottomThreshold)=\"loadNext()\">\r\n *    <nb-list-item *ngFor=\"let item of items\"></nb-list-item>\r\n *  </nb-list>\r\n * ```\r\n *\r\n * @stacked-example(Simple infinite list, infinite-list/infinite-list-showcase.component)\r\n *\r\n * Directive will notify when list scrolled up or down to a given threshold.\r\n * By default it listen to scroll of list on which applied, but also can be set to listen to window scroll.\r\n *\r\n * @stacked-example(Scroll modes, infinite-list/infinite-list-scroll-modes.component)\r\n *\r\n * To improve UX of infinite lists, it's better to keep current page in url,\r\n * so user able to return to the last viewed page or to share a link to this page.\r\n * `nbListPageTracker` directive will help you to know, what page user currently viewing.\r\n * Just put it on a list, set page size and it will calculate page that currently in viewport.\r\n * You can [open the example](example/infinite-list/infinite-news-list.component)\r\n * in a new tab to check out this feature.\r\n *\r\n * @stacked-example(Infinite list with pager, infinite-list/infinite-news-list.component)\r\n *\r\n * @stacked-example(Infinite list with placeholders at the top, infinite-list/infinite-list-placeholders.component)\r\n *\r\n */\r\nexport declare class NbInfiniteListDirective implements AfterViewInit, OnDestroy {\r\n    private elementRef;\r\n    private scrollService;\r\n    private dimensionsService;\r\n    private destroy$;\r\n    private lastScrollPosition;\r\n    windowScroll: boolean;\r\n    private get elementScroll();\r\n    /**\r\n     * Threshold after which event load more event will be emited.\r\n     * In pixels.\r\n     */\r\n    threshold: number;\r\n    /**\r\n     * By default component observes list scroll position.\r\n     * If set to `true`, component will observe position of page scroll instead.\r\n     */\r\n    set listenWindowScroll(value: any);\r\n    static ngAcceptInputType_listenWindowScroll: NbBooleanInput;\r\n    /**\r\n     * Emits when distance between list bottom and current scroll position is less than threshold.\r\n     */\r\n    bottomThreshold: EventEmitter<any>;\r\n    /**\r\n     * Emits when distance between list top and current scroll position is less than threshold.\r\n     */\r\n    topThreshold: EventEmitter<any>;\r\n    onElementScroll(): void;\r\n    listItems: QueryList<NbListItemComponent>;\r\n    constructor(elementRef: ElementRef, scrollService: NbLayoutScrollService, dimensionsService: NbLayoutRulerService);\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    checkPosition({ scrollHeight, scrollTop, clientHeight }: NbScrollableContainerDimentions): void;\r\n    private getContainerDimensions;\r\n    private inSyncWithDom;\r\n}\r\n"]}