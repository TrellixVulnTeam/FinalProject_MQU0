{"version":3,"file":"menu.component.d.ts","sources":["menu.component.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { EventEmitter, OnInit, OnDestroy, AfterViewInit, DoCheck } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { NbMenuInternalService, NbMenuItem, NbMenuService, NbMenuBadgeConfig } from './menu.service';\r\nimport { NbBooleanInput } from '../helpers';\r\nimport { NbLayoutDirectionService } from '../../services/direction.service';\r\nexport declare enum NbToggleStates {\r\n    Expanded = \"expanded\",\r\n    Collapsed = \"collapsed\"\r\n}\r\nexport declare class NbMenuItemComponent implements DoCheck, AfterViewInit, OnDestroy {\r\n    protected menuService: NbMenuService;\r\n    protected directionService: NbLayoutDirectionService;\r\n    menuItem: NbMenuItem;\r\n    badge: NbMenuBadgeConfig;\r\n    hoverItem: EventEmitter<any>;\r\n    toggleSubMenu: EventEmitter<any>;\r\n    selectItem: EventEmitter<any>;\r\n    itemClick: EventEmitter<any>;\r\n    protected destroy$: Subject<void>;\r\n    toggleState: NbToggleStates;\r\n    constructor(menuService: NbMenuService, directionService: NbLayoutDirectionService);\r\n    ngDoCheck(): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    onToggleSubMenu(item: NbMenuItem): void;\r\n    onHoverItem(item: NbMenuItem): void;\r\n    onSelectItem(item: NbMenuItem): void;\r\n    onItemClick(item: NbMenuItem): void;\r\n    getExpandStateIcon(): string;\r\n}\r\n/**\r\n * Vertical menu component.\r\n *\r\n * Accepts a list of menu items and renders them accordingly. Supports multi-level menus.\r\n *\r\n * Basic example\r\n * @stacked-example(Showcase, menu/menu-showcase.component)\r\n *\r\n * ```ts\r\n * // ...\r\n * items: NbMenuItem[] = [\r\n *  {\r\n *    title: home,\r\n *    link: '/'\r\n *  },\r\n *  {\r\n *    title: dashboard,\r\n *    link: 'dashboard'\r\n *  }\r\n * ];\r\n * // ...\r\n * <nb-menu [items]=\"items\"></nb-menu>\r\n * ```\r\n * ### Installation\r\n *\r\n * Import `NbMenuModule.forRoot()` to your app module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbMenuModule.forRoot(),\r\n *   ],\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n * and `NbMenuModule` to your feature module where the component should be shown:\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbMenuModule,\r\n *   ],\r\n * })\r\n * export class PageModule { }\r\n * ```\r\n * ### Usage\r\n *\r\n * Two-level menu example\r\n * @stacked-example(Two Levels, menu/menu-children.component)\r\n *\r\n *\r\n * Autocollapse menu example\r\n * @stacked-example(Autocollapse Menu, menu/menu-autocollapse.component)\r\n *\r\n * Menu badge\r\n * @stacked-example(Menu item badge, menu/menu-badge.component)\r\n *\r\n * @styles\r\n *\r\n * menu-background-color:\r\n * menu-text-color:\r\n * menu-text-font-family:\r\n * menu-text-font-size:\r\n * menu-text-font-weight:\r\n * menu-text-line-height:\r\n * menu-group-text-color:\r\n * menu-item-border-radius:\r\n * menu-item-padding:\r\n * menu-item-hover-background-color:\r\n * menu-item-hover-cursor:\r\n * menu-item-hover-text-color:\r\n * menu-item-icon-hover-color:\r\n * menu-item-active-background-color:\r\n * menu-item-active-text-color:\r\n * menu-item-icon-active-color:\r\n * menu-item-icon-color:\r\n * menu-item-icon-margin:\r\n * menu-item-icon-width:\r\n * menu-item-divider-color:\r\n * menu-item-divider-style:\r\n * menu-item-divider-width:\r\n * menu-submenu-background-color:\r\n * menu-submenu-text-color:\r\n * menu-submenu-margin:\r\n * menu-submenu-padding:\r\n * menu-submenu-item-border-color:\r\n * menu-submenu-item-border-style:\r\n * menu-submenu-item-border-width:\r\n * menu-submenu-item-border-radius:\r\n * menu-submenu-item-padding:\r\n * menu-submenu-item-hover-background-color:\r\n * menu-submenu-item-hover-border-color:\r\n * menu-submenu-item-hover-text-color:\r\n * menu-submenu-item-icon-hover-color:\r\n * menu-submenu-item-active-background-color:\r\n * menu-submenu-item-active-border-color:\r\n * menu-submenu-item-active-text-color:\r\n * menu-submenu-item-icon-active-color:\r\n * menu-submenu-item-active-hover-background-color:\r\n * menu-submenu-item-active-hover-border-color:\r\n * menu-submenu-item-active-hover-text-color:\r\n * menu-submenu-item-icon-active-hover-color:\r\n */\r\nexport declare class NbMenuComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    protected window: any;\r\n    protected platformId: any;\r\n    protected menuInternalService: NbMenuInternalService;\r\n    protected router: Router;\r\n    /**\r\n     * Tags a menu with some ID, can be later used in the menu service\r\n     * to determine which menu triggered the action, if multiple menus exist on the page.\r\n     *\r\n     * @type {string}\r\n     */\r\n    tag: string;\r\n    /**\r\n     * List of menu items.\r\n     * @type List<NbMenuItem> | List<any> | any\r\n     */\r\n    items: NbMenuItem[];\r\n    /**\r\n     * Collapse all opened submenus on the toggle event\r\n     * Default value is \"false\"\r\n     * @type boolean\r\n     */\r\n    get autoCollapse(): boolean;\r\n    set autoCollapse(value: boolean);\r\n    protected _autoCollapse: boolean;\r\n    static ngAcceptInputType_autoCollapse: NbBooleanInput;\r\n    protected destroy$: Subject<void>;\r\n    constructor(window: any, platformId: any, menuInternalService: NbMenuInternalService, router: Router);\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    onAddItem(data: {\r\n        tag: string;\r\n        items: NbMenuItem[];\r\n    }): void;\r\n    onHoverItem(item: NbMenuItem): void;\r\n    onToggleSubMenu(item: NbMenuItem): void;\r\n    onSelectItem(item: NbMenuItem): void;\r\n    onItemClick(item: NbMenuItem): void;\r\n    ngOnDestroy(): void;\r\n    protected navigateHome(): void;\r\n    protected collapseAll(): void;\r\n    protected getHomeItem(items: NbMenuItem[]): NbMenuItem;\r\n    protected compareTag(tag: string): boolean;\r\n    protected getSelectedItem(items: NbMenuItem[]): NbMenuItem;\r\n}\r\n"]}