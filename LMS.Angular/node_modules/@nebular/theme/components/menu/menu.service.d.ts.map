{"version":3,"file":"menu.service.d.ts","sources":["menu.service.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { Location } from '@angular/common';\r\nimport { Params, QueryParamsHandling } from '@angular/router';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { NbIconConfig } from '../icon/icon.component';\r\nimport { NbBadge } from '../badge/badge.component';\r\nexport interface NbMenuBag {\r\n    tag: string;\r\n    item: NbMenuItem;\r\n}\r\nexport declare type NbMenuBadgeConfig = Omit<NbBadge, 'position'>;\r\n/**\r\n *\r\n *\r\n * Menu Item options example\r\n * @stacked-example(Menu Link Parameters, menu/menu-link-params.component)\r\n *\r\n *\r\n */\r\nexport declare class NbMenuItem {\r\n    /**\r\n     * Item Title\r\n     * @type {string}\r\n     */\r\n    title: string;\r\n    /**\r\n     * Item relative link (for routerLink)\r\n     * @type {string}\r\n     */\r\n    link?: string;\r\n    /**\r\n     * Item URL (absolute)\r\n     * @type {string}\r\n     */\r\n    url?: string;\r\n    /**\r\n     * Icon class name or icon config object\r\n     * @type {string | NbIconConfig}\r\n     */\r\n    icon?: string | NbIconConfig;\r\n    /**\r\n     * Expanded by default\r\n     * @type {boolean}\r\n     */\r\n    expanded?: boolean;\r\n    /**\r\n     * Badge component\r\n     * @type {boolean}\r\n     */\r\n    badge?: NbMenuBadgeConfig;\r\n    /**\r\n     * Children items\r\n     * @type {List<NbMenuItem>}\r\n     */\r\n    children?: NbMenuItem[];\r\n    /**\r\n     * HTML Link target\r\n     * @type {string}\r\n     */\r\n    target?: string;\r\n    /**\r\n     * Hidden Item\r\n     * @type {boolean}\r\n     */\r\n    hidden?: boolean;\r\n    /**\r\n     * Item is selected when partly or fully equal to the current url\r\n     * @type {string}\r\n     */\r\n    pathMatch?: 'full' | 'prefix';\r\n    /**\r\n     * Where this is a home item\r\n     * @type {boolean}\r\n     */\r\n    home?: boolean;\r\n    /**\r\n     * Whether the item is just a group (non-clickable)\r\n     * @type {boolean}\r\n     */\r\n    group?: boolean;\r\n    /** Whether the item skipLocationChange is true or false\r\n     *@type {boolean}\r\n     */\r\n    skipLocationChange?: boolean;\r\n    /** Map of query parameters\r\n     *@type {Params}\r\n     */\r\n    queryParams?: Params;\r\n    queryParamsHandling?: QueryParamsHandling;\r\n    parent?: NbMenuItem;\r\n    selected?: boolean;\r\n    data?: any;\r\n    fragment?: string;\r\n    preserveFragment?: boolean;\r\n    /**\r\n     * @returns item parents in top-down order\r\n     */\r\n    static getParents(item: NbMenuItem): NbMenuItem[];\r\n    static isParent(item: NbMenuItem, possibleChild: NbMenuItem): boolean;\r\n}\r\n/**\r\n *\r\n *\r\n * Menu Service. Allows you to listen to menu events, or to interact with a menu.\r\n * @stacked-example(Menu Service, menu/menu-service.component)\r\n *\r\n *\r\n */\r\nexport declare class NbMenuService {\r\n    /**\r\n     * Add items to the end of the menu items list\r\n     * @param {List<NbMenuItem>} items\r\n     * @param {string} tag\r\n     */\r\n    addItems(items: NbMenuItem[], tag?: string): void;\r\n    /**\r\n     * Collapses all menu items\r\n     * @param {string} tag\r\n     */\r\n    collapseAll(tag?: string): void;\r\n    /**\r\n     * Navigate to the home menu item\r\n     * @param {string} tag\r\n     */\r\n    navigateHome(tag?: string): void;\r\n    /**\r\n     * Returns currently selected item. Won't subscribe to the future events.\r\n     * @param {string} tag\r\n     * @returns {Observable<{tag: string; item: NbMenuItem}>}\r\n     */\r\n    getSelectedItem(tag?: string): Observable<NbMenuBag>;\r\n    onItemClick(): Observable<NbMenuBag>;\r\n    onItemSelect(): Observable<NbMenuBag>;\r\n    onItemHover(): Observable<NbMenuBag>;\r\n    onSubmenuToggle(): Observable<NbMenuBag>;\r\n}\r\nexport declare class NbMenuInternalService {\r\n    private location;\r\n    constructor(location: Location);\r\n    prepareItems(items: NbMenuItem[]): void;\r\n    selectFromUrl(items: NbMenuItem[], tag: string, collapseOther?: boolean): void;\r\n    selectItem(item: NbMenuItem, items: NbMenuItem[], collapseOther: boolean, tag: string): void;\r\n    collapseAll(items: NbMenuItem[], tag: string, except?: NbMenuItem): void;\r\n    onAddItem(): Observable<{\r\n        tag: string;\r\n        items: NbMenuItem[];\r\n    }>;\r\n    onNavigateHome(): Observable<{\r\n        tag: string;\r\n    }>;\r\n    onCollapseAll(): Observable<{\r\n        tag: string;\r\n    }>;\r\n    onGetSelectedItem(): Observable<{\r\n        tag: string;\r\n        listener: BehaviorSubject<NbMenuBag>;\r\n    }>;\r\n    itemHover(item: NbMenuItem, tag?: string): void;\r\n    submenuToggle(item: NbMenuItem, tag?: string): void;\r\n    itemSelect(item: NbMenuItem, tag?: string): void;\r\n    itemClick(item: NbMenuItem, tag?: string): void;\r\n    /**\r\n     * Unselect all given items deeply.\r\n     * @param items array of items to unselect.\r\n     * @returns items which selected value was changed.\r\n     */\r\n    private resetSelection;\r\n    /**\r\n     * Collapse all given items deeply.\r\n     * @param items array of items to collapse.\r\n     * @param except menu item which shouldn't be collapsed, also disables collapsing for parents of this item.\r\n     * @returns items which expanded value was changed.\r\n     */\r\n    private collapseItems;\r\n    private applyDefaults;\r\n    private setParent;\r\n    /**\r\n     * Find deepest item which link matches current URL path.\r\n     * @param items array of items to search in.\r\n     * @returns found item of undefined.\r\n     */\r\n    private findItemByUrl;\r\n    private isSelectedInUrl;\r\n}\r\n"]}