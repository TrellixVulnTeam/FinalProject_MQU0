{"version":3,"file":"popover.directive.d.ts","sources":["popover.directive.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { AfterViewInit, ElementRef, OnChanges, OnDestroy, OnInit, EventEmitter } from '@angular/core';\r\nimport { NbDynamicOverlay, NbDynamicOverlayController } from '../cdk/overlay/dynamic/dynamic-overlay';\r\nimport { NbDynamicOverlayHandler } from '../cdk/overlay/dynamic/dynamic-overlay-handler';\r\nimport { NbAdjustment, NbPosition, NbPositionValues, NbAdjustmentValues } from '../cdk/overlay/overlay-position';\r\nimport { NbOverlayContent } from '../cdk/overlay/overlay-service';\r\nimport { NbTrigger, NbTriggerValues } from '../cdk/overlay/overlay-trigger';\r\nimport { NbOverlayConfig } from '../cdk/overlay/mapping';\r\nimport { NbPopoverComponent } from './popover.component';\r\nimport { Subject } from 'rxjs';\r\n/**\r\n * Powerful popover directive, which provides the best UX for your users.\r\n *\r\n * @stacked-example(Showcase, popover/popover-showcase.component)\r\n *\r\n * Popover can accept different content such as:\r\n * TemplateRef\r\n *\r\n * ```html\r\n * <button [nbPopover]=\"templateRef\"></button>\r\n * <ng-template #templateRef>\r\n *   <span>Hello, Popover!</span>\r\n * </ng-template>\r\n * ```\r\n * ### Installation\r\n *\r\n * Import `NbPopoverModule` to your feature module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbPopoverModule,\r\n *   ],\r\n * })\r\n * export class PageModule { }\r\n * ```\r\n * ### Usage\r\n *\r\n * Custom components\r\n *\r\n * ```html\r\n * <button [nbPopover]=\"MyPopoverComponent\"></button>\r\n * ```\r\n *\r\n * Both custom components and templateRef popovers can receive *contentContext* property\r\n * that will be passed to the content props.\r\n *\r\n * Primitive types\r\n *\r\n * ```html\r\n * <button nbPopover=\"Hello, Popover!\"></button>\r\n * ```\r\n *\r\n * Popover has different placements, such as: top, bottom, left, right, start and end\r\n * which can be used as following:\r\n *\r\n * @stacked-example(Placements, popover/popover-placements.component)\r\n *\r\n * By default popover will try to adjust itself to maximally fit viewport\r\n * and provide the best user experience. It will try to change position of the popover container.\r\n * If you want to disable this behaviour set it `noop`.\r\n *\r\n * ```html\r\n * <button nbPopover=\"Hello, Popover!\" nbPopoverAdjustment=\"noop\"></button>\r\n * ```\r\n *\r\n * Popover has a number of triggers which provides an ability to show and hide the component in different ways:\r\n *\r\n * - Click mode shows the component when a user clicks on the host element and hides when the user clicks\r\n * somewhere on the document outside the component.\r\n * - Hint provides capability to show the component when the user hovers over the host element\r\n * and hide when the user hovers out of the host.\r\n * - Hover works like hint mode with one exception - when the user moves mouse from host element to\r\n * the container element the component remains open, so that it is possible to interact with it content.\r\n * - Focus mode is applied when user focuses the element.\r\n * - Noop mode - the component won't react to the user interaction.\r\n *\r\n * @stacked-example(Available Triggers, popover/popover-modes.component.html)\r\n *\r\n * Noop mode is especially useful when you need to control Popover programmatically, for example show/hide\r\n * as a result of some third-party action, like HTTP request or validation check:\r\n *\r\n * @stacked-example(Manual Control, popover/popover-noop.component)\r\n *\r\n * Below are examples for manual popover settings control, both via template binding and code.\r\n * @stacked-example(Popover Settings, popover/popover-dynamic.component)\r\n *\r\n * Please note, while manipulating Popover setting via code, you need to call `rebuild()` method to apply the settings\r\n * changed.\r\n * @stacked-example(Popover Settings Code, popover/popover-dynamic-code.component)\r\n *\r\n * @additional-example(Template Ref, popover/popover-template-ref.component)\r\n * @additional-example(Custom Component, popover/popover-custom-component.component)\r\n * */\r\nexport declare class NbPopoverDirective implements NbDynamicOverlayController, OnChanges, AfterViewInit, OnDestroy, OnInit {\r\n    protected hostRef: ElementRef;\r\n    protected dynamicOverlayHandler: NbDynamicOverlayHandler;\r\n    protected popoverComponent: typeof NbPopoverComponent;\r\n    protected dynamicOverlay: NbDynamicOverlay;\r\n    protected destroy$: Subject<void>;\r\n    /**\r\n     * Popover content which will be rendered in NbArrowedOverlayContainerComponent.\r\n     * Available content: template ref, component and any primitive.\r\n     * */\r\n    content: NbOverlayContent;\r\n    /**\r\n     * Container content context. Will be applied to the rendered component.\r\n     * */\r\n    context: Object;\r\n    /**\r\n     * Position will be calculated relatively host element based on the position.\r\n     * Can be top, right, bottom, left, start or end.\r\n     * */\r\n    position: NbPosition;\r\n    static ngAcceptInputType_position: NbPositionValues;\r\n    /**\r\n     * Container position will be changes automatically based on this strategy if container can't fit view port.\r\n     * Set this property to `noop` value if you want to disable automatically adjustment.\r\n     * Available values: `clockwise` (default), `counterclockwise`, `vertical`, `horizontal`, `noop`.\r\n     * */\r\n    get adjustment(): NbAdjustment;\r\n    set adjustment(value: NbAdjustment);\r\n    protected _adjustment: NbAdjustment;\r\n    static ngAcceptInputType_adjustment: NbAdjustmentValues;\r\n    /**\r\n     * Describes when the container will be shown.\r\n     * Available options: `click`, `hover`, `hint`, `focus` and `noop`\r\n     * */\r\n    trigger: NbTrigger;\r\n    static ngAcceptInputType_trigger: NbTriggerValues;\r\n    /**\r\n     * Sets popover offset\r\n     * */\r\n    offset: number;\r\n    get popoverClass(): string;\r\n    set popoverClass(value: string);\r\n    _popoverClass: string;\r\n    nbPopoverShowStateChange: EventEmitter<{\r\n        isShown: boolean;\r\n    }>;\r\n    protected overlayConfig: NbOverlayConfig;\r\n    get isShown(): boolean;\r\n    constructor(hostRef: ElementRef, dynamicOverlayHandler: NbDynamicOverlayHandler);\r\n    ngOnInit(): void;\r\n    ngOnChanges(): void;\r\n    ngAfterViewInit(): void;\r\n    rebuild(): void;\r\n    show(): void;\r\n    hide(): void;\r\n    toggle(): void;\r\n    ngOnDestroy(): void;\r\n    protected configureDynamicOverlay(): NbDynamicOverlayHandler;\r\n}\r\n"]}