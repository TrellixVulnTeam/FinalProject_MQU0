{"version":3,"file":"radio-group.component.d.ts","sources":["radio-group.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, EventEmitter, OnDestroy, QueryList, ElementRef } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { NbBooleanInput } from '../helpers';\r\nimport { NbComponentOrCustomStatus } from '../component-status';\r\nimport { NbRadioComponent } from './radio.component';\r\n/**\r\n * The `NbRadioGroupComponent` is the wrapper for `nb-radio` button.\r\n * It provides form bindings:\r\n *\r\n * ```html\r\n * <nb-radio-group [(ngModel)]=\"selectedOption\">\r\n *   <nb-radio value=\"1\">Option 1</nb-radio>\r\n *   <nb-radio value=\"2\">Option 2</nb-radio>\r\n *   <nb-radio value=\"3\">Option 3</nb-radio>\r\n * </nb-radio-group>\r\n * ```\r\n *\r\n * Also, you can use `value` and `valueChange` for binding without forms.\r\n *\r\n * ```html\r\n * <nb-radio-group [(value)]=\"selectedOption\">\r\n *   <nb-radio value=\"1\">Option 1</nb-radio>\r\n *   <nb-radio value=\"2\">Option 2</nb-radio>\r\n *   <nb-radio value=\"3\">Option 3</nb-radio>\r\n * </nb-radio-group>\r\n * ```\r\n *\r\n * Radio items name has to be provided through `name` input property of the radio group.\r\n *\r\n * ```html\r\n * <nb-radio-group name=\"my-radio-group\">\r\n *   ...\r\n * </nb-radio-group>\r\n * ```\r\n *\r\n * You can change radio group status by setting `status` input.\r\n * @stacked-example(Statuses, radio/radio-statuses.component)\r\n *\r\n * Also, you can disable the whole group using `disabled` attribute.\r\n * @stacked-example(Disabled group, radio/radio-disabled-group.component)\r\n *\r\n * Radio group supports `ngModel` and reactive forms:\r\n * @stacked-example(Radio Group with forms, radio/radio-form.component)\r\n *\r\n * */\r\nexport declare class NbRadioGroupComponent implements AfterContentInit, OnDestroy, ControlValueAccessor {\r\n    protected hostElement: ElementRef<HTMLElement>;\r\n    protected platformId: any;\r\n    protected document: any;\r\n    protected destroy$: Subject<void>;\r\n    protected onChange: (value: any) => void;\r\n    protected onTouched: () => void;\r\n    get value(): any;\r\n    set value(value: any);\r\n    protected _value: any;\r\n    get name(): string;\r\n    set name(name: string);\r\n    protected _name: string;\r\n    get disabled(): boolean;\r\n    set disabled(disabled: boolean);\r\n    protected _disabled: boolean;\r\n    static ngAcceptInputType_disabled: NbBooleanInput;\r\n    /**\r\n     * Radio buttons status.\r\n     * Possible values are `primary` (default), `success`, `warning`, `danger`, `info`.\r\n     */\r\n    get status(): NbComponentOrCustomStatus;\r\n    set status(value: NbComponentOrCustomStatus);\r\n    protected _status: NbComponentOrCustomStatus;\r\n    radios: QueryList<NbRadioComponent>;\r\n    valueChange: EventEmitter<any>;\r\n    constructor(hostElement: ElementRef<HTMLElement>, platformId: any, document: any);\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n    writeValue(value: any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    protected updateAndSubscribeToRadios(): void;\r\n    protected updateNames(): void;\r\n    protected updateValues(): void;\r\n    protected updateDisabled(): void;\r\n    protected subscribeOnRadiosValueChange(): void;\r\n    protected propagateValue(value: any): void;\r\n    protected subscribeOnRadiosBlur(): void;\r\n    protected updateStatus(): void;\r\n    protected updateAndMarkForCheckRadios(updateFn: (NbRadioComponent: any) => void): void;\r\n    protected updateValueFromCheckedOption(): void;\r\n}\r\n"]}