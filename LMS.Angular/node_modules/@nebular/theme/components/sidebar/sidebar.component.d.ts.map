{"version":3,"file":"sidebar.component.d.ts","sources":["sidebar.component.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { NbBooleanInput } from '../helpers';\r\nimport { NbThemeService } from '../../services/theme.service';\r\nimport { NbSidebarService } from './sidebar.service';\r\nexport declare type NbSidebarState = 'expanded' | 'collapsed' | 'compacted';\r\nexport declare type NbSidebarResponsiveState = 'mobile' | 'tablet' | 'pc';\r\n/**\r\n * Sidebar header container.\r\n *\r\n * Placeholder which contains a sidebar header content,\r\n * placed at the very top of the sidebar outside of the scroll area.\r\n */\r\nexport declare class NbSidebarHeaderComponent {\r\n}\r\n/**\r\n * Sidebar footer container.\r\n *\r\n * Placeholder which contains a sidebar footer content,\r\n * placed at the very bottom of the sidebar outside of the scroll area.\r\n */\r\nexport declare class NbSidebarFooterComponent {\r\n}\r\n/**\r\n * Layout sidebar component.\r\n *\r\n * @stacked-example(Showcase, sidebar/sidebar-showcase.component)\r\n *\r\n * ### Installation\r\n *\r\n * Import `NbSidebarModule.forRoot()` to your app module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbSidebarModule.forRoot(),\r\n *   ],\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n * and `NbSidebarModule` to your feature module where the component should be shown:\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbSidebarModule,\r\n *   ],\r\n * })\r\n * export class PageModule { }\r\n * ```\r\n * ### Usage\r\n *\r\n * Sidebar can be placed on the left or the right side of the layout,\r\n * or on start/end position of layout (depends on document direction, left to right or right to left)\r\n * It can be fixed (shown above the content) or can push the layout when opened.\r\n *\r\n * There are three states - `expanded`, `collapsed`, `compacted`.\r\n * By default sidebar content is fixed and saves its position while the page is being scrolled.\r\n *\r\n * Compacted sidebar example:\r\n * @stacked-example(Compacted Sidebar, sidebar/sidebar-compacted.component)\r\n *\r\n * Sidebar also supports a `responsive` behavior, listening to window size change and changing its size respectably.\r\n *\r\n * In a pair with header it is possible to setup a configuration when header is placed on a side of the sidebar\r\n * and not on top of it. To achieve this simply put a `subheader` property to the header like this:\r\n * ```html\r\n * <nb-layout-header subheader></nb-layout-header>\r\n * ```\r\n * @stacked-example(Subheader, layout/layout-sidebar-subheader.component)\r\n * Note that in such configuration sidebar shadow is removed and header cannot be make `fixed`.\r\n *\r\n * @additional-example(Right Sidebar, sidebar/sidebar-right.component)\r\n * @additional-example(Fixed Sidebar, sidebar/sidebar-fixed.component)\r\n *\r\n * @styles\r\n *\r\n * sidebar-background-color:\r\n * sidebar-text-color:\r\n * sidebar-text-font-family:\r\n * sidebar-text-font-size:\r\n * sidebar-text-font-weight:\r\n * sidebar-text-line-height:\r\n * sidebar-height:\r\n * sidebar-width:\r\n * sidebar-width-compact:\r\n * sidebar-padding:\r\n * sidebar-header-height:\r\n * sidebar-footer-height:\r\n * sidebar-shadow:\r\n * sidebar-menu-item-highlight-color:\r\n * sidebar-scrollbar-background-color:\r\n * sidebar-scrollbar-color:\r\n * sidebar-scrollbar-width:\r\n */\r\nexport declare class NbSidebarComponent implements OnInit, OnDestroy {\r\n    private sidebarService;\r\n    private themeService;\r\n    private element;\r\n    private cd;\r\n    protected readonly responsiveValueChange$: Subject<boolean>;\r\n    protected responsiveState: NbSidebarResponsiveState;\r\n    protected destroy$: Subject<void>;\r\n    containerFixedValue: boolean;\r\n    fixedValue: boolean;\r\n    rightValue: boolean;\r\n    leftValue: boolean;\r\n    startValue: boolean;\r\n    endValue: boolean;\r\n    get expanded(): boolean;\r\n    get collapsed(): boolean;\r\n    get compacted(): boolean;\r\n    /**\r\n     * Places sidebar on the right side\r\n     * @type {boolean}\r\n     */\r\n    set right(val: boolean);\r\n    static ngAcceptInputType_right: NbBooleanInput;\r\n    /**\r\n     * Places sidebar on the left side\r\n     * @type {boolean}\r\n     */\r\n    set left(val: boolean);\r\n    static ngAcceptInputType_left: NbBooleanInput;\r\n    /**\r\n     * Places sidebar on the start edge of layout\r\n     * @type {boolean}\r\n     */\r\n    set start(val: boolean);\r\n    static ngAcceptInputType_start: NbBooleanInput;\r\n    /**\r\n     * Places sidebar on the end edge of layout\r\n     * @type {boolean}\r\n     */\r\n    set end(val: boolean);\r\n    static ngAcceptInputType_end: NbBooleanInput;\r\n    /**\r\n     * Makes sidebar fixed (shown above the layout content)\r\n     * @type {boolean}\r\n     */\r\n    set fixed(val: boolean);\r\n    static ngAcceptInputType_fixed: NbBooleanInput;\r\n    /**\r\n     * Makes sidebar container fixed\r\n     * @type {boolean}\r\n     */\r\n    set containerFixed(val: boolean);\r\n    static ngAcceptInputType_containerFixed: NbBooleanInput;\r\n    /**\r\n     * Initial sidebar state, `expanded`|`collapsed`|`compacted`\r\n     * @type {string}\r\n     */\r\n    get state(): NbSidebarState;\r\n    set state(value: NbSidebarState);\r\n    protected _state: NbSidebarState;\r\n    /**\r\n     * Makes sidebar listen to media query events and change its behaviour\r\n     * @type {boolean}\r\n     */\r\n    get responsive(): boolean;\r\n    set responsive(value: boolean);\r\n    protected _responsive: boolean;\r\n    static ngAcceptInputType_responsive: NbBooleanInput;\r\n    /**\r\n     * Tags a sidebar with some ID, can be later used in the sidebar service\r\n     * to determine which sidebar triggered the action, if multiple sidebars exist on the page.\r\n     *\r\n     * @type {string}\r\n     */\r\n    tag: string;\r\n    /**\r\n     * Controls on which screen sizes sidebar should be switched to compacted state.\r\n     * Works only when responsive mode is on.\r\n     * Default values are `['xs', 'is', 'sm', 'md', 'lg']`.\r\n     *\r\n     * @type string[]\r\n     */\r\n    compactedBreakpoints: string[];\r\n    /**\r\n     * Controls on which screen sizes sidebar should be switched to collapsed state.\r\n     * Works only when responsive mode is on.\r\n     * Default values are `['xs', 'is']`.\r\n     *\r\n     * @type string[]\r\n     */\r\n    collapsedBreakpoints: string[];\r\n    /**\r\n     * Emits whenever sidebar state change.\r\n     */\r\n    readonly stateChange: EventEmitter<NbSidebarState>;\r\n    /**\r\n     * Emits whenever sidebar responsive state change.\r\n     */\r\n    readonly responsiveStateChange: EventEmitter<NbSidebarResponsiveState>;\r\n    constructor(sidebarService: NbSidebarService, themeService: NbThemeService, element: ElementRef, cd: ChangeDetectorRef);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    onClick(event: any): void;\r\n    /**\r\n     * Collapses the sidebar\r\n     */\r\n    collapse(): void;\r\n    /**\r\n     * Expands the sidebar\r\n     */\r\n    expand(): void;\r\n    /**\r\n     * Compacts the sidebar (minimizes)\r\n     */\r\n    compact(): void;\r\n    /**\r\n     * Toggles sidebar state (expanded|collapsed|compacted)\r\n     * @param {boolean} compact If true, then sidebar state will be changed between expanded & compacted,\r\n     * otherwise - between expanded & collapsed. False by default.\r\n     *\r\n     * Toggle sidebar state\r\n     *\r\n     * ```ts\r\n     * this.sidebar.toggle(true);\r\n     * ```\r\n     */\r\n    toggle(compact?: boolean): void;\r\n    protected subscribeToMediaQueryChange(): void;\r\n    protected getMenuLink(element: HTMLElement): HTMLElement | undefined;\r\n    protected updateState(state: NbSidebarState): void;\r\n    /**\r\n     * @deprecated Use `responsive` property instead\r\n     * @breaking-change Remove @8.0.0\r\n     */\r\n    toggleResponsive(enabled: boolean): void;\r\n    /**\r\n     * @deprecated Use NbSidebarState type instead\r\n     * @breaking-change Remove @8.0.0\r\n     */\r\n    static readonly STATE_EXPANDED: string;\r\n    /**\r\n     * @deprecated Use NbSidebarState type instead\r\n     * @breaking-change Remove @8.0.0\r\n     */\r\n    static readonly STATE_COLLAPSED: string;\r\n    /**\r\n     * @deprecated Use NbSidebarState type instead\r\n     * @breaking-change Remove @8.0.0\r\n     */\r\n    static readonly STATE_COMPACTED: string;\r\n    /**\r\n     * @deprecated Use NbSidebarResponsiveState type instead\r\n     * @breaking-change Remove @8.0.0\r\n     */\r\n    static readonly RESPONSIVE_STATE_MOBILE: string;\r\n    /**\r\n     * @deprecated Use NbSidebarResponsiveState type instead\r\n     * @breaking-change Remove @8.0.0\r\n     */\r\n    static readonly RESPONSIVE_STATE_TABLET: string;\r\n    /**\r\n     * @deprecated Use NbSidebarResponsiveState type instead\r\n     * @breaking-change Remove @8.0.0\r\n     */\r\n    static readonly RESPONSIVE_STATE_PC: string;\r\n}\r\n"]}