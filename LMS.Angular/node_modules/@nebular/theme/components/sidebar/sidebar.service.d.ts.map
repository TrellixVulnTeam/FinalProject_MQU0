{"version":3,"file":"sidebar.service.d.ts","sources":["sidebar.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { Subject, Observable, Observer } from 'rxjs';\r\nimport { NbSidebarResponsiveState, NbSidebarState } from './sidebar.component';\r\nexport declare const getSidebarState$: Subject<{\r\n    tag: string;\r\n    observer: Observer<NbSidebarState>;\r\n}>;\r\nexport declare const getSidebarResponsiveState$: Subject<{\r\n    tag: string;\r\n    observer: Observer<NbSidebarResponsiveState>;\r\n}>;\r\n/**\r\n * Sidebar service.\r\n *\r\n * Root module service to control the sidebar from any part of the app.\r\n *\r\n * Allows you to change sidebar state dynamically from any part of the app:\r\n * @stacked-example(Sidebar State, sidebar/sidebar-toggle.component)\r\n */\r\nexport declare class NbSidebarService {\r\n    private toggle$;\r\n    private expand$;\r\n    private collapse$;\r\n    private compact$;\r\n    /**\r\n     * Subscribe to toggle events\r\n     *\r\n     * @returns Observable<{ compact: boolean, tag: string }>\r\n     */\r\n    onToggle(): Observable<{\r\n        compact: boolean;\r\n        tag: string;\r\n    }>;\r\n    /**\r\n     * Subscribe to expand events\r\n     * @returns Observable<{ tag: string }>\r\n     */\r\n    onExpand(): Observable<{\r\n        tag: string;\r\n    }>;\r\n    /**\r\n     * Subscribe to collapse evens\r\n     * @returns Observable<{ tag: string }>\r\n     */\r\n    onCollapse(): Observable<{\r\n        tag: string;\r\n    }>;\r\n    /**\r\n     * Subscribe to compact evens\r\n     * @returns Observable<{ tag: string }>\r\n     */\r\n    onCompact(): Observable<{\r\n        tag: string;\r\n    }>;\r\n    /**\r\n     * Toggle a sidebar\r\n     * @param {boolean} compact\r\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\r\n     * to specify which sidebar you want to control\r\n     */\r\n    toggle(compact?: boolean, tag?: string): void;\r\n    /**\r\n     * Expands a sidebar\r\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\r\n     * to specify which sidebar you want to control\r\n     */\r\n    expand(tag?: string): void;\r\n    /**\r\n     * Collapses a sidebar\r\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\r\n     * to specify which sidebar you want to control\r\n     */\r\n    collapse(tag?: string): void;\r\n    /**\r\n     * Makes sidebar compact\r\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\r\n     * to specify which sidebar you want to control\r\n     */\r\n    compact(tag?: string): void;\r\n    /**\r\n     * Returns sidebar state observable which emits once\r\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\r\n     * to specify which sidebar state you need\r\n     */\r\n    getSidebarState(tag?: string): Observable<NbSidebarState>;\r\n    /**\r\n     * Returns sidebar state observable which emits once\r\n     * @param {string} tag If you have multiple sidebars on the page, mark them with `tag` input property and pass it here\r\n     * to specify which sidebar responsive state you need\r\n     */\r\n    getSidebarResponsiveState(tag?: string): Observable<NbSidebarResponsiveState>;\r\n}\r\n"]}