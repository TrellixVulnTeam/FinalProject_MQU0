{"version":3,"file":"stepper.component.d.ts","sources":["stepper.component.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { QueryList, TemplateRef } from '@angular/core';\r\nimport { NbBooleanInput } from '../helpers';\r\nimport { NbStepComponent } from './step.component';\r\nexport declare type NbStepperOrientation = 'vertical' | 'horizontal';\r\n/**\r\n * Stepper component\r\n *\r\n * @stacked-example(Showcase, stepper/stepper-showcase.component)\r\n *\r\n * ### Installation\r\n *\r\n * Import `NbStepperModule` to your feature module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbStepperModule,\r\n *   ],\r\n * })\r\n * export class PageModule { }\r\n * ```\r\n * ### Usage\r\n *\r\n * If step label is string you can pass it as `label` attribute. Otherwise ng-template should be used:\r\n * ```html\r\n * // ...\r\n * <nb-stepper orientation=\"horizontal\">\r\n *   <nb-step label=\"step number one\">\r\n *       // ... step content here\r\n *   </nb-step>\r\n *   <nb-step label=\"stepLabel\">\r\n *       <ng-template #stepLabel>\r\n *           <div>\r\n *               step number two\r\n *           </div>\r\n *       </ng-template>\r\n *       // ... step content here\r\n *   </nb-step>\r\n * </nb-stepper>\r\n * ```\r\n *\r\n * When linear mode enabled user can't move forward unless current step is complete.\r\n * @stacked-example(Linear, stepper/stepper-linear.component)\r\n *\r\n * Specify `[stepControl]=\"form\"` and stepper allow go to the next step only if form is valid.\r\n * You can disable it via `linear` mode setting.\r\n * ```html\r\n * // ...\r\n * <nb-stepper  orientation=\"horizontal\">\r\n *   <nb-step label=\"step number one\" [stepControl]=\"form\">\r\n *     <form [formGroup]=\"form\">\r\n *       // ...\r\n *     </form>\r\n *   </nb-step>\r\n *    // ...\r\n * </nb-stepper>\r\n * ```\r\n *\r\n * @stacked-example(Validation, stepper/stepper-validation.component)\r\n *\r\n * Stepper component has two layout options - `vertical` & `horizontal`\r\n * @stacked-example(Vertical, stepper/stepper-vertical.component)\r\n *\r\n * `disableStepNavigation` disables navigation by clicking on steps, so user can navigate only using\r\n * 'nbStepperPrevious' and 'nbStepperNext' buttons.\r\n * @stacked-example(Disabled steps navigation, stepper/stepper-disabled-step-nav.component)\r\n *\r\n * @styles\r\n *\r\n * stepper-step-text-color:\r\n * stepper-step-text-font-family:\r\n * stepper-step-text-font-size:\r\n * stepper-step-text-font-weight:\r\n * stepper-step-text-line-height:\r\n * stepper-step-active-text-color:\r\n * stepper-step-completed-text-color:\r\n * stepper-step-index-border-color:\r\n * stepper-step-index-border-style:\r\n * stepper-step-index-border-width:\r\n * stepper-step-index-border-radius:\r\n * stepper-step-index-width:\r\n * stepper-step-index-active-border-color:\r\n * stepper-step-index-completed-background-color:\r\n * stepper-step-index-completed-border-color:\r\n * stepper-step-index-completed-text-color:\r\n * stepper-connector-background-color:\r\n * stepper-connector-completed-background-color:\r\n * stepper-horizontal-connector-margin:\r\n * stepper-vertical-connector-margin:\r\n * stepper-step-content-padding:\r\n */\r\nexport declare class NbStepperComponent {\r\n    /**\r\n     * Selected step index\r\n     */\r\n    get selectedIndex(): number;\r\n    set selectedIndex(index: number);\r\n    protected _selectedIndex: number;\r\n    /**\r\n     * Disables navigation by clicking on steps. False by default\r\n     * @param {boolean} value\r\n     */\r\n    set disableStepNavigation(value: boolean);\r\n    get disableStepNavigation(): boolean;\r\n    protected _disableStepNavigation: boolean;\r\n    static ngAcceptInputType_disableStepNavigation: NbBooleanInput;\r\n    /**\r\n     * Selected step component\r\n     */\r\n    get selected(): NbStepComponent;\r\n    set selected(step: NbStepComponent);\r\n    /**\r\n     * Stepper orientation - `horizontal`|`vertical`\r\n     */\r\n    orientation: NbStepperOrientation;\r\n    /**\r\n     * Allow moving forward only if the current step is complete\r\n     * @default true\r\n     */\r\n    set linear(value: boolean);\r\n    get linear(): boolean;\r\n    protected _linear: boolean;\r\n    static ngAcceptInputType_linear: NbBooleanInput;\r\n    get vertical(): boolean;\r\n    get horizontal(): boolean;\r\n    steps: QueryList<NbStepComponent>;\r\n    /**\r\n     * Navigate to next step\r\n     * */\r\n    next(): void;\r\n    /**\r\n     * Navigate to previous step\r\n     * */\r\n    previous(): void;\r\n    /**\r\n     * Reset stepper and stepControls to initial state\r\n     * */\r\n    reset(): void;\r\n    isStepSelected(step: NbStepComponent): boolean;\r\n    getStepTemplate(step: NbStepComponent): TemplateRef<any> | null;\r\n    protected isStepValid(index: number): boolean;\r\n    protected canBeSelected(indexToCheck: number): boolean;\r\n    protected markCurrentStepInteracted(): void;\r\n}\r\n"]}