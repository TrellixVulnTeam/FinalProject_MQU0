{"version":3,"file":"tabset.component.d.ts","sources":["tabset.component.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { EventEmitter, QueryList, AfterContentInit, ChangeDetectorRef } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { NbBooleanInput } from '../helpers';\r\nimport { NbComponentOrCustomStatus } from '../component-status';\r\nimport { NbBadgePosition } from '../badge/badge.component';\r\nimport { NbIconConfig } from '../icon/icon.component';\r\n/**\r\n * Specific tab container.\r\n *\r\n * ```ts\r\n * <nb-tab tabTitle=\"Users\"\r\n *   badgeText=\"99+\"\r\n *   badgeStatus=\"danger\">\r\n *   <p>List of <strong>users</strong>.</p>\r\n * </nb-tab>\r\n ```\r\n */\r\nexport declare class NbTabComponent {\r\n    /**\r\n     * Tab title\r\n     * @type {string}\r\n     */\r\n    tabTitle: string;\r\n    /**\r\n     * Tab id\r\n     * @type {string}\r\n     */\r\n    tabId: string;\r\n    /**\r\n     * Use badge dot mode\r\n     * @type {boolean}\r\n     */\r\n    get badgeDot(): boolean;\r\n    set badgeDot(val: boolean);\r\n    protected _badgeDot: boolean;\r\n    static ngAcceptInputType_badgeDot: NbBooleanInput;\r\n    /**\r\n     * Tab icon name or icon config object\r\n     * @type {string | NbIconConfig}\r\n     */\r\n    tabIcon: string | NbIconConfig;\r\n    /**\r\n     * Item is disabled and cannot be opened.\r\n     * @type {boolean}\r\n     */\r\n    get disabled(): boolean;\r\n    set disabled(val: boolean);\r\n    static ngAcceptInputType_disabled: NbBooleanInput;\r\n    /**\r\n     * Show only icons when width is smaller than `tabs-icon-only-max-width`\r\n     * @type {boolean}\r\n     */\r\n    set responsive(val: boolean);\r\n    get responsive(): boolean;\r\n    static ngAcceptInputType_responsive: NbBooleanInput;\r\n    route: string;\r\n    activeValue: boolean;\r\n    responsiveValue: boolean;\r\n    disabledValue: boolean;\r\n    /**\r\n     * Specifies active tab\r\n     * @returns {boolean}\r\n     */\r\n    get active(): boolean;\r\n    set active(val: boolean);\r\n    static ngAcceptInputType_active: NbBooleanInput;\r\n    /**\r\n     * Lazy load content before tab selection\r\n     * TODO: rename, as lazy is by default, and this is more `instant load`\r\n     * @param {boolean} val\r\n     */\r\n    set lazyLoad(val: boolean);\r\n    static ngAcceptInputType_lazyLoad: NbBooleanInput;\r\n    /**\r\n     * Badge text to display\r\n     * @type string\r\n     */\r\n    badgeText: string;\r\n    /**\r\n     * Badge status (adds specific styles):\r\n     * 'primary', 'info', 'success', 'warning', 'danger'\r\n     * @param {string} val\r\n     */\r\n    badgeStatus: NbComponentOrCustomStatus;\r\n    /**\r\n     * Badge position.\r\n     * Can be set to any class or to one of predefined positions:\r\n     * 'top left', 'top right', 'bottom left', 'bottom right',\r\n     * 'top start', 'top end', 'bottom start', 'bottom end'\r\n     * @type string\r\n     */\r\n    badgePosition: NbBadgePosition;\r\n    init: boolean;\r\n}\r\n/**\r\n *\r\n * Dynamic tabset component.\r\n * @stacked-example(Showcase, tabset/tabset-showcase.component)\r\n *\r\n * Basic tabset example\r\n *\r\n * ```html\r\n * <nb-tabset>\r\n *  <nb-tab tabTitle=\"Simple Tab #1\">\r\n *    Tab content 1\r\n *  </nb-tab>\r\n *  <nb-tab tabTitle=\"Simple Tab #2\">\r\n *    Tab content 2\r\n *  </nb-tab>\r\n * </nb-tabset>\r\n * ```\r\n *\r\n * ### Installation\r\n *\r\n * Import `NbTabsetModule` to your feature module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbTabsetModule,\r\n *   ],\r\n * })\r\n * export class PageModule { }\r\n * ```\r\n * ### Usage\r\n *\r\n * It is also possible to set a badge to a particular tab:\r\n * @stacked-example(Tab With Badge, tabset/tabset-badge.component)\r\n *\r\n * and we can set it to full a width of a parent component\r\n * @stacked-example(Full Width, tabset/tabset-width.component)\r\n *\r\n * `tabIcon` should be used to add an icon to the tab. Icon can also be combined with title.\r\n * `responsive` tab property if set allows you to hide the title on smaller screens\r\n * (`tabs-icon-only-max-width` property) for better responsive behaviour. You can open the following example and make\r\n * your screen smaller - titles will be hidden in the last tabset in the list:\r\n *\r\n * @stacked-example(Icon, tabset/tabset-icon.component)\r\n *\r\n * It is also possible to disable a tab using `disabled` property:\r\n * @stacked-example(Disabled Tab, tabset/tabset-disabled.component)\r\n *\r\n * @styles\r\n *\r\n * tabset-background-color:\r\n * tabset-border-radius:\r\n * tabset-shadow:\r\n * tabset-tab-background-color:\r\n * tabset-tab-padding:\r\n * tabset-tab-text-color:\r\n * tabset-tab-text-font-family:\r\n * tabset-tab-text-font-size:\r\n * tabset-tab-text-font-weight:\r\n * tabset-tab-text-line-height:\r\n * tabset-tab-text-transform:\r\n * tabset-tab-underline-width:\r\n * tabset-tab-underline-color:\r\n * tabset-tab-active-background-color:\r\n * tabset-tab-active-text-color:\r\n * tabset-tab-active-underline-color:\r\n * tabset-tab-focus-background-color:\r\n * tabset-tab-focus-text-color:\r\n * tabset-tab-focus-underline-color:\r\n * tabset-tab-hover-background-color:\r\n * tabset-tab-hover-text-color:\r\n * tabset-tab-hover-underline-color:\r\n * tabset-tab-disabled-background-color:\r\n * tabset-tab-disabled-text-color:\r\n * tabset-tab-disabled-underline-color:\r\n * tabset-divider-color:\r\n * tabset-divider-style:\r\n * tabset-divider-width:\r\n * tabset-content-background-color:\r\n * tabset-content-padding:\r\n * tabset-content-text-color:\r\n * tabset-content-text-font-family:\r\n * tabset-content-text-font-size:\r\n * tabset-content-text-font-weight:\r\n * tabset-content-text-line-height:\r\n * tabset-scrollbar-color:\r\n * tabset-scrollbar-background-color:\r\n * tabset-scrollbar-width:\r\n * tabset-tab-text-hide-breakpoint:\r\n */\r\nexport declare class NbTabsetComponent implements AfterContentInit {\r\n    private route;\r\n    private changeDetectorRef;\r\n    tabs: QueryList<NbTabComponent>;\r\n    fullWidthValue: boolean;\r\n    /**\r\n     * Take full width of a parent\r\n     * @param {boolean} val\r\n     */\r\n    set fullWidth(val: boolean);\r\n    static ngAcceptInputType_fullWidth: NbBooleanInput;\r\n    /**\r\n     * If specified - tabset listens to this parameter and selects corresponding tab.\r\n     * @type {string}\r\n     */\r\n    routeParam: string;\r\n    /**\r\n     * Emits when tab is selected\r\n     * @type EventEmitter<any>\r\n     */\r\n    changeTab: EventEmitter<any>;\r\n    constructor(route: ActivatedRoute, changeDetectorRef: ChangeDetectorRef);\r\n    ngAfterContentInit(): void;\r\n    selectTab(selectedTab: NbTabComponent): void;\r\n}\r\n"]}