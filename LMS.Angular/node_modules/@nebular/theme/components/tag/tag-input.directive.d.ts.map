{"version":3,"file":"tag-input.directive.d.ts","sources":["tag-input.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { AfterViewInit, ElementRef, EventEmitter, NgZone, Renderer2 } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { NbStatusService } from '../../services/status.service';\r\nimport { NbFocusMonitor } from '../cdk/a11y/a11y.module';\r\nimport { NbInputDirective } from '../input/input.directive';\r\nexport interface NbTagInputAddEvent {\r\n    input: ElementRef<HTMLInputElement>;\r\n    value: string;\r\n}\r\n/**\r\n *\r\n * `[nbTagInput]` directive connects input with a `nb-tag-list` component.\r\n *\r\n * @stacked-example(Tag Input, tag/tag-input.component)\r\n *\r\n * @additional-example(Tag Input with Autocomplete, tag/tag-input-with-autocomplete.component)\r\n *\r\n * @styles\r\n *\r\n * tag-list-tiny-tag-offset:\r\n * tag-list-small-tag-offset:\r\n * tag-list-medium-tag-offset:\r\n * tag-list-large-tag-offset:\r\n * tag-list-giant-tag-offset:\r\n * tag-list-with-input-tiny-padding:\r\n * tag-list-with-input-small-padding:\r\n * tag-list-with-input-medium-padding:\r\n * tag-list-with-input-large-padding:\r\n * tag-list-with-input-giant-padding:\r\n */\r\nexport declare class NbTagInputDirective extends NbInputDirective implements AfterViewInit {\r\n    _hostElement: ElementRef<HTMLInputElement>;\r\n    protected focusMonitor: NbFocusMonitor;\r\n    protected renderer: Renderer2;\r\n    protected zone: NgZone;\r\n    protected statusService: NbStatusService;\r\n    protected readonly keyDown$: Subject<KeyboardEvent>;\r\n    get _value(): string;\r\n    /**\r\n     * Controls which keys should trigger tag add event.\r\n     */\r\n    separatorKeys: number[];\r\n    /**\r\n     * Emits when a tag need to be added.\r\n     */\r\n    tagAdd: EventEmitter<NbTagInputAddEvent>;\r\n    readonly nbTagInputClass = true;\r\n    _onKeydown(event: KeyboardEvent): void;\r\n    constructor(_hostElement: ElementRef<HTMLInputElement>, focusMonitor: NbFocusMonitor, renderer: Renderer2, zone: NgZone, statusService: NbStatusService);\r\n    ngAfterViewInit(): void;\r\n    protected isSeparatorKey(keyCode: number): boolean;\r\n}\r\n"]}