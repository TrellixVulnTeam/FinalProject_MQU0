{"version":3,"file":"timepicker.component.d.ts","sources":["timepicker.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { NbBooleanInput } from '../helpers';\r\nimport { NbPortalDirective } from '../cdk/overlay/mapping';\r\nimport { NbPlatform } from '../cdk/platform/platform-service';\r\nimport { NbDateService, NbDayPeriod } from '../calendar-kit/services/date.service';\r\nimport { NbCalendarTimeModelService } from '../calendar-kit/services/calendar-time-model.service';\r\nimport { NbSelectedTimePayload, NbTimePickerConfig } from './model';\r\ninterface NbTimePartOption {\r\n    value: number;\r\n    text: string;\r\n}\r\n/**\r\n * The TimePicker components itself.\r\n * Provides a proxy to `TimePicker` options as well as custom picker options.\r\n */\r\nexport declare class NbTimePickerComponent<D> implements OnChanges, OnInit {\r\n    protected config: NbTimePickerConfig;\r\n    protected platformService: NbPlatform;\r\n    cd: ChangeDetectorRef;\r\n    protected calendarTimeModelService: NbCalendarTimeModelService<D>;\r\n    protected dateService: NbDateService<D>;\r\n    protected blur$: Subject<void>;\r\n    fullTimeOptions: D[];\r\n    hoursColumnOptions: NbTimePartOption[];\r\n    minutesColumnOptions: NbTimePartOption[];\r\n    secondsColumnOptions: NbTimePartOption[];\r\n    readonly dayPeriodColumnOptions: NbDayPeriod[];\r\n    hostRef: ElementRef;\r\n    isAM: boolean;\r\n    /**\r\n     * Emits when timepicker looses focus.\r\n     */\r\n    get blur(): Observable<void>;\r\n    /**\r\n     * Defines time format string.\r\n     * */\r\n    get timeFormat(): string;\r\n    set timeFormat(timeFormat: string);\r\n    protected _timeFormat: string;\r\n    /**\r\n     * Defines 12 hours format .\r\n     * */\r\n    get twelveHoursFormat(): boolean;\r\n    set twelveHoursFormat(value: boolean);\r\n    protected _twelveHoursFormat: boolean;\r\n    static ngAcceptInputType_twelveHoursFormat: NbBooleanInput;\r\n    /**\r\n     * Show seconds in timepicker.\r\n     * Ignored when singleColumn is true\r\n     * */\r\n    get withSeconds(): boolean;\r\n    set withSeconds(value: boolean);\r\n    protected _withSeconds: boolean;\r\n    static ngAcceptInputType_withSeconds: NbBooleanInput;\r\n    /**\r\n     * Show timepicker values in one column with 60 minutes step by default.\r\n     * */\r\n    get singleColumn(): boolean;\r\n    set singleColumn(value: boolean);\r\n    _singleColumn: boolean;\r\n    static ngAcceptInputType_singleColumn: NbBooleanInput;\r\n    /**\r\n     * Defines minutes offset for options, when timepicker is in single column mode.\r\n     * By default itâ€™s 60 minutes: '12:00, 13:00: 14:00, 15:00...'\r\n     * */\r\n    set step(step: number);\r\n    get step(): number;\r\n    protected _step: number;\r\n    /**\r\n     * Date which will be rendered as selected.\r\n     * */\r\n    set date(date: D);\r\n    get date(): D;\r\n    _date: D;\r\n    /**\r\n     * In timepicker value should be always true\r\n     * In calendar-with-time.component  should set to false\r\n     * @docs-private\r\n     */\r\n    showFooter: boolean;\r\n    applyButtonText: string;\r\n    hoursText: string;\r\n    minutesText: string;\r\n    secondsText: string;\r\n    ampmText: string;\r\n    currentTimeButtonText: string;\r\n    /**\r\n     * Emits date when selected.\r\n     * */\r\n    onSelectTime: EventEmitter<NbSelectedTimePayload<D>>;\r\n    portal: NbPortalDirective;\r\n    constructor(config: NbTimePickerConfig, platformService: NbPlatform, locale: string, cd: ChangeDetectorRef, calendarTimeModelService: NbCalendarTimeModelService<D>, dateService: NbDateService<D>);\r\n    ngOnInit(): void;\r\n    ngOnChanges({ step, twelveHoursFormat, withSeconds, singleColumn, }: SimpleChanges): void;\r\n    setHost(hostRef: ElementRef): void;\r\n    attach(hostRef: ElementRef): void;\r\n    setCurrentTime(): void;\r\n    setHour(value: number): void;\r\n    setMinute(value: number): void;\r\n    setSecond(value: number): void;\r\n    selectFullTime(value: D): void;\r\n    changeDayPeriod(dayPeriodToSet: NbDayPeriod): void;\r\n    updateValue(date: D): void;\r\n    saveValue(): void;\r\n    trackByTimeValues(index: any, item: NbTimePartOption): number;\r\n    trackBySingleColumnValue(index: any, item: D): number;\r\n    trackByDayPeriod(index: any, item: NbDayPeriod): string;\r\n    showSeconds(): boolean;\r\n    isSelectedHour(val: number): boolean;\r\n    isSelectedMinute(val: number): boolean;\r\n    isSelectedSecond(val: number): boolean;\r\n    isSelectedDayPeriod(dayPeriod: NbDayPeriod): boolean;\r\n    getFullTimeString(item: D): string;\r\n    isSelectedFullTimeValue(value: D): boolean;\r\n    protected buildColumnOptions(): void;\r\n    /**\r\n     * @docs-private\r\n     */\r\n    isFirefox(): boolean;\r\n    protected generateHours(): NbTimePartOption[];\r\n    protected generateMinutesOrSeconds(): NbTimePartOption[];\r\n    protected setupTimeFormat(): string;\r\n    /**\r\n     * @docs-private\r\n     */\r\n    buildTimeFormat(): string;\r\n    protected initFromConfig(config: NbTimePickerConfig): void;\r\n}\r\nexport {};\r\n"]}