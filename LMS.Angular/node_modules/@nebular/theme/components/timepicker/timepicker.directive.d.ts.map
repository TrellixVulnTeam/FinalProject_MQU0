{"version":3,"file":"timepicker.directive.d.ts","sources":["timepicker.directive.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ChangeDetectorRef, ComponentRef, ElementRef, Renderer2 } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { NbTimePickerComponent } from './timepicker.component';\r\nimport { NbOverlayRef, NbScrollStrategy } from '../cdk/overlay/mapping';\r\nimport { NbAdjustableConnectedPositionStrategy, NbPositionBuilderService } from '../cdk/overlay/overlay-position';\r\nimport { NbOverlayService } from '../cdk/overlay/overlay-service';\r\nimport { NbTriggerStrategy, NbTriggerStrategyBuilderService } from '../cdk/overlay/overlay-trigger';\r\nimport { NbDateService } from '../calendar-kit/services/date.service';\r\nimport { NbCalendarTimeModelService } from '../calendar-kit/services/calendar-time-model.service';\r\n/**\r\n * The `NbTimePickerDirective` is form control that gives you ability to select a time. The timepicker\r\n * is shown when input receives a `focus` event.\r\n * ```html\r\n * <input [nbTimepicker]=\"timepicker\">\r\n * <nb-timepicker #timepicker></nb-timepicker>\r\n * ```\r\n *\r\n * @stacked-example(Showcase, timepicker/timepicker-showcase.component)\r\n *\r\n * ### Installation\r\n *\r\n * Import `NbTimepickerModule.forRoot()` to your root module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbTimepickerModule.forRoot(),\r\n *   ],\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n * And `NbTimepickerModule` to your feature module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbTimepickerModule,\r\n *   ],\r\n * })\r\n * export class PageModule { }\r\n *\r\n * ```\r\n * <div id=\"native-parse-issue\" class=\"note note-warning\">\r\n * <div class=\"note-title\">Note</div>\r\n * <div class=\"note-body\">\r\n * Timepicker uses native Date object by default, which doesn't support parsing by custom format.\r\n * According to the ECMAScript specification, the only supported format is a format described by ISO 8061 standard.\r\n * This standard requires date part to be included in the date string,\r\n * meaning you have to type a date+time in the input.\r\n * We highly recommend you to use NbDateFnsDateModule or NbMomentDateModule to be able to support time only strings in\r\n * the timepicker inputs. These modules use date-fns and moment date libraries, which provide capabilities\r\n * to parse time only strings.\r\n * See \"Formatting Issue\" at\r\n * <a href=\"https://akveo.github.io/nebular/docs/components/datepicker/overview#formatting-issue\">Date picker docs</a>\r\n * for installation instructions.\r\n * </div>\r\n * </div>\r\n * <hr>\r\n *\r\n * ### Usage\r\n *\r\n * To show seconds column along with hours and minutes use `withSeconds` input\r\n *\r\n * ```html\r\n * <input [nbTimepicker]=\"timepicker\">\r\n * <nb-timepicker #timepicker withSeconds></nb-timepicker>\r\n * ```\r\n * @stacked-example(Time picker with seconds, timepicker/timepicker-with-seconds.component)\r\n *\r\n * To force timepicker work in 12 hours format, use `twelveHoursFormat` input.\r\n * By default, timepicker choose 12 or 24 formats based on application locale standards\r\n *\r\n * ```html\r\n * <input [nbTimepicker]=\"timepicker\" twelveHoursFormat>\r\n * <nb-timepicker #timepicker></nb-timepicker>\r\n * ```\r\n *\r\n * @stacked-example(Twelve hours format showcase, timepicker/timepicker-twelve-hours-format.component)\r\n *\r\n * A single column picker with options value as time and minute, so users wonâ€™t be able to pick\r\n * hours and minutes individually.\r\n * You can control options minutes offset via `step` input, e.g.: 11:00, 11:20, 11:40...'\r\n *\r\n * @stacked-example(Single column, timepicker/timepicker-single-column.component)\r\n *\r\n * Timepicker support forms and reactive forms API so you can provide value using `formControl` and `ngModel` directives\r\n * @stacked-example(Form control, timepicker/timepicker-form-control.component)\r\n *\r\n * <input [nbTimepicker]=\"timepicker\" twelveHoursFormat>\r\n * <nb-timepicker #timepicke [formControl]=\"formControl\"></nb-timepicker>\r\n *\r\n * @stacked-example(NgModel, timepicker/timepicker-ng-model.component)\r\n *\r\n * <input [nbTimepicker]=\"timepicker\" twelveHoursFormat>\r\n * <nb-timepicker #timepicke [ngModel]=\"date\"></nb-timepicker>\r\n *\r\n * You can provide localized versions of the timepicker text via the `localization` property of the config\r\n * object passed to the `forRoot` or `forChild` methods of the `NbTimepickerModule`:\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbTimepickerModule.forRoot({\r\n *       localization: {\r\n *         hoursText: 'Hr',\r\n *         minutesText: 'Min',\r\n *         secondsText: 'Sec',\r\n *         ampmText: 'Am/Pm',\r\n *       }\r\n *     }),\r\n *   ],\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n *\r\n * @styles\r\n *\r\n * timepicker-cell-text-color:\r\n * timepicker-cell-hover-background-color:\r\n * timepicker-cell-hover-text-color:\r\n * timepicker-cell-focus-background-color:\r\n * timepicker-cell-focus-text-color:\r\n * timepicker-cell-active-background-color:\r\n * timepicker-cell-active-text-color:\r\n * timepicker-cell-text-font-size:\r\n * timepicker-cell-text-font-family:\r\n * timepicker-cell-text-line-height:\r\n * timepicker-cell-text-font-weight:\r\n * timepicker-cell-height:\r\n * timepicker-header-cell-text-color:\r\n * timepicker-header-cell-text-font-size:\r\n * timepicker-header-cell-text-font-family:\r\n * timepicker-header-cell-height:\r\n * timepicker-header-cell-text-line-height:\r\n * timepicker-header-cell-text-font-weight:\r\n * timepicker-border-color:\r\n * timepicker-border-style:\r\n * timepicker-border-width:\r\n * timepicker-scrollbar-color:\r\n * timepicker-scrollbar-background-color:\r\n * timepicker-scrollbar-width:\r\n * timepicker-single-column-width:\r\n * timepicker-multiple-column-width:\r\n * timepicker-title-height:\r\n * timepicker-title-padding:\r\n * timepicker-container-width:\r\n * timepicker-container-height:\r\n * */\r\nexport declare class NbTimePickerDirective<D> implements AfterViewInit, ControlValueAccessor {\r\n    protected document: any;\r\n    protected positionBuilder: NbPositionBuilderService;\r\n    protected hostRef: ElementRef;\r\n    protected triggerStrategyBuilder: NbTriggerStrategyBuilderService;\r\n    protected overlay: NbOverlayService;\r\n    protected cd: ChangeDetectorRef;\r\n    protected calendarTimeModelService: NbCalendarTimeModelService<D>;\r\n    protected dateService: NbDateService<D>;\r\n    protected renderer: Renderer2;\r\n    protected placeholder: string;\r\n    /**\r\n     * Provides timepicker component.\r\n     * */\r\n    get timepicker(): NbTimePickerComponent<D>;\r\n    set timepicker(timePicker: NbTimePickerComponent<D>);\r\n    protected _timePickerComponent: NbTimePickerComponent<D>;\r\n    /**\r\n     * Time picker overlay offset.\r\n     * */\r\n    overlayOffset: number;\r\n    /**\r\n     * String representation of latest selected date.\r\n     * Updated when value is updated programmatically (writeValue), via timepicker (subscribeOnApplyClick)\r\n     * or via input field (handleInputChange)\r\n     * @docs-private\r\n     */\r\n    protected lastInputValue: string;\r\n    /**\r\n     * Positioning strategy used by overlay.\r\n     * @docs-private\r\n     * */\r\n    protected positionStrategy: NbAdjustableConnectedPositionStrategy;\r\n    protected overlayRef: NbOverlayRef;\r\n    protected destroy$: Subject<void>;\r\n    protected onChange: (value: D) => void;\r\n    protected onTouched: () => void;\r\n    /**\r\n     * Trigger strategy used by overlay.\r\n     * @docs-private\r\n     * */\r\n    protected triggerStrategy: NbTriggerStrategy;\r\n    /**\r\n     * Returns html input element.\r\n     * @docs-private\r\n     * */\r\n    get input(): HTMLInputElement;\r\n    /**\r\n     * Determines is timepicker overlay opened.\r\n     * @docs-private\r\n     * */\r\n    get isOpen(): boolean;\r\n    /**\r\n     * Determines is timepicker overlay closed.\r\n     * @docs-private\r\n     * */\r\n    get isClosed(): boolean;\r\n    constructor(document: any, positionBuilder: NbPositionBuilderService, hostRef: ElementRef, triggerStrategyBuilder: NbTriggerStrategyBuilderService, overlay: NbOverlayService, cd: ChangeDetectorRef, calendarTimeModelService: NbCalendarTimeModelService<D>, dateService: NbDateService<D>, renderer: Renderer2, placeholder: string);\r\n    /**\r\n     * Returns host input value.\r\n     * @docs-private\r\n     * */\r\n    get inputValue(): string;\r\n    set inputValue(value: string);\r\n    ngAfterViewInit(): void;\r\n    show(): void;\r\n    hide(): void;\r\n    /**\r\n     * Attaches picker to the timepicker portal.\r\n     * @docs-private\r\n     * */\r\n    protected attachToOverlay(): void;\r\n    setupTimepicker(): void;\r\n    protected initOverlay(): void;\r\n    protected subscribeOnApplyClick(): void;\r\n    protected createOverlay(): void;\r\n    protected subscribeOnTriggers(): void;\r\n    protected createTriggerStrategy(): NbTriggerStrategy;\r\n    protected createPositionStrategy(): NbAdjustableConnectedPositionStrategy;\r\n    protected getContainer(): ComponentRef<any>;\r\n    protected createScrollStrategy(): NbScrollStrategy;\r\n    protected subscribeOnInputChange(): void;\r\n    protected subscribeToBlur(): void;\r\n    /**\r\n     * Parses input value and write if it isn't null.\r\n     * @docs-private\r\n     * */\r\n    protected handleInputChange(value: string): void;\r\n    protected updateValue(value: D): void;\r\n    writeValue(value: D): void;\r\n    registerOnChange(fn: (value: any) => {}): void;\r\n    registerOnTouched(fn: any): void;\r\n    protected parseNativeDateString(value: string): string;\r\n}\r\n"]}