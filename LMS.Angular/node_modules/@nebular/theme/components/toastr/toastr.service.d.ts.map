{"version":3,"file":"toastr.service.d.ts","sources":["toastr.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Akveo. All Rights Reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n */\r\nimport { ComponentFactoryResolver, ComponentRef } from '@angular/core';\r\nimport { NbOverlayRef } from '../cdk/overlay/mapping';\r\nimport { NbOverlayService } from '../cdk/overlay/overlay-service';\r\nimport { NbPositionBuilderService } from '../cdk/overlay/overlay-position';\r\nimport { NbGlobalLogicalPosition, NbGlobalPosition, NbPositionHelper } from '../cdk/overlay/position-helper';\r\nimport { NbToastrContainerComponent } from './toastr-container.component';\r\nimport { NbToastrConfig } from './toastr-config';\r\nimport { NbToast } from './model';\r\nimport { NbToastComponent } from './toast.component';\r\nexport declare class NbToastRef {\r\n    private toastContainer;\r\n    private toast;\r\n    constructor(toastContainer: NbToastContainer, toast: NbToast);\r\n    close(): void;\r\n}\r\nexport declare class NbToastContainer {\r\n    protected position: NbGlobalPosition;\r\n    protected containerRef: ComponentRef<NbToastrContainerComponent>;\r\n    protected positionHelper: NbPositionHelper;\r\n    protected toasts: NbToast[];\r\n    protected prevToast: NbToast;\r\n    get nativeElement(): any;\r\n    constructor(position: NbGlobalPosition, containerRef: ComponentRef<NbToastrContainerComponent>, positionHelper: NbPositionHelper);\r\n    attach(toast: NbToast): NbToastRef;\r\n    destroy(toast: NbToast): void;\r\n    protected isDuplicate(toast: NbToast): boolean;\r\n    protected isDuplicatePrevious(toast: NbToast): boolean;\r\n    protected isDuplicateAmongAll(toast: NbToast): boolean;\r\n    protected toastDuplicateCompareFunc: (t1: NbToast, t2: NbToast) => boolean;\r\n    protected removeToastIfLimitReached(toast: NbToast): void;\r\n    protected attachToast(toast: NbToast): NbToastComponent;\r\n    protected attachToTop(toast: NbToast): NbToastComponent;\r\n    protected attachToBottom(toast: NbToast): NbToastComponent;\r\n    protected setDestroyTimeout(toast: NbToast): void;\r\n    protected subscribeOnClick(toastComponent: NbToastComponent, toast: NbToast): void;\r\n    protected updateContainer(): void;\r\n}\r\ninterface NbToastrOverlayWithContainer {\r\n    overlayRef: NbOverlayRef;\r\n    toastrContainer: NbToastContainer;\r\n}\r\nexport declare class NbToastrContainerRegistry {\r\n    protected overlay: NbOverlayService;\r\n    protected positionBuilder: NbPositionBuilderService;\r\n    protected positionHelper: NbPositionHelper;\r\n    protected cfr: ComponentFactoryResolver;\r\n    protected document: any;\r\n    protected overlays: Map<NbGlobalPosition, NbToastrOverlayWithContainer>;\r\n    constructor(overlay: NbOverlayService, positionBuilder: NbPositionBuilderService, positionHelper: NbPositionHelper, cfr: ComponentFactoryResolver, document: any);\r\n    get(position: NbGlobalPosition): NbToastContainer;\r\n    protected instantiateContainer(position: NbGlobalLogicalPosition): void;\r\n    protected createContainer(position: NbGlobalLogicalPosition): NbToastrOverlayWithContainer;\r\n    protected addClassToOverlayHost(overlayRef: NbOverlayRef): void;\r\n    protected existsInDom(toastContainer: NbToastContainer): boolean;\r\n}\r\n/**\r\n * The `NbToastrService` provides a capability to build toast notifications.\r\n *\r\n * @stacked-example(Showcase, toastr/toastr-showcase.component)\r\n *\r\n * `NbToastrService.show(message, title, config)` accepts three params, title and config are optional.\r\n *\r\n * ### Installation\r\n *\r\n * Import `NbToastrModule.forRoot()` to your app module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbToastrModule.forRoot(config),\r\n *   ],\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n *\r\n * ### Usage\r\n *\r\n * Calling `NbToastrService.show(...)` will render new toast and return `NbToastrRef` with\r\n * help of which you may close newly created toast by calling `close` method.\r\n *\r\n * ```ts\r\n * const toastRef: NbToastRef = this.toastrService.show(...);\r\n * toastRef.close();\r\n * ```\r\n *\r\n * Config accepts following options:\r\n *\r\n * `position` - determines where on the screen toast will be rendered.\r\n * Default is `top-end`.\r\n *\r\n * @stacked-example(Position, toastr/toastr-positions.component)\r\n *\r\n * `status` - coloring and icon of the toast.\r\n * Default is `basic`.\r\n *\r\n * @stacked-example(Status, toastr/toastr-statuses.component)\r\n *\r\n * `duration` - the time after which the toast will be destroyed.\r\n * `0` means endless toast, that may be destroyed by click only.\r\n * Default is 3000 ms.\r\n *\r\n * @stacked-example(Duration, toastr/toastr-duration.component)\r\n *\r\n * `destroyByClick` - provides a capability to destroy toast by click.\r\n * Default is true.\r\n *\r\n * @stacked-example(Destroy by click, toastr/toastr-destroy-by-click.component)\r\n *\r\n * `preventDuplicates` - don't create new toast if it has the same title, message and status.\r\n * Default is false.\r\n *\r\n * @stacked-example(Prevent duplicates, toastr/toastr-prevent-duplicates.component)\r\n *\r\n * `duplicatesBehaviour` - determines how to treat the toasts duplication.\r\n * Compare with the previous message `previous`\r\n * or with all visible messages `all`.\r\n *\r\n * @stacked-example(Prevent duplicates behaviour , toastr/toastr-prevent-duplicates-behaviour.component)\r\n *\r\n * `limit` - the number of visible toasts in the toast container. The number of toasts is unlimited by default.\r\n *\r\n * @stacked-example(Prevent duplicates behaviour , toastr/toastr-limit.component)\r\n *\r\n * `hasIcon` - if true then render toast icon.\r\n * `icon` - you can pass icon class that will be applied into the toast.\r\n *\r\n * @stacked-example(Has icon, toastr/toastr-icon.component)\r\n * */\r\nexport declare class NbToastrService {\r\n    protected globalConfig: NbToastrConfig;\r\n    protected containerRegistry: NbToastrContainerRegistry;\r\n    constructor(globalConfig: NbToastrConfig, containerRegistry: NbToastrContainerRegistry);\r\n    /**\r\n     * Shows toast with message, title and user config.\r\n     * */\r\n    show(message: any, title?: any, userConfig?: Partial<NbToastrConfig>): NbToastRef;\r\n    /**\r\n     * Shows success toast with message, title and user config.\r\n     * */\r\n    success(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\r\n    /**\r\n     * Shows info toast with message, title and user config.\r\n     * */\r\n    info(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\r\n    /**\r\n     * Shows warning toast with message, title and user config.\r\n     * */\r\n    warning(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\r\n    /**\r\n     * Shows primary toast with message, title and user config.\r\n     * */\r\n    primary(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\r\n    /**\r\n     * Shows danger toast with message, title and user config.\r\n     * */\r\n    danger(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\r\n    /**\r\n     * Shows default toast with message, title and user config.\r\n     * */\r\n    default(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\r\n    /**\r\n     * Shows control toast with message, title and user config.\r\n     * */\r\n    control(message: any, title?: any, config?: Partial<NbToastrConfig>): NbToastRef;\r\n}\r\nexport {};\r\n"]}