{"version":3,"file":"tooltip.directive.d.ts","sources":["tooltip.directive.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, OnChanges, OnDestroy, OnInit, EventEmitter } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { NbComponentOrCustomStatus } from '../component-status';\r\nimport { NbAdjustment, NbPosition, NbPositionValues, NbAdjustmentValues } from '../cdk/overlay/overlay-position';\r\nimport { NbTrigger } from '../cdk/overlay/overlay-trigger';\r\nimport { NbDynamicOverlay } from '../cdk/overlay/dynamic/dynamic-overlay';\r\nimport { NbDynamicOverlayHandler } from '../cdk/overlay/dynamic/dynamic-overlay-handler';\r\nimport { NbOverlayConfig } from '../cdk/overlay/mapping';\r\nimport { NbTooltipComponent } from './tooltip.component';\r\nimport { NbIconConfig } from '../icon/icon.component';\r\n/**\r\n *\r\n * Tooltip directive for small text/icon hints.\r\n *\r\n * ### Installation\r\n *\r\n * Import `NbTooltipModule` to your feature module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbTooltipModule,\r\n *   ],\r\n * })\r\n * export class PageModule { }\r\n * ```\r\n * ### Usage\r\n *\r\n * @stacked-example(Showcase, tooltip/tooltip-showcase.component)\r\n *\r\n * Tooltip can accept a hint text and/or an icon:\r\n * @stacked-example(With Icon, tooltip/tooltip-with-icon.component)\r\n *\r\n * Same way as Popover, tooltip can accept placement position with `nbTooltipPlacement` property:\r\n * @stacked-example(Placements, tooltip/tooltip-placements.component)\r\n *\r\n * It is also possible to specify tooltip color using `nbTooltipStatus` property:\r\n * @stacked-example(Colored Tooltips, tooltip/tooltip-colors.component)\r\n *\r\n * Tooltip has a number of triggers which provides an ability to show and hide the component in different ways:\r\n *\r\n * - Click mode shows the component when a user clicks on the host element and hides when the user clicks\r\n * somewhere on the document outside the component.\r\n * - Hint provides capability to show the component when the user hovers over the host element\r\n * and hide when the user hovers out of the host.\r\n * - Hover works like hint mode with one exception - when the user moves mouse from host element to\r\n * the container element the component remains open, so that it is possible to interact with it content.\r\n * - Focus mode is applied when user focuses the element.\r\n * - Noop mode - the component won't react to the user interaction.\r\n */\r\nexport declare class NbTooltipDirective implements OnInit, OnChanges, AfterViewInit, OnDestroy {\r\n    protected hostRef: ElementRef;\r\n    protected dynamicOverlayHandler: NbDynamicOverlayHandler;\r\n    protected destroy$: Subject<void>;\r\n    protected tooltipComponent: typeof NbTooltipComponent;\r\n    protected dynamicOverlay: NbDynamicOverlay;\r\n    context: Object;\r\n    /**\r\n     * Tooltip message\r\n     */\r\n    content: string;\r\n    /**\r\n     * Position will be calculated relatively host element based on the position.\r\n     * Can be top, right, bottom, left, start or end.\r\n     */\r\n    position: NbPosition;\r\n    static ngAcceptInputType_position: NbPositionValues;\r\n    /**\r\n     * Container position will change automatically based on this strategy if container can't fit view port.\r\n     * Set this property to `noop` value if you want to disable automatic adjustment.\r\n     * Available values: `clockwise` (default), `counterclockwise`, `vertical`, `horizontal`, `noop`.\r\n     */\r\n    get adjustment(): NbAdjustment;\r\n    set adjustment(value: NbAdjustment);\r\n    protected _adjustment: NbAdjustment;\r\n    static ngAcceptInputType_adjustment: NbAdjustmentValues;\r\n    get tooltipClass(): string;\r\n    set tooltipClass(value: string);\r\n    _tooltipClass: string;\r\n    /**\r\n     * Accepts icon name or icon config object\r\n     * @param {string | NbIconConfig} icon name or config object\r\n     */\r\n    set icon(icon: string | NbIconConfig);\r\n    /**\r\n     *\r\n     * @param {string} status\r\n     */\r\n    set status(status: NbComponentOrCustomStatus);\r\n    /**\r\n     * Describes when the container will be shown.\r\n     * Available options: `click`, `hover`, `hint`, `focus` and `noop`\r\n     * */\r\n    trigger: NbTrigger;\r\n    /**\r\n     * Determines tooltip overlay offset (in pixels).\r\n     **/\r\n    offset: number;\r\n    nbTooltipShowStateChange: EventEmitter<{\r\n        isShown: boolean;\r\n    }>;\r\n    protected overlayConfig: NbOverlayConfig;\r\n    get isShown(): boolean;\r\n    constructor(hostRef: ElementRef, dynamicOverlayHandler: NbDynamicOverlayHandler);\r\n    ngOnInit(): void;\r\n    ngOnChanges(): void;\r\n    ngAfterViewInit(): void;\r\n    rebuild(): void;\r\n    show(): void;\r\n    hide(): void;\r\n    toggle(): void;\r\n    ngOnDestroy(): void;\r\n    protected configureDynamicOverlay(): NbDynamicOverlayHandler;\r\n}\r\n"]}