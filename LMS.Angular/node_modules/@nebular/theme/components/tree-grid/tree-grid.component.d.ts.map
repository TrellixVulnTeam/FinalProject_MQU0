{"version":3,"file":"tree-grid.component.d.ts","sources":["tree-grid.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ChangeDetectorRef, ElementRef, IterableDiffers, OnDestroy } from '@angular/core';\r\nimport { NbPlatform } from '../cdk/platform/platform-service';\r\nimport { NbDirectionality } from '../cdk/bidi/bidi-service';\r\nimport { NbTable } from '../cdk/table/table.module';\r\nimport { NbViewportRulerAdapter } from '../cdk/adapter/viewport-ruler-adapter';\r\nimport { NbTreeGridDataSource, NbTreeGridDataSourceBuilder } from './data-source/tree-grid-data-source';\r\nimport { NbTreeGridPresentationNode } from './data-source/tree-grid.model';\r\nimport { NbToggleOptions } from './data-source/tree-grid.service';\r\nimport { NbTreeGridRowComponent } from './tree-grid-row.component';\r\nimport { NbTreeGridCellDirective } from './tree-grid-cell.component';\r\nimport { NbBooleanInput } from '../helpers';\r\n/**\r\n * Tree grid component that can be used to display nested rows of data.\r\n * Supports filtering and sorting.\r\n * @stacked-example(Showcase, tree-grid/tree-grid-showcase.component)\r\n *\r\n * ### Installation\r\n *\r\n * Import `NbTreeGridModule` to your feature module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbTreeGridModule,\r\n *   ],\r\n * })\r\n * export class PageModule { }\r\n * ```\r\n *\r\n * ### Usage\r\n *\r\n * As the most basic usage you need to define [nbTreeGridRowDef](docs/components/treegrid/api#nbtreegridrowdefdirective)\r\n * where you should pass columns to display in rows and\r\n * [nbTreeGridColumnDef](docs/components/treegrid/api#nbtreegridcolumndefdirective) - component containing cell\r\n * definitions for each column passed to row definition.\r\n * @stacked-example(Basic, tree-grid/tree-grid-basic.component)\r\n *\r\n * `NbTreeGridComponent`'s source input and `NbTreeGridDataSourceBuilder.create` expecting data to be an array of\r\n * objects with `data`, `children` and `expanded` properties. If your data doesn't match this interface, you can pass\r\n * getter functions for each property as arguments to `NbTreeGridDataSourceBuilder.create` method.\r\n * @stacked-example(Custom node structure, tree-grid/tree-grid-custom-node-structure.component)\r\n *\r\n * To use sorting you can add `nbSort` directive to table and subscribe to `sort` method. When user click on header,\r\n * sort event will be emitted. Event object contain clicked column name and desired sort direction.\r\n * @stacked-example(Sortable, tree-grid/tree-grid-sortable.component)\r\n *\r\n * You can use `Data Source Builder` to create `NbTreeGridDataSource` which would have toggle, sort and\r\n * filter methods. Then you can call this methods to change sort or toggle rows programmatically. Also `nbSort` and\r\n * `nbFilterInput` directives both support `NbTreeGridDataSource`, so you can pass it directly as an input and\r\n * directives will trigger sort, toggle themselves.\r\n * @stacked-example(Data Source Builder, tree-grid/tree-grid-showcase.component)\r\n *\r\n * You can create responsive grid by setting `hideOn` and `showOn` inputs of\r\n * [nbTreeGridColumnDef](docs/components/tree-grid/api#nbtreegridcolumndefdirective) directive.\r\n * When viewport reaches specified width grid hides or shows columns.\r\n * @stacked-example(Responsive columns, tree-grid/tree-grid-responsive.component)\r\n *\r\n * To customize sort or row toggle icons you can use `nbSortHeaderIcon` and `nbTreeGridRowToggle` directives\r\n * respectively. `nbSortHeaderIcon` is a structural directive and it's implicit context set to current direction.\r\n * Also context has three properties: `isAscending`, `isDescending` and `isNone`.\r\n * @stacked-example(Custom icons, tree-grid/tree-grid-custom-icons.component)\r\n *\r\n * By default, row to toggle happens when user clicks anywhere in the row. Also double click expands row deeply.\r\n * To disable this you can set `[clickToToggle]=\"false\"` input of `nbTreeGridRow`.\r\n * @stacked-example(Disable click toggle, tree-grid/tree-grid-disable-click-toggle.component)\r\n *\r\n * @styles\r\n *\r\n * tree-grid-cell-border-width:\r\n * tree-grid-cell-border-style:\r\n * tree-grid-cell-border-color:\r\n * tree-grid-row-min-height:\r\n * tree-grid-cell-padding:\r\n * tree-grid-header-background-color:\r\n * tree-grid-header-text-color:\r\n * tree-grid-header-text-font-family:\r\n * tree-grid-header-text-font-size:\r\n * tree-grid-header-text-font-weight:\r\n * tree-grid-header-text-line-height:\r\n * tree-grid-footer-background-color:\r\n * tree-grid-footer-text-color:\r\n * tree-grid-footer-text-font-family:\r\n * tree-grid-footer-text-font-size:\r\n * tree-grid-footer-text-font-weight:\r\n * tree-grid-footer-text-line-height:\r\n * tree-grid-row-background-color:\r\n * tree-grid-row-even-background-color:\r\n * tree-grid-row-hover-background-color:\r\n * tree-grid-row-text-color:\r\n * tree-grid-row-text-font-family:\r\n * tree-grid-row-text-font-size:\r\n * tree-grid-row-text-font-weight:\r\n * tree-grid-row-text-line-height:\r\n * tree-grid-sort-header-button-background-color:\r\n * tree-grid-sort-header-button-border:\r\n * tree-grid-sort-header-button-padding:\r\n */\r\nexport declare class NbTreeGridComponent<T> extends NbTable<NbTreeGridPresentationNode<T>> implements AfterViewInit, OnDestroy {\r\n    private dataSourceBuilder;\r\n    private window;\r\n    protected readonly _viewRepeater: any;\r\n    protected readonly _coalescedStyleScheduler: any;\r\n    protected readonly _stickyPositioningListener: any;\r\n    constructor(dataSourceBuilder: NbTreeGridDataSourceBuilder<T>, differs: IterableDiffers, changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef, role: string, dir: NbDirectionality, document: any, platform: NbPlatform, window: any, _viewRepeater: any, _coalescedStyleScheduler: any, _viewportRuler: NbViewportRulerAdapter, _stickyPositioningListener: any);\r\n    private destroy$;\r\n    private _source;\r\n    private platform;\r\n    /**\r\n     * The table's data\r\n     * @param data\r\n     * @type {<T>[] | NbTreeGridDataSource}\r\n     */\r\n    set source(data: T[] | NbTreeGridDataSource<T>);\r\n    levelPadding: string;\r\n    /**\r\n     * Make all columns equal width. False by default.\r\n     */\r\n    set equalColumnsWidth(value: boolean);\r\n    get equalColumnsWidth(): boolean;\r\n    private equalColumnsWidthValue;\r\n    static ngAcceptInputType_equalColumnsWidth: NbBooleanInput;\r\n    readonly treeClass = true;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    toggleRow(row: NbTreeGridRowComponent, options?: NbToggleOptions): void;\r\n    toggleCellRow(cell: NbTreeGridCellDirective): void;\r\n    getColumnWidth(): string;\r\n    getCellLevel(cell: NbTreeGridCellDirective, columnName: string): number;\r\n    private getRowContext;\r\n    private getCellContext;\r\n    private getContextByCellEl;\r\n    private getContextByRowEl;\r\n    private getColumns;\r\n    private getColumnsCount;\r\n    private isFirstColumn;\r\n    private checkDefsCount;\r\n    private updateVisibleColumns;\r\n}\r\n"]}