{"version":3,"file":"window.service.d.ts","sources":["window.service.d.ts"],"names":[],"mappingssourcesContent":["import { ComponentFactoryResolver, ComponentRef, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { NbComponentType, NbOverlayPositionBuilder, NbOverlayRef } from '../cdk/overlay/mapping';\r\nimport { NbOverlayService } from '../cdk/overlay/overlay-service';\r\nimport { NbBlockScrollStrategyAdapter } from '../cdk/adapter/block-scroll-strategy-adapter';\r\nimport { NbWindowConfig } from './window.options';\r\nimport { NbWindowRef } from './window-ref';\r\nimport { NbWindowComponent } from './window.component';\r\n/**\r\n * The `NbWindowService` can be used to open windows.\r\n *\r\n * @stacked-example(Showcase, window/window-showcase.component)\r\n *\r\n * ### Installation\r\n *\r\n * Import `NbWindowModule` to your app module.\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbWindowModule.forRoot(config),\r\n *   ],\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n *\r\n * If you are using it in a lazy loaded module than you have to install `NbWindowModule.forChild`:\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     // ...\r\n *     NbWindowModule.forChild(config),\r\n *   ],\r\n * })\r\n * export class LazyLoadedModule { }\r\n * ```\r\n *\r\n * ### Usage\r\n *\r\n * A new window can be opened by calling the `open` method with a component or template to be loaded\r\n * and an optional configuration.\r\n * `open` method will return `NbWindowRef` that can be used for the further manipulations.\r\n *\r\n * ```ts\r\n * const windowRef = this.windowService.open(MyComponent, { ... });\r\n * ```\r\n *\r\n * `NbWindowRef` gives you ability manipulate opened window.\r\n * Also, you can inject `NbWindowRef` inside provided component which rendered in window.\r\n *\r\n * ```ts\r\n * this.windowService.open(MyWindowComponent, { ... });\r\n *\r\n * // my.component.ts\r\n * constructor(protected windowRef: NbWindowRef) {\r\n * }\r\n *\r\n * minimize() {\r\n *   this.windowRef.minimize();\r\n * }\r\n *\r\n * close() {\r\n *   this.windowRef.close();\r\n * }\r\n * ```\r\n *\r\n * Instead of component you can create window from TemplateRef. As usual you can access context provided via config\r\n * via `let-` variables. Also you can get reference to the `NbWindowRef` in context's `windowRef` property.\r\n *\r\n * @stacked-example(Window content from TemplateRef, window/template-window.component)\r\n *\r\n * ### Configuration\r\n *\r\n * As mentioned above, `open` method of the `NbWindowService` may receive optional configuration options.\r\n * Also, you can modify default windows configuration through `NbWindowModule.forRoot({ ... })`.\r\n * You can read about all available options on [API tab](docs/components/window/api#nbwindowconfig).\r\n *\r\n * @stacked-example(Configuration, window/windows-backdrop.component)\r\n *\r\n * You can configure which buttons are available in a window via the `buttons` property of the window config.\r\n * @stacked-example(Control buttons, window/window-controls.component)\r\n *\r\n */\r\nexport declare class NbWindowService {\r\n    protected componentFactoryResolver: ComponentFactoryResolver;\r\n    protected overlayService: NbOverlayService;\r\n    protected overlayPositionBuilder: NbOverlayPositionBuilder;\r\n    protected blockScrollStrategy: NbBlockScrollStrategyAdapter;\r\n    protected readonly defaultWindowsConfig: NbWindowConfig;\r\n    protected cfr: ComponentFactoryResolver;\r\n    protected document: Document;\r\n    protected overlayRef: NbOverlayRef;\r\n    protected windowsContainerViewRef: ViewContainerRef;\r\n    protected openWindows: NbWindowRef[];\r\n    constructor(componentFactoryResolver: ComponentFactoryResolver, overlayService: NbOverlayService, overlayPositionBuilder: NbOverlayPositionBuilder, blockScrollStrategy: NbBlockScrollStrategyAdapter, defaultWindowsConfig: NbWindowConfig, cfr: ComponentFactoryResolver, document: any);\r\n    /**\r\n     * Opens new window.\r\n     * @param windowContent\r\n     * @param windowConfig\r\n     * */\r\n    open(windowContent: TemplateRef<any> | NbComponentType, windowConfig?: Partial<NbWindowConfig>): NbWindowRef;\r\n    protected shouldCreateWindowsContainer(): boolean;\r\n    protected createWindowsContainer(): void;\r\n    protected appendWindow(content: TemplateRef<any> | NbComponentType, config: NbWindowConfig, windowRef: NbWindowRef): ComponentRef<NbWindowComponent>;\r\n    protected subscribeToEvents(windowRef: NbWindowRef): void;\r\n    protected checkAndUpdateOverlay(): void;\r\n}\r\n"]}