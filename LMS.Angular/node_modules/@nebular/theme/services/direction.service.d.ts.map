{"version":3,"file":"direction.service.d.ts","sources":["direction.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n/**\r\n * Layout direction.\r\n * */\r\nexport declare enum NbLayoutDirection {\r\n    LTR = \"ltr\",\r\n    RTL = \"rtl\"\r\n}\r\n/**\r\n * Layout direction setting injection token.\r\n * */\r\nexport declare const NB_LAYOUT_DIRECTION: InjectionToken<NbLayoutDirection>;\r\n/**\r\n * Layout Direction Service.\r\n * Allows to set or get layout direction and listen to its changes\r\n */\r\nexport declare class NbLayoutDirectionService {\r\n    private direction;\r\n    private $directionChange;\r\n    constructor(direction?: NbLayoutDirection);\r\n    /**\r\n     * Returns true if layout direction set to left to right.\r\n     * @returns boolean.\r\n     * */\r\n    isLtr(): boolean;\r\n    /**\r\n     * Returns true if layout direction set to right to left.\r\n     * @returns boolean.\r\n     * */\r\n    isRtl(): boolean;\r\n    /**\r\n     * Returns current layout direction.\r\n     * @returns NbLayoutDirection.\r\n     * */\r\n    getDirection(): NbLayoutDirection;\r\n    /**\r\n     * Sets layout direction\r\n     * @param {NbLayoutDirection} direction\r\n     */\r\n    setDirection(direction: NbLayoutDirection): void;\r\n    /**\r\n     * Triggered when direction was changed.\r\n     * @returns Observable<NbLayoutDirection>.\r\n     */\r\n    onDirectionChange(): Observable<NbLayoutDirection>;\r\n}\r\n"]}