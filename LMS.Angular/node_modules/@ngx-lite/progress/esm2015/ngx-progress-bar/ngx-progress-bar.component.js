import { Component, Input, ViewEncapsulation, ChangeDetectionStrategy, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class NgxProgressBarComponent {
    constructor() {
        this.value = 0;
        this.showValue = true;
        this.translate = 'translateX(0%)';
    }
    ngOnChanges(changes) {
        this.translate = `translateX(${changes.value.currentValue}%)`;
    }
}
NgxProgressBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxProgressBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NgxProgressBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.2", type: NgxProgressBarComponent, selector: "ngx-progress-bar", inputs: { value: "value", showValue: "showValue" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"ngx-progress-bar\">\n  <div [style.transform]=\"translate\" class=\"ngx-progress-bar__inner\" role=\"progressbar\" [attr.aria.valuenow]=\"value\" aria-valuemin=\"0\"\n    aria-valuemax=\"100\"></div>\n  <div *ngIf=\"showValue\" class=\"ngx-progress-bar__value\">{{value}}%</div>\n</div>", styles: ["*,:after,:before{box-sizing:border-box}ngx-progress-bar{display:block;--color-bar:#3d3d3d;--color-value:#ccc;--color-inset-background:#f5f5f5;--inner-shadow:inset 0 1px 2px #0000001a}.ngx-progress-bar{width:100%;height:20px;background:#f5f5f5;background:var(--color-inset-background);border-radius:2px;position:relative;overflow:hidden;text-align:center;box-shadow:inset 0 1px 2px #0000001a;box-shadow:var(--inner-shadow);padding:2px;margin-bottom:4px}.ngx-progress-bar__inner{width:100%;height:100%;background:#3d3d3d;background:var(--color-bar);position:absolute;top:0;left:-100%;text-align:center;line-height:35px;font-size:1em;will-change:transform;transition:transform .1s ease-in}.ngx-progress-bar__value{color:#ccc;color:var(--color-value);z-index:2;position:absolute;text-align:center;left:0;right:0;top:-1px}"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxProgressBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-progress-bar',
                    templateUrl: './ngx-progress-bar.component.html',
                    styleUrls: ['./ngx-progress-bar.component.scss'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { value: [{
                type: Input
            }], showValue: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByb2dyZXNzLWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcHJvZ3Jlc3Mvc3JjL25neC1wcm9ncmVzcy1iYXIvbmd4LXByb2dyZXNzLWJhci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcHJvZ3Jlc3Mvc3JjL25neC1wcm9ncmVzcy1iYXIvbmd4LXByb2dyZXNzLWJhci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFHTCxpQkFBaUIsRUFDakIsdUJBQXVCLEdBQ3hCLE1BQU0sZUFBZSxDQUFDOzs7QUFTdkIsTUFBTSxPQUFPLHVCQUF1QjtJQVBwQztRQVFXLFVBQUssR0FBa0IsQ0FBQyxDQUFDO1FBQ3pCLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFDMUIsY0FBUyxHQUFHLGdCQUFnQixDQUFDO0tBSzlCO0lBSEMsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUcsY0FBYyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksSUFBSSxDQUFDO0lBQ2hFLENBQUM7O29IQVBVLHVCQUF1Qjt3R0FBdkIsdUJBQXVCLGlJQ2hCcEMsNlNBSU07MkZEWU8sdUJBQXVCO2tCQVBuQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFdBQVcsRUFBRSxtQ0FBbUM7b0JBQ2hELFNBQVMsRUFBRSxDQUFDLG1DQUFtQyxDQUFDO29CQUNoRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzhCQUVVLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxTQUFTO3NCQUFqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtcHJvZ3Jlc3MtYmFyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL25neC1wcm9ncmVzcy1iYXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9uZ3gtcHJvZ3Jlc3MtYmFyLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hQcm9ncmVzc0JhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIHZhbHVlOiBudW1iZXIgfCBudWxsID0gMDtcbiAgQElucHV0KCkgc2hvd1ZhbHVlID0gdHJ1ZTtcbiAgdHJhbnNsYXRlID0gJ3RyYW5zbGF0ZVgoMCUpJztcblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgdGhpcy50cmFuc2xhdGUgPSBgdHJhbnNsYXRlWCgke2NoYW5nZXMudmFsdWUuY3VycmVudFZhbHVlfSUpYDtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cIm5neC1wcm9ncmVzcy1iYXJcIj5cbiAgPGRpdiBbc3R5bGUudHJhbnNmb3JtXT1cInRyYW5zbGF0ZVwiIGNsYXNzPVwibmd4LXByb2dyZXNzLWJhcl9faW5uZXJcIiByb2xlPVwicHJvZ3Jlc3NiYXJcIiBbYXR0ci5hcmlhLnZhbHVlbm93XT1cInZhbHVlXCIgYXJpYS12YWx1ZW1pbj1cIjBcIlxuICAgIGFyaWEtdmFsdWVtYXg9XCIxMDBcIj48L2Rpdj5cbiAgPGRpdiAqbmdJZj1cInNob3dWYWx1ZVwiIGNsYXNzPVwibmd4LXByb2dyZXNzLWJhcl9fdmFsdWVcIj57e3ZhbHVlfX0lPC9kaXY+XG48L2Rpdj4iXX0=