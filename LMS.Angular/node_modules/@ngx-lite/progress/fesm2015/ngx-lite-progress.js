import * as i0 from '@angular/core';
import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';

class NgxProgressBarComponent {
    constructor() {
        this.value = 0;
        this.showValue = true;
        this.translate = 'translateX(0%)';
    }
    ngOnChanges(changes) {
        this.translate = `translateX(${changes.value.currentValue}%)`;
    }
}
NgxProgressBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxProgressBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NgxProgressBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.2", type: NgxProgressBarComponent, selector: "ngx-progress-bar", inputs: { value: "value", showValue: "showValue" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"ngx-progress-bar\">\n  <div [style.transform]=\"translate\" class=\"ngx-progress-bar__inner\" role=\"progressbar\" [attr.aria.valuenow]=\"value\" aria-valuemin=\"0\"\n    aria-valuemax=\"100\"></div>\n  <div *ngIf=\"showValue\" class=\"ngx-progress-bar__value\">{{value}}%</div>\n</div>", styles: ["*,:after,:before{box-sizing:border-box}ngx-progress-bar{display:block;--color-bar:#3d3d3d;--color-value:#ccc;--color-inset-background:#f5f5f5;--inner-shadow:inset 0 1px 2px #0000001a}.ngx-progress-bar{width:100%;height:20px;background:#f5f5f5;background:var(--color-inset-background);border-radius:2px;position:relative;overflow:hidden;text-align:center;box-shadow:inset 0 1px 2px #0000001a;box-shadow:var(--inner-shadow);padding:2px;margin-bottom:4px}.ngx-progress-bar__inner{width:100%;height:100%;background:#3d3d3d;background:var(--color-bar);position:absolute;top:0;left:-100%;text-align:center;line-height:35px;font-size:1em;will-change:transform;transition:transform .1s ease-in}.ngx-progress-bar__value{color:#ccc;color:var(--color-value);z-index:2;position:absolute;text-align:center;left:0;right:0;top:-1px}"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxProgressBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-progress-bar',
                    templateUrl: './ngx-progress-bar.component.html',
                    styleUrls: ['./ngx-progress-bar.component.scss'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { value: [{
                type: Input
            }], showValue: [{
                type: Input
            }] } });

class NgxProgressCircleComponent {
    constructor() {
        this.value = 0;
        this.symbol = '%';
        this.label = 'complete';
        this.valueLabel = '';
        this.radius = 74;
        this.circumference = 2 * Math.PI * this.radius;
        this.dashoffset = 0;
        this.progress(0);
    }
    ngOnChanges(changes) {
        this.progress(changes.value.currentValue);
    }
    progress(value) {
        const progress = value / 100;
        this.dashoffset = this.circumference * (1 - progress);
    }
}
NgxProgressCircleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxProgressCircleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NgxProgressCircleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.2", type: NgxProgressCircleComponent, selector: "ngx-progress-circle", inputs: { value: "value", symbol: "symbol", label: "label", valueLabel: "valueLabel" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"ngx-progress-circle\">\n  <svg class=\"ngx-progress-circle__svg\" width=\"170\" height=\"170\" viewBox=\"0 0 170 170\">\n    <circle class=\"ngx-progress-circle__svg__meter\" cx=\"84\" cy=\"84\" [attr.r]=\"radius\" stroke-width=\"16\" />\n    <circle class=\"ngx-progress-circle__svg__value\" [style.strokeDasharray]=\"circumference\" [style.strokeDashoffset]=\"dashoffset\"\n      cx=\"84\" cy=\"84\" [attr.r]=\"radius\" stroke-width=\"16\" />\n  </svg>\n\n  <div class=\"ngx-progress-circle__value\">\n    <ng-container *ngIf=\"valueLabel !== null\">{{valueLabel}}</ng-container>\n    <ng-container *ngIf=\"valueLabel === null\">{{value}}</ng-container>{{symbol}}\n  </div>\n\n  <div *ngIf=\"!valueLabel\" class=\"ngx-progress-circle__value ng-content\">\n    <ng-content select=\"[icon-value-label]\"></ng-content>\n  </div>\n\n  <div class=\"ngx-progress-circle__complete\">{{label}}</div>\n</div>\n", styles: ["*,:after,:before{box-sizing:border-box}ngx-progress-circle{display:inline-block;--color-stroke:#3d3d3d;--color-circle:#f2f2f2}.ngx-progress-circle{position:relative;width:170px;height:170px;margin:0 auto}.ngx-progress-circle__svg{transform:rotate(-90deg)}.ngx-progress-circle__svg__meter,.ngx-progress-circle__svg__value{fill:none}.ngx-progress-circle__svg__meter{stroke:#f2f2f2;stroke:var(--color-circle)}.ngx-progress-circle__svg__value{stroke:#3d3d3d;stroke:var(--color-stroke);stroke-linecap:round;transition:all}.ngx-progress-circle__value{position:absolute;top:62px;text-align:center;font-size:2.7em;width:100%}.ngx-progress-circle__value.ng-content{top:50px}.ngx-progress-circle__complete{font-size:1.1em;position:absolute;text-align:center;width:100%;top:96px}"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxProgressCircleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-progress-circle',
                    templateUrl: './ngx-progress-circle.component.html',
                    styleUrls: ['./ngx-progress-circle.component.scss'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { value: [{
                type: Input
            }], symbol: [{
                type: Input
            }], label: [{
                type: Input
            }], valueLabel: [{
                type: Input
            }] } });

class NgxProgressModule {
}
NgxProgressModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxProgressModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxProgressModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxProgressModule, declarations: [NgxProgressBarComponent, NgxProgressCircleComponent], imports: [CommonModule], exports: [NgxProgressBarComponent, NgxProgressCircleComponent] });
NgxProgressModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxProgressModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0, type: NgxProgressModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NgxProgressBarComponent, NgxProgressCircleComponent],
                    exports: [NgxProgressBarComponent, NgxProgressCircleComponent],
                }]
        }] });

/*
 * Public API Surface of ngx-progress
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxProgressBarComponent, NgxProgressCircleComponent, NgxProgressModule };
//# sourceMappingURL=ngx-lite-progress.js.map
