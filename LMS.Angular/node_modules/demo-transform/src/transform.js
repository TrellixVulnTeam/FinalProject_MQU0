"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_1 = __importDefault(require("immutable"));
var utils_1 = require("./utils");
var types_1 = require("./types");
var _a = require('demo-utils'), fromJS = _a.fromJS, Logger = _a.Logger;
var LOGGER = new Logger('transform');
var Transform = /** @class */ (function () {
    function Transform(func, inputTypes, outputTypes, cacheable) {
        this.func = func;
        this.inputTypes = inputTypes;
        this.outputTypes = outputTypes;
        var hashObj = {
            func: func,
            inputTypes: inputTypes,
            outputTypes: outputTypes,
        };
        this.cacheable = cacheable || false;
        this.contentHash = new utils_1.Keccak256Hash(hashObj);
    }
    Transform.prototype.toString = function () {
        return 'Transform';
    };
    return Transform;
}());
exports.Transform = Transform;
exports.convertMapArgs = function (jsonArgs, types) {
    return immutable_1.default.Map(jsonArgs).map(function (argValue, argName) {
        var argType = types.get(argName, types_1.TYPES.any);
        var typeName = argType.typeName;
        return argType.childTypes ? exports.convertMapArgs(argValue, argType.childTypes) : argValue;
    });
};
exports.createTransform = function (transform) {
    var callable = function (state) { return __awaiter(void 0, void 0, void 0, function () {
        var inputArgs, output, convertedOutput, outputArgs;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    try {
                        inputArgs = types_1.checkExtractArgs(state, transform.inputTypes);
                    }
                    catch (e) {
                        throw new Error("Input types mismatch given state " + state.toJS() + " " +
                            ("and inputTypes " + transform.inputTypes.toJS() + ":  " + e.message));
                    }
                    return [4 /*yield*/, transform.func(inputArgs.toJS())];
                case 1:
                    output = _a.sent();
                    convertedOutput = exports.convertMapArgs(output, transform.outputTypes);
                    try {
                        outputArgs = types_1.checkExtractArgs(convertedOutput, transform.outputTypes);
                    }
                    catch (e) {
                        LOGGER.error('Output types mismatch', e.message);
                        throw e;
                    }
                    return [2 /*return*/, outputArgs];
            }
        });
    }); };
    callable.transform = transform;
    return callable;
};
var createOutputTypes = function (outLabel) {
    var outMap = {};
    outMap[outLabel ? outLabel : 'sum'] = types_1.TYPES.number;
    return immutable_1.default.Map(outMap);
};
exports.createInitialTransform = function (initialState, types) {
    // Initial input func is just a dummy that returns initial state and doesn't need anything
    // from the input state
    var func = function (initialArgs) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            // Actual args override defaults
            return [2 /*return*/, new Promise(function (resolve) { return resolve(initialState.mergeDeep(initialArgs)); })];
        });
    }); };
    return exports.createTransform({
        func: func,
        inputTypes: types,
        outputTypes: types,
        cacheable: false,
        contentHash: new utils_1.Keccak256Hash(func),
    });
};
