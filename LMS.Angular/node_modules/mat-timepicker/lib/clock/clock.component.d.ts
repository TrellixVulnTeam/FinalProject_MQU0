import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { ClockViewType, ClockNumber, ClockMode } from '../interfaces-and-types';
import { getIsAvailabeFn } from '../util';
import * as ɵngcc0 from '@angular/core';
export declare class ClockComponent implements OnChanges {
    mode: ClockMode;
    viewType: ClockViewType;
    color: string;
    formattedValue: number;
    minDate: Date;
    maxDate: Date;
    isPm: boolean;
    formattedHours: number;
    minutes: number;
    changeEvent: EventEmitter<any>;
    unavailableSelection: EventEmitter<any>;
    invalidMeridiem: EventEmitter<any>;
    invalidSelection: EventEmitter<any>;
    clearInvalidMeridiem: EventEmitter<any>;
    allowed12HourMap: any;
    allowed24HourMap: any;
    isFormattedValueAllowed: boolean;
    isAvailableFn: ReturnType<typeof getIsAvailabeFn>;
    meridiem: any;
    touching: boolean;
    angle: number;
    numbers: ClockNumber[];
    secondaryNumbers: ClockNumber[];
    minuteDots: ClockNumber[];
    invalidMeridiemEmitted: boolean;
    initIsAllowedFn(): void;
    isAvailable(value: any): any;
    ngOnChanges(simpleChanges: SimpleChanges): void;
    calculateAngule(): void;
    setNumbers(): void;
    disableAnimatedPointer(): void;
    enableAnimatedPointer(): void;
    handleTouchMove: (e: any) => void;
    handleTouchEnd(e: any): void;
    handleMouseMove(e: any): void;
    handleClick(e: any): void;
    movePointer(x: any, y: any): void;
    getNumbers(count: any, { size, start, step }: {
        size: any;
        start?: number;
        step?: number;
    }, isAllowedFn?: (num: number) => boolean): any;
    getPointerAngle(value: any, mode: ClockViewType): number;
    getPointerValue(x: any, y: any, size: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ClockComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<ClockComponent, "mat-clock", never, { "color": "color"; "allowed12HourMap": "allowed12HourMap"; "allowed24HourMap": "allowed24HourMap"; "mode": "mode"; "viewType": "viewType"; "formattedValue": "formattedValue"; "minDate": "minDate"; "maxDate": "maxDate"; "isPm": "isPm"; "formattedHours": "formattedHours"; "minutes": "minutes"; }, { "changeEvent": "changeEvent"; "unavailableSelection": "unavailableSelection"; "invalidMeridiem": "invalidMeridiem"; "invalidSelection": "invalidSelection"; "clearInvalidMeridiem": "clearInvalidMeridiem"; }, never, never>;
}

//# sourceMappingURL=clock.component.d.ts.map