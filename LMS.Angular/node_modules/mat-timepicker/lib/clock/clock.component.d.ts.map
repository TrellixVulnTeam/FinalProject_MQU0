{"version":3,"file":"clock.component.d.ts","sources":["clock.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { ClockViewType, ClockNumber, ClockMode } from '../interfaces-and-types';\nimport { getIsAvailabeFn } from '../util';\nexport declare class ClockComponent implements OnChanges {\n    mode: ClockMode;\n    viewType: ClockViewType;\n    color: string;\n    formattedValue: number;\n    minDate: Date;\n    maxDate: Date;\n    isPm: boolean;\n    formattedHours: number;\n    minutes: number;\n    changeEvent: EventEmitter<any>;\n    unavailableSelection: EventEmitter<any>;\n    invalidMeridiem: EventEmitter<any>;\n    invalidSelection: EventEmitter<any>;\n    clearInvalidMeridiem: EventEmitter<any>;\n    allowed12HourMap: any;\n    allowed24HourMap: any;\n    isFormattedValueAllowed: boolean;\n    isAvailableFn: ReturnType<typeof getIsAvailabeFn>;\n    meridiem: any;\n    touching: boolean;\n    angle: number;\n    numbers: ClockNumber[];\n    secondaryNumbers: ClockNumber[];\n    minuteDots: ClockNumber[];\n    invalidMeridiemEmitted: boolean;\n    initIsAllowedFn(): void;\n    isAvailable(value: any): any;\n    ngOnChanges(simpleChanges: SimpleChanges): void;\n    calculateAngule(): void;\n    setNumbers(): void;\n    disableAnimatedPointer(): void;\n    enableAnimatedPointer(): void;\n    handleTouchMove: (e: any) => void;\n    handleTouchEnd(e: any): void;\n    handleMouseMove(e: any): void;\n    handleClick(e: any): void;\n    movePointer(x: any, y: any): void;\n    getNumbers(count: any, { size, start, step }: {\n        size: any;\n        start?: number;\n        step?: number;\n    }, isAllowedFn?: (num: number) => boolean): any;\n    getPointerAngle(value: any, mode: ClockViewType): number;\n    getPointerValue(x: any, y: any, size: any): any;\n}\n"]}