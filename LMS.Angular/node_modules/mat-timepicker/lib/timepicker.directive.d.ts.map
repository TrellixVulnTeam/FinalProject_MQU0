{"version":3,"file":"timepicker.directive.d.ts","sources":["timepicker.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ControlValueAccessor, NgForm, NgControl, FormGroupDirective } from '@angular/forms';\nimport { OnInit, EventEmitter, ElementRef, OnChanges, Renderer2, AfterViewInit, OnDestroy, SimpleChanges, NgZone, TemplateRef } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatFormFieldControl, MatFormField } from '@angular/material/form-field';\nimport { ClockMode } from './interfaces-and-types';\nimport { Subject } from 'rxjs';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nexport interface MatTimepickerButtonTemplateContext {\n    $implicit: () => void;\n    label: string;\n}\nexport declare class MatTimepickerDirective implements OnInit, OnChanges, AfterViewInit, OnDestroy, ControlValueAccessor, MatFormFieldControl<any> {\n    ngControl: NgControl;\n    dialog: MatDialog;\n    private renderer;\n    private zone;\n    private fm;\n    private elRef;\n    private ngZone;\n    protected _platform: Platform;\n    private _parentForm;\n    private _matFormFiled;\n    private _parentFormGroup;\n    static nextId: number;\n    /** Whether the component is being rendered on the server. */\n    readonly _isServer: boolean;\n    _errorState: boolean;\n    get errorState(): boolean;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    protected _disabled: boolean;\n    get id(): string;\n    set id(value: string);\n    protected _id: string;\n    get readonly(): boolean;\n    set readonly(value: boolean);\n    private _readonly;\n    private isAlive;\n    stateChanges: Subject<void>;\n    protected _uid: string;\n    get shouldLabelFloat(): boolean;\n    describedBy: string;\n    errorStateMatcher: ErrorStateMatcher;\n    get required(): boolean;\n    set required(req: boolean);\n    private _required;\n    get placeholder(): string;\n    set placeholder(plh: string);\n    private _placeholder;\n    focused: boolean;\n    private pattern;\n    private allowed24HourMap;\n    private allowed12HourMap;\n    private isInputFocused;\n    okButtonTemplate: TemplateRef<MatTimepickerButtonTemplateContext> | null;\n    cancelButtonTemplate: TemplateRef<MatTimepickerButtonTemplateContext> | null;\n    /** Override the label of the ok button. */\n    okLabel: string;\n    /** Override the label of the cancel button. */\n    cancelLabel: string;\n    /** Override the ante meridiem abbreviation. */\n    anteMeridiemAbbreviation: string;\n    /** Override the post meridiem abbreviation. */\n    postMeridiemAbbreviation: string;\n    /** Sets the clock mode, 12-hour or 24-hour clocks are supported. */\n    mode: ClockMode;\n    color: string;\n    disableDialogOpenOnClick: boolean;\n    strict: boolean;\n    controlType: string;\n    private listeners;\n    minDate: Date;\n    maxDate: Date;\n    private _isPm;\n    private _value;\n    private _formattedValueString;\n    private _skipValueChangeEmission;\n    set value(value: Date);\n    get value(): Date;\n    get isPm(): boolean;\n    get empty(): boolean;\n    private get formattedValueString();\n    private currentValue;\n    private modalRef;\n    private onChangeFn;\n    private onTouchedFn;\n    private combination;\n    timeChange: EventEmitter<any>;\n    invalidInput: EventEmitter<any>;\n    inputHandler(): void;\n    keydownHandler(event: any): boolean;\n    keyupHandler(event: any): void;\n    focusHandler(): void;\n    focusoutHandler(): void;\n    constructor(ngControl: NgControl, dialog: MatDialog, renderer: Renderer2, zone: NgZone, fm: FocusMonitor, elRef: ElementRef<HTMLElement>, ngZone: NgZone, _platform: Platform, _parentForm: NgForm, _matFormFiled: MatFormField, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher);\n    setDescribedByIds(ids: string[]): void;\n    onContainerClick(event: MouseEvent): void;\n    setInputElementValue(value: any): void;\n    validate(): {\n        dateRange: boolean;\n    };\n    ngAfterViewInit(): void;\n    clickHandler: (e: FocusEvent) => void;\n    ngOnInit(): void;\n    generateAllowedMap(): void;\n    ngOnChanges(simpleChanges: SimpleChanges): void;\n    checkValidity(value: Date): boolean;\n    writeValue(value: Date, isInnerCall?: boolean): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState?(isDisabled: boolean): void;\n    showDialog(): void;\n    handleChange: (newValue: any) => void;\n    handleOk: (value: any) => void;\n    handleCancel: () => void;\n    ngOnDestroy(): void;\n}\n"]}